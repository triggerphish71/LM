<!---------------------------------------------------------------------------------------------------
| DESCRIPTION: Create/Add new move in invoice for tenant                                            |
|---------------------------------------------------------------------------------------------------|
| MoveInFormInsert.cfm                                                                              |
|---------------------------------------------------------------------------------------------------|
| STORED PROCEDURES                                                                                 |
|---------------------------------------------------------------------------------------------------|
|  none                                                                                             |
|---------------------------------------------------------------------------------------------------|
| INCLUDES                                                                                          |
|---------------------------------------------------------------------------------------------------|
| Called by: 		MoveInForm.cfm															        |
| Calls/Submits:	MoveInFormSummary.cfm													        |
|---------------------------------------------------------------------------------------------------|
| HISTORY                                                                                           |
|---------------------------------------------------------------------------------------------------|
| Author     | Date       | Description                                                             |
|------------|------------|-------------------------------------------------------------------------|
|Paul Buendia| 02/07/2002 | Original Authorship												        |
|			 | 03/14/2002 |	Changed Find Occupancy from looking as solomonkey 				        |
|			 |			  |	and tenant id to just looking at amount of people 				        |
|			 |			  |	in the specific room.											        |
|Steve D.    | 04/22/2002 |	Added check for companion suite when determining occupancy		        |
|MLAW        | 09/12/2005 | Project 732228: Update New Tenant's chargeset with the cChargeSet       |
|            |            | from charges table                                                      |
|MLAW        | 12/07/2005 | New Move-In Tenant.cchargeset will be assigned by house.cchargeset      | 
|MLAW        | 08/22/2006 | Make sure the charges are assigned to correct Product Line ID           |
|SSathya     | 06/20/08   | Made modification according to project #20125                           |
| Ssathya    | 10/30/2008 | Added a query that would mark the record generated by the activating    |
|                         | assessments without billing in the invoicemaster table. as per 29842    |
| Ssathya    | 11/10/2008 | Project 30178 added the bIsGuarantorAgreement to the query              |
|                           LinkTenantContact query.										        |
|  Project 20125 modification. 06/20/08 ssathya for the update of some fields                       |
| RSchuette  | 11/21/2008 | Project 26955 addd code to TenantStateCode query to grab right          |
|			 |			  | apt address.													        |
| RSchuette	 | 7/29/2009  | Project 36359 - MI Check Received data, gaurentor, defpymnt             |
| RSchuette	 | 2/2/2010	  | Project 35227 - AutoApply MI charges                                    |
|SFarmer     |03/20/2012  | Project 75019 Added changes for Deferred NRF                            |
|sfarmer     | 04/24/2012 | move in charges changed to check dtEffectiveEnd date. tckt 89924        |
|sfarmer     | 06/09/2012 | 75019 - NRF/Deferred Installation                                       |
|sfarmer     | 06/09/2012 | 75019 - Adjustments for 2nd opp, respite, Idaho                         | 
|gthota      | 10/05/2012 | 96917 - STAR inquiry 'Duplicate Contact' after move-in in TIPS          |
|sfarmer     | 12/13/2012 | 99579 - removed required approval process for discounted NRF            | 
|Sfarmer     | 09/18/2013 | 102919 - Revise NRF approval process                                    |
|S Farmer    | 05/20/2014 | 116824 - Move-In update  - Allow ED to adjust BSF rate                  |
|S Farmer    | 05/20/2014 | 116824 - Phase 2 Allow different move-in and rent-effective dates       |
|            |            | allow respite to adjust BSF rates                                       |
|S Farmer    | 08/20/2014 | 116824 - back-off different move-in rent-effective dates                |
|            |            | allow adjustment of rates by all regions                                |
|S Farmer    | 09/08/2014 | 116824   Allow all houses edit BSF and Community Fee Rates              |
|S Farmer    | 2015-01-12 | 116824   Final Move-in Enhancements                                     |
|S Farmer    | 2015-07-31 | Updates for Pinicon Place with monthly charges                          |
|SFarmer,    | 2015-09-28 |  Medicaid, Memory Care Updates                                          |
|MShah       |            |                                                                         |
|S Farmer    | 2017-01-19 | clarified when ct.bIsDaily (in StandardRent & DailyRent) is not         |
|            |            | null for when there are daily and monthly room rates for a house        |
|SFarmer     | 05/02/2017 | Remove extraneous displays, comments & dumps,use error routine          |
|            |            |and display page                                                         |
|MStriegel   | 10/23/2017 | Added logic to update the database for bundled pricing.                 |
|gthota      | 05/23/2018 | Added query of query to get updated records from table.                 |
 ----------------------------------------------------------------------------------------------  --->

<cfoutput>
  <!---  
 test moveinforminsertstart
  
 
  --->
  <cfset todaysdate = CreateODBCDateTime(now())>
  <cfparam name="formatenddate" default="">
  <cfparam name="formatbgndate" default="">
  <cfparam name="aftertips" default="">
  <cfparam name="IsSecondOccupant" default="">
  <cfparam name="IsCompanion" default="">
  <cfparam name="monthdays1" default="">
  <cfparam name="monthdays2" default="">
  <cfparam name="nbrdays1" default="">
  <cfparam name="nbrdays2" default="">
  <cfparam name="acctper1" default="">
  <cfparam name="acctper2" default="">
  <cfparam name="acctperiod1" default="">
  <cfparam name="acctperiod2" default="">
  <!--- Medicaid Variables --->
  <cfparam name="cMedicaidAuthorizationNbr" default="">
  <cfparam name="dtFDOS" default="">
  <cfparam name="dtTDOS" default="">
  <!---mamta added two variable-mStateMedAidAmtRB,mStateMedAidAmtcare--->
  <cfparam name="mStateMedAidAmtRB" default="">
  <cfparam name="mStateMedAidAmtcare" default="">
  <cfparam name="cNJHSP" default="">
  <cfparam name="mMedicaidCopay" default="">
  <cfparam name="iPICD" default="">
  <cfparam name="iSICD" default="">
  <cfparam name="iTICD" default="">
  <cfparam name="cMCO" default="">
  <!--- Tpecku added functionality to show custom error redirect when user hits the back button after saving and then attempts to save again --->
 
<cfif ((Not IsDefined("Form.IResidencyType_ID")) or (Not Isdefined("form.itenant_id")))>
<CFINCLUDE TEMPLATE="/intranet/header.cfm">
<table width="640px"border="0"> 
	<tr>
		<td>
			<table>
				<tr>
					<th colspan="6" style="font-size:medium;"><b>Move In Form</b></th>
				</tr>
				<tr>
					<td colspan="6" align="center">&nbsp;
				</td>
				</tr>
				<tr>
					<td colspan="6" align="center">
					You have clicked on the 'Save' button without making any selections.
					</td>
				</tr>
				<tr style="background-color:##FFFFCC">
					<td align="center" style="font-weight: bold;" colspan="6">
						Please <a href="MoveInForm.cfm?ID=#form.itenant_id#"><font color="red"> click here </font></a> to return to Move In screen.
					</td>
				</tr>
				<tr>
					<td colspan="6" align="center">&nbsp;</td>
				</tr>
			</table>
		</td>
	</tr>
</table>
<CFINCLUDE TEMPLATE="/intranet/footer.cfm">

</cfif>
  <cfif IsDefined('form.MoveInMonth') and (form.MoveInMonth is not '')>
    <cfset variables.MoveInMonth = form.MoveInMonth>
    <cfelse>
    <cfset variables.MoveInMonth = form.RentMonth>
  </cfif>
  <cfset variables.RentMonth = form.RentMonth>
  <cfif IsDefined('form.MoveInDay') and (form.MoveInDay is not '')>
    <cfset variables.MoveInDay = form.MoveInDay>
    <cfelse>
    <cfset variables.MoveInDay = form.RentDay>
  </cfif>
  <cfset variables.RentDay = form.RentDay>
  <cfif IsDefined('form.MoveInYear') and  (form.MoveInYear is not '')>
    <cfset variables.MoveInYear = form.MoveInYear>
    <cfelse>
    <cfset variables.MoveInYear = form.RentYear>
  </cfif>
  <cfset variables.RentYear = form.RentYear>
  <cfloop list="#FIELDNAMES#" index="loopVar" delimiters=",">
    <cfset string = "form." & loopVar & " = Replace(form." & loopVar & ",""'"",""''"",""ALL"")">
    <cfset temp = evaluate(string)>
  </cfloop>
  <!--- <br />MoveInFormInsert.cfm<br /> --->
  <cftransaction>
    <!--- Set variable for timestamp to record corresponding times for transactions --->
    <cfquery name="getDate" datasource="#application.datasource#">
    select getDate() as Stamp,
    Right(CONVERT(VARCHAR(8), GETDATE(), 112),4) AS Stamp2
    ,RIGHT(CONVERT(VARCHAR(10), GETDATE(), 101),4) as Stamp3
    </cfquery>
    <!--- 35227 rts 2/2/2010 - added for proj --->
    <cfset TimeStamp = getDate.Stamp>
    <cfset Rstamp = getDate.Stamp2>
    <cfset ThisYear = getDate.Stamp3>
    <cfset NextYear = (getDate.Stamp3 + 1)>
    <cfquery name="qryTenant" datasource="tips4">
    select t.cfirstname + ' ' + t.clastname as 'TenantName'
    from tenant t WITH (NOLOCK) join tenantstate ts WITH (NOLOCK) on t.itenant_id = ts.itenant_id
    where t.itenant_id = #form.iTenant_ID#
    </cfquery>
    <cfset Resident = #qryTenant.tenantname#>
    <!---  Get the cChargeSet value from the house table based on the house id --->
    <cfquery name="getHouseChargeset" datasource="tips4">
    select cs.CName,h.cSLevelTypeSet, h.cbillingtype, h.cname as 'Community' from house h WITH (NOLOCK)
    join chargeset cs WITH (NOLOCK)
    on cs.iChargeSet_ID = h.iChargeSet_ID
    where ihouse_id = #session.qSelectedHouse.iHouse_ID# and h.dtrowdeleted is null
    </cfquery>
    <cfif session.qSelectedHouse.iHouse_ID gt 0>
      <cftry>

          <cfquery name="UpdateChargeset" datasource="tips4">
          update Tenant 
          set cChargeSet = '#getHouseChargeset.CName#' 
          ,csleveltypeset = #getHouseChargeset.cSLevelTypeSet# ,dtrowstart=getdate() 
          ,crowstartuser_id='#session.userid#'
          where iTenant_ID = #form.iTenant_ID#
          </cfquery>
        <cfcatch type="any">		  
          <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem while updating the Tenant table for cChargeSet and csleveltypeset.<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">
        </cfcatch>
      </cftry>
    </cfif>
    <cfif form.iResidencyType_ID is 5>
        <cftry>
		    <cfquery name="UpdateBillingType" datasource="#application.datasource#">
			  update Tenant
			  set cBillingType = 'D'
			  where iTenant_ID = #form.iTenant_ID#
      		</cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem while updating the Tenant table for Billing Type.<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">
			</cfcatch>
		</cftry>
      <!---mamta added productline to determine billing type--->
	<cfelseif form.IPRODUCTLINE_ID is 2>
		  <cfquery name="UpdateBillingType" datasource="#application.datasource#" result="UpdateBillingType">
		  update Tenant
		  set cBillingType = 'M'
		  where iTenant_ID = #form.iTenant_ID#
		  </cfquery>
      <!---mamta/end--->
      <cfelse>
		  <cfquery name="UpdateBillingType" datasource="#application.datasource#" result="UpdateBillingType">
		  update Tenant
		  set cBillingType = '#getHouseChargeset.cbillingtype#'
		  where iTenant_ID = #form.iTenant_ID#
		  </cfquery>
    </cfif>
    <!--- <cfdump var="#UpdateBillingType#"> --->
    <!--- Retrieve Tenant Information for use when there is no prior contact information --->
    <cfquery name="Tenant" datasource="#application.datasource#">
    select t.csolomonkey,* from tenant T WITH (NOLOCK)
    join TenantState ts WITH (NOLOCK) on (t.iTenant_ID = ts.iTenant_ID and ts.dtRowDeleted is null)
    where t.dtRowDeleted is null and t.iTenant_ID = #form.iTenant_ID#
    </cfquery>
    <cfif Tenant.iTenantStateCode_ID EQ 2>
      <center>
        <B style='font-size: large; color: red;'>This tenant is already moved in.<br/>
        You will be redirected in 10 seconds.</B>
      </center>
      <script> function redirect() { location.href='../MainMenu.cfm'; } setTimeout('redirect()',10000); </script>
    </cfif>
    <cfscript>
	switch(Tenant.cBillingType){
	 
		case 'D': billing = 'daily'; break;
		case 'M': billing = 'monthly'; break;		
		default: billing='daily';
	}

	//Concatenate Phone Number from areacode prefix and number
	Phone1 = form.areacode1 & form.prefix1 & form.number1; 	
	Phone2 = form.areacode2 & form.prefix2 & form.number2;

	//Concatenate the dates

	dtMoveIn = CreateODBCDATETIME(variables.MoveInMonth & '/' & variables.MoveInDay & '/' & variables.MoveInYear);
	MoveInMonth = CreateODBCDATETIME(variables.MoveInMonth & '/' & 01 & '/' & variables.MoveInYear);
	MoveInPeriod = Year(variables.dtMoveIn) & DateFormat(variables.dtMoveIn,"mm");
	MIDaysInMonth = DaysInMonth(MoveInMonth);
//   	CurrPeriod = Year(session.TipsMonth) & DateFormat(session.TipsMonth,"mm");  
 	CurrPeriod = Year(now()) & DateFormat(now(),"mm");
// 	CurrentMonth = createODBCDateTime(Month(session.TIPSMonth) & "/" & 01 & "/" & Year(session.TIPSMonth));
 	CurrentMonth = createODBCDateTime(Month(now()) & "/" & 01 & "/" & Year(now()));
 	CurrPeriodDays = DaysInMonth(CurrPeriod);	
// 	MonthsDifference = DateDiff('m',CurrentMonth,RentMonth);
	
	dtRent = CreateODBCDATETIME(variables.RentMonth & '/' & variables.RentDay & '/' & variables.RentYear);
	RentMonth = CreateODBCDATETIME(variables.RentMonth & '/' & 01 & '/' & variables.RentYear);
	RentPeriod = Year(variables.dtRent) & DateFormat(variables.dtRent,"mm");
	RentDaysInMonth = DaysInMonth(RentMonth);

	TIPSPeriod = Year(session.TipsMonth) & DateFormat(session.TipsMonth,"mm");
	TIPSMonth = CreateODBCDateTime(Month(session.TIPSMonth) & "/" & 01 & "/" 
	& Year(session.TIPSMonth));
	TIPSPeriodDays = DaysInMonth(session.TIPSMonth);

	RentDaysToCharge = (RentDaysInMonth - form.RentDay) +1;
	if (MoveInPeriod LT currPeriod){ CurrentDaysToCharge=CurrPeriodDays; } 
	else {CurrentDaysToCharge=0;}
	MonthsDifference = DateDiff('m',TIPSmonth,RentMonth);
	nextmonth = DateAdd('m', 1, RentMonth);
	MonthList=ArrayNew(1); 
	chargeDays=ArrayNew(1);
	AcctMonthList=ArrayNew(1);
	MonthList[1]=dtRent;
	ChargeDays[1]=RentDaysToCharge;
	AcctMonthList[1]=RentPeriod;
	limit=abs(MonthsDifference);
	for (i=1; i LTE limit; i=i+1) {  
		MonthList[i+1]=DateAdd('m', i, RentMonth);  
		ChargeDays[i+1]=DaysInMonth(MonthList[i+1]); 
	 	if (Month(nextmonth) lt 10)
	 		{AcctMonthList[i+1] = Year(MonthList[i+1]) & '0' &  month(MonthList[i+1]);}
	 		else
	 		{AcctMonthList[i+1] = Year(MonthList[i+1]) & month(MonthList[i+1]);}
		}
</cfscript>
    <cfset monthlistLen =  arraylen(MonthList)>
    <cfset ChargeDaysLen =  arraylen(ChargeDays)>
    <!---  
		
		MonthList:: CurrentMonth:#CurrentMonth# MoveInPeriod#MoveInPeriod# currPeriod#currPeriod# <br />
		MonthsDifference#MonthsDifference# RentMonth:#RentMonth#<br />moveinMonth:#moveinMonth# <br />
		#dtmovein#, #monthlistLen#, #ChargeDaysLen#<br />limit:: #limit#<br /> 
		<cfloop index="q" from="1" to="#monthlistLen#"> monthlistLen:: #MonthList[q]# <br /> </cfloop>  
		<cfloop index="t" from="1" to="#ChargeDaysLen#">ChargeDaysLen:: #ChargeDays[t]#<br /></cfloop> 
	--->
    <cfscript>		
whereat = 'notyet';
	CareSub = 0;
	CareMonthList=ArrayNew(1);
	CareDaysToCharge=ArrayNew(1); 
	CareMoveInPeriod=ArrayNew(1); 
	CareChargeDays=	ArrayNew(1); 
	CareRentDaysInMonth = ArrayNew(1);	
	CareMonthsDifference = abs(DateDiff('m',TIPSMonth,dtRent)) ;	
	Carelimit= CareMonthsDifference ;
//	limit=abs(MonthsDifference) ;
	CareMonthList[1]=dtMovein;	
	for (i=1; i LTE Carelimit; i=i+1) {  
		CareMonthList[i+1]=DateAdd('m', i, variables.MoveInMonth);  

		}	
		
</cfscript>
    <cfset 	Carelimit=arraylen(CareMonthList)>
    <!---  
		<br />
	CareMonthsDifference: #CareMonthsDifference# Carelimit: #Carelimit# <br />
	  --->
    <cfscript>
	//	CareRentDaysInMonth[1] = DaysInMonth(CareMonthList[1]); 
for (i=1; i LTE Carelimit; i=i+1) {
		CareSub = CareSub + 1;
	//	MonthList[i+1]=DateAdd('m', i, MoveInMonth);  
		CareRentDaysInMonth[i]=DaysInMonth(CareMonthList[i]); 
		}
</cfscript>
    <!---  
	<br>
	 <br>
	 <br>
	Carelimit: #Carelimit# :::	CareMonthsDifference: #CareMonthsDifference# </br>
   --->
    <cfscript>
for (i=1; i LTE Carelimit; i=i+1) {
//WriteDump(var=MonthList[i],label='MonthListA'); WriteDump(var=MoveInMonth, label='MoveInMonthA');
 if  (MonthList[i] LTE MoveInMonth and i == 1)
 	{	
		whereat = 'i = 1';
			WriteDump(var=whereat,label='whereat1');
			WriteDump(var=i, label='i1');
			WriteDump(var=MonthList[i],label='MonthList1'); 
			WriteDump(var=MoveInMonth, label='MoveInMonth1');
			CareRentDaysInMonth = DaysInMonth(CareMonthList[i]);
			CareDaysToCharge = CareRentDaysInMonth - variables.MoveInDay  +1;

	//	CareMonthList[i]=dtMoveIn;
		CareChargeDays[i]=CareDaysToCharge;
		if (Month(CareMonthList[i]) lt 10)
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & '0' &  month(CareMonthList[i]);}
			else
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & month(CareMonthList[i]);}

		}
else  if  (MonthList[i] LE MoveInMonth and i gt 1)
	{		
		WriteDump(var=MonthList[i],label='MonthList2'); 
		WriteDump(var=MoveInMonth, label='MoveInMonth2');
		 WriteDump(var=i, label='i2');
			whereat = 'i gt 1';
					WriteDump(var=whereat,label='whereat2');
	 	CareRentDaysInMonth = DaysInMonth(CareMonthList[i]);
	 	CareDaysToCharge = CareRentDaysInMonth ;
		
	//CareMonthList[i]=dtMoveIn;
		CareChargeDays[i]=CareDaysToCharge;
		if (month(CareMonthList[i]) lt 10)
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & '0' &  month(CareMonthList[i]);}
			else
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & month(CareMonthList[i]);}
	} 
else  if  ((MonthList[i] GT MoveInMonth) and (MonthList[i] lte TIPsMonth) and (i gt 1))
	{		
		WriteDump(var=MonthList[i],label='MonthList4'); 
		WriteDump(var=MoveInMonth, label='MoveInMonth4');
		WriteDump(var=TIPsMonth, label="TIPsMonth");		
		WriteDump(var=i, label='i4');
		whereat = 'GT MoveInMonth - i gt 1';
		WriteDump(var=whereat,label='whereat4');
	 	CareRentDaysInMonth = DaysInMonth(CareMonthList[i]);
	 	CareDaysToCharge = CareRentDaysInMonth ;
		
	//	CareMonthList[i]=dtMoveIn;
		CareChargeDays[i]=CareDaysToCharge;
		if (month(CareMonthList[i]) lt 10)
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & '0' &  month(CareMonthList[i]);}
			else
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & month(CareMonthList[i]);}
	} 	
else {		whereat = 'else';	
		WriteDump(var=whereat,label='whereat3');
				 WriteDump(var=i, label='i3');
		WriteDump(var=MonthList[i],label='MonthList3'); 
		WriteDump(var=MoveInMonth, label='MoveInMonth3');
	  	CareRentDaysInMonth[i] = DaysInMonth(CareMonthList[i]);
	 	CareDaysToCharge = CareRentDaysInMonth[i] - variables.MoveInDay  +1;
	//	CareMonthList[i]=dtMoveIn;
		CareChargeDays[i]=CareDaysToCharge;
		if (month(CareMonthList[i]) lt 10)
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & '0' &  month(CareMonthList[i]);}
			else
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & month(CareMonthList[i]);}
		}
		}
 </cfscript>
    <!--- <br />
		whereat :: #whereat#<br />
		dtMoveIn :: 	#dtMoveIn# <br  />
		MoveInMonth :: 	#MoveInMonth# <br  />
		MoveInPeriod :: 	#MoveInPeriod#<br  />
		MIDaysInMonth :: 	#MIDaysInMonth#<br  />
		
		CurrPeriod  ::   	#CurrPeriod# <br  /> 
		CurrentMonth ::  	#CurrentMonth# <br  />
		CurrPeriodDays ::  	#CurrPeriodDays#<br  />
		
		dtRent :: 	#dtRent#<br  />
		RentMonth :: 	#RentMonth# <br  />
		RentPeriod :: 	#RentPeriod#<br  />
		RentDaysInMonth :: 	#RentDaysInMonth# <br  />
		
		TIPSPeriod :: 	#TIPSPeriod# <br  />
		TIPSMonth :: 	#TIPSMonth# <br  />
		TIPSPeriodDays	 :: #TIPSPeriodDays# <br  />
		
		RentDaysToCharge :: 	#RentDaysToCharge# <br  />
		CurrentDaysToCharge	 ::  #CurrentDaysToCharge# <br />
		MonthsDifference :: 	#MonthsDifference# <br  />
		
		RentPeriod	 :: 		 #RentPeriod#   LT
		CurrPeriod	 :: 		   #CurrPeriod#  
		CurrentDaysToCharge		 :: 	  #CurrentDaysToCharge#  
		<cfif arraylen(CareMonthList) gt 1>
		CareMonthList :: #CareMonthList[1]# <br  />
		<cfelse>
		CareMonthList :: empty <br  />
		</cfif> 
		Carelimit	:: #Carelimit#<br  />
		CareSub		::	#CareSub# ;<br  />
		
		

		
		
		
		
	 --->
    <cfquery name="bondhouse" datasource="#application.datasource#">
    select * from house WITH (NOLOCK) where ihouse_id = #session.qSelectedHouse.iHouse_ID#
    </cfquery>
    <cfquery name="GetTenantInfo" datasource="#application.datasource#">
    select * from tenant WITH (NOLOCK) where iTenant_id = #form.iTenant_id#
    </cfquery>
    <cfif bondhouse.ibondhouse eq 1>
      <cfquery name="UpdateTenantBondInfo" datasource="#application.datasource#">
      Update Tenant
      Set
      <cfif isdefined("form.cBondQualifying") and form.cBondQualifying neq "">
        bIsBond = '#form.cBondQualifying#'
      </cfif>
      <cfif isdefined("form.dtBondCertificationMailed") and ((form.dtBondCertificationMailed neq "")
	 or (form.dtBondCertificationMailed neq "00/00/0000"))>
        ,dtBondCert = '#form.dtBondCertificationMailed#'
        <cfelse>
        ,dtBondCert = #todaysdate#
      </cfif>
      ,cRowEndUser_ID = '#SESSION.USERNAME#'
      Where iTenant_ID = #form.iTenant_ID#
      </cfquery>
      <cfquery name="TenantBondCheck" datasource="#application.datasource#">
      select bIsBond from tenant WITH (NOLOCK) where iTenant_ID = #form.iTenant_ID#
      </cfquery>
      <cfquery name="RoomBondCheck" datasource="#application.datasource#">
      select bBondIncluded from AptAddress WITH (NOLOCK) where iAptAddress_ID = #form.iAptAddress_ID#
      </cfquery>
      <cfif TenantBondCheck.bIsBond eq 1 and RoomBondCheck.bBondIncluded eq 1>
        <cfquery name="TurnRoomBond" datasource="#application.datasource#">
        Update AptAddress
        Set bIsBond = 1,cRowEndUser_ID = '#SESSION.USERNAME#'
        where iAptAddress_id = #form.iAptAddress_ID#
        </cfquery>
      </cfif>
    </cfif>
	<!--- Check if there is already someone in this room, thus this person is 2nd occupant --->
    <cfquery name="AptInfo" datasource="#application.datasource#">
    <!--- 	select * from AptAddress where iAptAddress_ID = #form.iAptAddress_ID# and dtRowDeleted is null --->
    select distinct TS.iAptAddress_ID 
    from TenantState TS WITH (NOLOCK)
    join Tenant T WITH (NOLOCK) on T.iTenant_ID = TS.iTenant_ID and T.dtRowDeleted is null
    join AptAddress AD WITH (NOLOCK) on AD.iAptAddress_ID = TS.iAptAddress_ID and AD.dtRowDeleted is null
    where TS.dtRowDeleted is null 
    and	TS.iTenantStateCode_ID = 2
    and	AD.iHouse_ID = #session.qSelectedHouse.iHouse_ID# and ts.iAptAddress_ID = #form.iAptAddress_ID#
    </cfquery>

    <!--- mstriegel query to see if the house has bundled pricing --->
    <cfquery name="qHasBundledPricing" datasource="#application.datasource#">
      SELECT bIsBundledPricing
      FROM house with (NOLOCK)
      WHERE iHouse_ID = <cfqueryparam cfsqltype="cf_sql_integer" value="#SESSION.qSelectedHouse.iHouse_ID#">
    </cfquery>
    <!--- end mstriegel 12/08/17 --->   
    <cfif AptInfo.iAptAddress_ID is not ''>
      <cfset IsSecondOccupant = "Yes">
      <cfelse>
      <cfset IsSecondOccupant = "No">
    </cfif>
    <!---Mamta Added for BI ALtoMC switch project--->
    <cfquery name="MemoryCareAptCheck" datasource="#application.datasource#">
    Select * from aptaddress WTIH (NOLOCK) where iaptaddress_ID = #trim(form.iAptAddress_ID)#
    </cfquery>
    
    <!---end--->
    <cfquery name="UpdateTenantPayer" datasource="#application.datasource#">
		update Tenant
		Set
			cMiddleInitial = '#form.cMiddleInitial#'
			,cSSN = '#form.cSSN#'
			,dBirthDate = '#form.dbirthdate#'
			,bIsPayer =
			<cfif isdefined("form.TenantbIsPayer") and form.TenantbIsPayer neq "">#form.TenantbIsPayer# <cfelse> null </cfif>
			<cfif (ListContains(session.groupid,'240') gt 0) or (ListContains(session.groupid,'192') gt 0)>
			  <cfif IsDefined("form.cResidenceAgreement")and form.cResidenceAgreement neq "">
				, cResidenceAgreement = #form.cResidenceAgreement#
				<cfelse>
				, cResidenceAgreement = null
			  </cfif>
			  <cfif IsDefined("form.cResidentFee") and form.cResidentFee neq "">
				,cResidentFee=#trim(form.cResidentFee)#
				<cfelse>
				,cResidentFee=null
			  </cfif>
			</cfif>
			,chasExecutor = #isblank(form.hasExecutor,'null')# ,cPreviousAddressLine1 =
			<cfif form.cPreviousAddressLine1 neq ''>
			  '#form.cPreviousAddressLine1#'
			  <cfelse>
			  null
			</cfif>
			,cPreviousAddressLine2 =
			<cfif form.cPreviousAddressLine2 neq ''>
			  '#form.cPreviousAddressLine2#'
			  <cfelse>
			  null
			</cfif>
			,cPreviousCity =
			<cfif form.cPreviousCity neq ''>
			  '#form.cPreviousCity#'
			  <cfelse>
			  null
			</cfif>
			,cPreviousState =
			<cfif form.cPreviousState neq ''>
			  '#form.cPreviousState#'
			  <cfelse>
			  null
			</cfif>
			,cPreviousZipCode =
			<cfif form.cPreviousZipCode neq ''>
			  '#form.cPreviousZipCode#'
			  <cfelse>
			  null
			</cfif>
		where iTenant_ID = #form.iTenant_ID#
    </cfquery>
 
    <cfquery name="TenantStateCode" datasource="#application.datasource#" result="TenantStateCode">
		update TenantState
		Set
			bNextMonthsRent = #form.bNextMonthsRent# ,iResidencyType_ID = #trim(form.iResidencyType_ID)#
			<cfif form.iResidencyType_ID eq 3>
			  ,dtmoveoutprojecteddate = '#form.dtmoveoutprojecteddate#'
			</cfif>
			,iproductline_id = '#isBlank(form.iproductline_id,'NULL')#'
			,iAptAddress_ID = #trim(form.iAptAddress_ID)# ,dtSPEvaluation = null		
			,iSPoints =
			<cfif ((IsDefined('form.iSPoints') is 'Yes') and   (form.iSPoints is not ''))>
				#trim(form.iSPoints)#
			 <cfelse>
			  0
			</cfif>
			,iPrimaryDiagnosis = #isBlank(form.PrimaryDiagnosis,'NULL')# 
			,iSecondaryDiagnosis = #isBlank(form.SecondaryDiagnosis,'NULL')# 
			,dtRentEffective = #trim(variables.dtRent)# 
			,dtMoveIn = #trim(variables.dtMoveIn)#
			<!---  #trim(variables.dtRent)# --->
			,iRowStartUser_ID = #session.UserID# ,cMilitaryVA =
			<cfif form.cMilitaryVA neq ''>
			  '#form.cMilitaryVA#'
			  <cfelse>
			  null
			</cfif>
			,cMilitaryStartDate =
			<cfif form.cMilitaryStartDate neq ''>
			  '#form.cMilitaryStartDate#'
			  <cfelse>
			  null
			</cfif>
			,cMilitaryEndDate =
			<cfif form.cMilitaryEndDate neq ''>
			  '#form.cMilitaryEndDate#'
			  <cfelse>
			  null
			</cfif>
			<cfif isdefined("form.VABenefits") >
			  ,VABenefits = #isBlank(form.VaBenefits,'null')#
			</cfif>
			<cfif isdefined("form.VaRepresentativeContacted") >
			  ,VaRepresentativeContacted = #isBlank(form.VaRepresentativeContacted,'null')#
			</cfif>
			,VaBranchOfMilitary =
			<cfif form.VaBranchOfMilitary neq ''>
			  '#form.VaBranchOfMilitary#'
			  <cfelse>
			  null
			</cfif>
			<cfif bondhouse.ibondhouse eq 1>
			  <cfif isdefined("form.cBondHouseEligible") and form.cBondHouseEligible neq "">
				,cBondHouseEligible = #form.cBondHouseEligible#
				<cfelse>
				,cBondHouseEligible = null
			  </cfif>
			</cfif>
			<cfif (ListContains(session.groupid,'240') gt 0) or (ListContains(session.groupid,'192') gt 0)>
			  ,cTenantPromotion =
			  <cfif form.PromotionUsed neq ''>
				'#form.PromotionUsed#'
				<cfelse>
				null
			  </cfif>
			  ,bDeferredPayment =
			  <cfif isdefined("form.TenantbDeferredPayment") and form.TenantbDeferredPayment neq "">
					#form.TenantbDeferredPayment#
				<cfelse>
					0
			  </cfif>
			  <cfif isdefined("form.TenantbMICheckReceived") and form.TenantbMICheckReceived eq 1>
				,bMICheckReceived = '#form.TenantbMICheckReceived#'
				,dtMICheckReceived = getdate()
				<cfelse>
				,bMICheckReceived = 0
				,dtMICheckReceived = null
			  </cfif>
			  <cfelse>
			  ,bMICheckReceived = null
			  ,dtMICheckReceived = null
			  ,bDeferredPayment = null
			</cfif>
			,dtRowStart = getDate()
			<cfif IsDefined('form.VADeferral')>
			  <cfif form.VAApprove is not null  and form.VADeferral eq 1>
				,bIsVADeferred =    1 
				,cVADefApproveUser_ID = '#form.VAApprove#'
			  </cfif>
			</cfif>
			<cfif IsDefined('form.nrfApprove')  and form.nrfApprove is not ''  and form.NRFDeferral eq 1>
			  ,bIsNRFDeferred =    1 
			  ,cNRFDefApproveUser_ID =    '#form.nrfApprove#'
			</cfif>
			<cfif IsDefined('form.nrfApprove')  and form.nrfApprove is not ''  and form.newnrfee eq 0>
			  ,cNRFDefApproveUser_ID =    '#form.nrfApprove#'
			</cfif>
			<cfif IsDefined('form.nrfee')  and form.nrfee is not ''	>
			  <cfif AptInfo.iAptAddress_ID is not ''>
				,mBaseNRF = 0
				<cfelseif Tenant.iResidencyType_ID is 3>
				,mBaseNRF = 0
				<cfelse>
				,mBaseNRF = #nrfee#
			  </cfif>
			</cfif>
			<cfif IsDefined('form.mnewNRFee')  and form.mnewNRFee is not ''	>
			  <cfif AptInfo.iAptAddress_ID is not ''>
				,mAdjNRF = 0
				<cfelseif Tenant.iResidencyType_ID is 3>
				,mAdjNRF = 0
				<cfelse>
				,mAdjNRF = #mnewNRFee#
			  </cfif>
			</cfif>
			<!--- 	99579 <cfif IsDefined('form.nrfADJApprove')  and form.nrfADJApprove is not ''	>	
						,cNRFAdjApprovedBy = #nrfADJApprove#  
					</cfif>	 --->
			<cfif isdefined('amtdef') and amtdef is not "">
			  ,mAmtDeferred = #amtdef#
			</cfif>
			<cfif IsDefined('MonthstoPay') and MonthstoPay is not "">
			  ,iMonthsDeferred = #MonthstoPay#
			</cfif>
			<cfif IsDefined('AmtPAid') and AmtPAid is not "">
			  ,mAmtNRFPaid = #AmtPAid#
			</cfif>
			<cfif ((IsDefined("FeeType")) and (FeeType is not ''))>
			  ,cSecDepCommFee =   '#FeeType#'
			</cfif>
			<cfif (IsDefined("cSex") and (cSex is not ''))>
			  ,cSex = '#cSex#'
			</cfif>
			<cfif (IsDefined("cMedicaidAuthorizationNbr") and (cMedicaidAuthorizationNbr is not ''))>
			  ,cMedicaidAuthorizationNbr = '#cMedicaidAuthorizationNbr#'
			</cfif>
			<cfif (IsDefined("dtFDOS") and (dtFDOS is not ''))>
			  ,dtAuthFDOS = #CreateODBCDateTime(dtFDOS)#
			</cfif>
			<cfif (IsDefined("dtTDOS") and (dtTDOS is not ''))>
			  ,dtAuthTDOS = #CreateODBCDateTime(dtTDOS)#
			</cfif>
			<cfif (IsDefined("cNJHSP") and (cNJHSP is not ''))>
			  ,cNJHSP = '#cNJHSP#'
			</cfif>
			<cfif (IsDefined("mMedicaidCopay") and (mMedicaidCopay is not ''))>
			  ,mMedicaidCopay = #mMedicaidCopay#
			</cfif>
			<cfif (IsDefined("iPICD") and (iPICD is not ''))>
			  ,iPICD = '#iPICD#'
			</cfif>
			<cfif (IsDefined("iSICD") and (iSICD is not ''))>
			  ,iSICD = '#iSICD#'
			</cfif>
			<cfif (IsDefined("iTICD") and (iTICD is not ''))>
			  ,iTICD = '#iTICD#'
			</cfif>
			<cfif (IsDefined("cMCO") and (cMCO is not ''))>
			  ,iMCOProvider = '#cMCO#'
			</cfif>
			<!---Update the AL to MC switch if the aptaddress is bismemorycareelgible--for the ALto MC switch BI project--->
			<cfif #MemoryCareAptCheck.bismemorycareeligible# eq 1>
			  ,dtMCSwitch= #trim(variables.dtRent)#
			  <cfelse>
			  ,dtMCSwitch= Null
			</cfif>
      <!--- mstriegel: 10/23/17 if/elseif/else statement to determine which value is updated in the database --->
      <!--- has bundled pricing and its checked --->
      <cfif qHasBundledPricing.bIsBundledPricing EQ "1">
       <cfif isdefined("form.bundledPricing")>
          ,bIsBundled = <cfqueryparam  cfsqltype="cf_sql_bit" value="#val(form.bundledPricing)#">
        <!--- has bundled pricing but its not checked --->
        <cfelseif !IsDefined('form.bundledPricing') AND ListFindNoCase(form.studioIDlst,form.IAptAddress_id,",") GT 0>
          ,bIsBundled = <cfqueryparam cfsqltype="cf_sql_bit" value="0">
        <!--- the apartment type is not available for bundled pricing --->
        <cfelse>
          ,bIsBundled = Null
        </cfif>
      <cfelse>
       ,bIsBundled = NULL
      </cfif>
      <!--- end mstriegel --->
		where iTenant_ID = #form.iTenant_ID#
    </cfquery>
    <!--- <cfdump var="#TenantStateCode#"> --->
  </cftransaction>
  <cftransaction>
    <!--- Retrieve all information from tenant table for this tenant --->
    <cfquery name="TenantInfo" datasource="#application.datasource#">
		select *, AP.cDescription as RoomType
		from tenant T WITH (NOLOCK)	
		join TenantState ts WITH (NOLOCK) on t.iTenant_ID = ts.iTenant_ID
		left join AptAddress AD WITH (NOLOCK) on AD.iAptAddress_ID = ts.iAptAddress_ID
		left join AptType AP WITH (NOLOCK) on AP.iAptType_ID = AD.iAptType_ID		
		where t.iTenant_ID = #form.iTenant_ID#
    </cfquery>
    <!--- Get Invoice Master Info For Record Being Generated By Activate without billing --->
    <cfquery name="GetInvoiceMasterInfo" datasource="#application.datasource#">
		Select 	iInvoiceMaster_ID
		From InvoiceMaster WITH (NOLOCK)
		Where cSolomonKey ='#Tenant.csolomonkey#'
    </cfquery>
    <cfif GetInvoiceMasterInfo.RecordCount neq 0>
      <cfquery name="deleteInvoicemasterRecord" datasource="#application.datasource#">
		  update Invoicemaster set 
		  dtrowdeleted=getdate() 
		  ,irowdeleteduser_id = #session.UserId# 
		  where csolomonkey ='#Tenant.csolomonkey#'
      </cfquery>
    </cfif>
	<cfquery name="GetDescriptions" datasource="#application.datasource#">
	  SELECT P.cDescription AS ProductLine
		  ,R.cDescription AS ResidencyType
		  ,A.cDescription AS AptType
	  FROM
		  ProductLine P
		  ,ResidencyType R
		  ,AptType A
	  WHERE	P.iProductLine_ID = #TenantInfo.iProductLine_ID# 
		AND	R.iResidencyType_ID = #TenantInfo.iResidencyType_ID# 
		AND A.iAptType_ID = #TenantInfo.iAptType_id#
	</cfquery>	
    <!--- ==============================================================================
Check for Existing MoveIn Invoice for this cSolomonKey that is open
or the last closed invoice

Check for monthly invoice not for this resident
=============================================================================== --->
    <cfquery name="InvoiceCheck" datasource="#application.datasource#">
		select Max(dtMoveIn) as MaxMoveIn ,IM.iInvoiceMaster_ID ,IM.mInvoiceTotal ,IM.mLastInvoiceTotal 
		,IM.dtInvoiceEnd ,IM.dtInvoiceStart ,IM.bFinalized ,INV.iTenant_ID
		from InvoiceMaster IM WITH (NOLOCK)
		join InvoiceDetail INV WITH (NOLOCK) on (IM.iInvoiceMaster_ID = INV.iInvoiceMaster_ID and INV.dtRowDeleted is null)
		join TenantState ts WITH (NOLOCK) on (TS.iTenant_ID = INV.iTenant_ID and ts.dtRowDeleted is null)
		where IM.dtRowDeleted is null and ts.iTenantStateCode_ID = 2 
		and cSolomonKey = '#TenantInfo.cSolomonKey#'
		and (bFinalized is not null or (INV.iTenant_ID <> #TenantInfo.iTenant_ID# and bMoveInInvoice is not null))
		GROUP BY IM.iInvoiceMaster_ID ,IM.mInvoiceTotal ,IM.mLastInvoiceTotal ,IM.dtInvoiceEnd 
		,IM.dtInvoiceStart ,IM.bFinalized ,INV.iTenant_ID
    </cfquery>
    <!---
Check for MI for this specific tenant 
OR an invoice with no details for the accounting key
--->
    <cfquery name="MoveInInvoiceCheck" datasource="#application.datasource#">
		select distinct IM.* from InvoiceMaster IM WITH (NOLOCK)
		where im.dtrowdeleted is null and im.csolomonkey='#tenant.csolomonkey#'
		and (1=(select count(distinct itenant_id) from invoicedetail where dtrowdeleted is null 
		and iinvoicemaster_id = im.iinvoicemaster_id)
		or (0 = (select count(iinvoicedetail_id) from invoicedetail where dtrowdeleted is null
		and iinvoicemaster_id = im.iinvoicemaster_id ) ) )
    </cfquery>
    <cfif MoveInInvoiceCheck.RecordCount EQ 0>
      <!--- 
		Check InvoiceMaster for Existing MoveIn Invoice for this cSolomonKey that is not finalized 
		and does not have another residents details
	--->
      <cfquery name="MoveInInvoiceCheck" datasource="#application.datasource#">
		  select * from InvoiceMaster im WITH (NOLOCK) where dtRowDeleted is null 
		  and bMoveInInvoice is not null and bFinalized is null and cSolomonKey = '#Tenant.cSolomonKey#'
		  and 0 = (select count(iinvoicedetail_id) from invoicedetail where dtrowdeleted is null 
		  and iinvoicemaster_id = im.iinvoicemaster_id and itenant_id <> #tenant.itenant_id#)
      </cfquery>
    </cfif>
    
 <!--- ==============================================================================
If there no available invoice open invoice and there is not open Move in Invoice
for this tenantID. We get the next number from house number control and update the invoice master table
=============================================================================== --->
    <cfif InvoiceCheck.RecordCount EQ 0 or MoveInInvoiceCheck.RecordCount EQ 0 
		OR (InvoiceCheck.bFinalized GT 0 and InvoiceCheck.iTenant_ID neq TenantInfo.iTenant_ID)>
		  <!--- Retrieve Next invoice number from the control table --->
		  <cfquery name="getNextInvoice" datasource="#application.datasource#">
			select iNextInvoice from HouseNumberControl WITH (NOLOCK) where iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		  </cfquery>
		<cfscript>
			HouseNumber = session.HouseNumber; 
			iInvoiceNumber = '#variables.HouseNumber#'&'#getNextInvoice.iNextInvoice#';
		</cfscript>
		  <!--- get the solomon balance --->
		  <cfquery name="qSolbalance" datasource="#application.datasource#">
		  <cfif session.qSelectedHouse.iHouse_ID EQ 200>
			select -200.00 as bal
			<cfelse>
			select SUM(amount) as BAL from rw.vw_get_Trx WITH (NOLOCK) where CUSTID = '#Tenant.cSolomonKey#' and RLSED = 1 and USER7 <= getdate()
		  </cfif>
		  </cfquery>
		  <cfif qSolBalance.bal GT 0>
			<cfmail type="HTML" from="TIPS4-Message@alcco.com" TO="CFDevelopers@alcco.com"
		   SUBJECT="New Move Insert with PAST SOLOMON BALANCE">
			  A new move-in insert with existing solomon balance #session.HouseName# by #session.FullName#.<br/>
			  SolomonKey: #Tenant.cSolomonKey#<br/>
			</cfmail>
		  </cfif>
		  <!--- Create new invoice --->
		  <cfscript>
			//Since we don't want the move in to be a future post and Tbe accounting system is always 1 month behind.
			SubtractAppliesTo = DateAdd("m", -1, session.TIPSMonth);
			cAppliesToAcctPeriod = YEAR(SubtractAppliesTo) & DateFormat(SubtractAppliesTo,"mm");
		</cfscript>
		  <!--- 25575 - rts - respite type invoice creation --->
		  <cfif TenantInfo.iResidencyType_ID neq 3>
				<cfquery name="NewInvoice" datasource="#application.datasource#">
				insert into InvoiceMaster
				( iInvoiceNumber ,cSolomonKey ,bMoveInInvoice ,bFinalized ,cAppliesToAcctPeriod ,cComments ,dtAcctStamp ,dtInvoiceStart 
				,mInvoiceTotal ,mLastInvoiceTotal ,iRowStartUser_ID ,dtRowStart, crowstartuser_id
				)values(
				'#variables.iInvoiceNumber#' 
				,'#Tenant.cSolomonKey#' 
				,1 
				,NULL 
				,'#cAppliesToAcctPeriod#' 
				,NULL 
				,#CreateODBCDateTime(session.AcctStamp)#
				<cfif InvoiceCheck.RecordCount GT 0>
				  ,'#InvoiceCheck.dtInvoiceEnd#'
				  <cfelse>
				  ,getdate()
				</cfif>
				<!--- dtInvoiceStart --->
				,0.00
				<!--- mInvoiceTotal --->
				<cfif InvoiceCheck.RecordCount GT 0>
				  <cfif InvoiceCheck.mInvoiceTotal neq "">
					,#InvoiceCheck.mInvoiceTotal#
					<cfelse>
					0.00
				  </cfif>
				  <cfelse>
				  <cfif qSolBalance.bal neq "">
					,#qSolBalance.bal#
					<cfelse>
					,0.00
				  </cfif>
				</cfif>
				<!--- mLastInvoiceTotal --->
				,#session.UserID# ,getDate()
				,'sys_miinsert'
				)
				</cfquery>
			<cfelse>
			<!--- Tenant is Respite --->
			<!---QUERIES  --->
				<cfquery name="TenantDates" datasource="#application.datasource#">
					select dateadd(dd,1,'#TenantInfo.dtMoveOutProjectedDate#') as NewPMODate
					,convert(varchar(10),(dateadd(dd,1,'#InvoiceCheck.dtInvoiceEnd#')),101) as NextStartDate
					</cfquery>
					<cfquery name="AdjustEndPMODatemin" datasource="#application.datasource#">
					select dateadd(ss,-1,'#TenantDates.NewPMODate#') as PMODate
					</cfquery>
					<cfset PMODate = AdjustEndPMODatemin.PMODate>
					<cfquery name="GetQuantityForNewINV" datasource="#application.datasource#">
					select datediff(dd,'#TenantInfo.dtRentEffective#', '#PMODate#') + 1 as Days
				</cfquery>
					<cfquery name="GetQuantityForNewINVCare" datasource="#application.datasource#">
					select datediff(dd,'#TenantInfo.dtMoveIn#', '#PMODate#') + 1 as CareDays
				</cfquery>
				<!--- set to last second of PMO in two setps--->
				<cfset PMODate  =dateadd('d',1,TenantInfo.dtMoveOutProjectedDate)>
				<cfset PMODate  =dateadd('s',-1,PMODate)>
				<cfset PMODate = dateformat(PMODate,"YYYY-MM-DD")>
				<!---INSERT --->
				<cfquery name="NewInvoice" datasource="#application.datasource#">
					insert into InvoiceMaster
					( iInvoiceNumber ,cSolomonKey ,bMoveInInvoice ,bFinalized ,cAppliesToAcctPeriod ,cComments ,dtAcctStamp 
					,dtInvoiceStart ,dtInvoiceEnd ,mInvoiceTotal ,mLastInvoiceTotal ,iRowStartUser_ID ,dtRowStart, crowstartuser_id
					)values(
					'#variables.iInvoiceNumber#' 
					,'#Tenant.cSolomonKey#' 
					,1
					,NULL 
					,'#cAppliesToAcctPeriod#' 
					,NULL 
					,#CreateODBCDateTime(session.AcctStamp)# ,'#TenantInfo.dtRentEffective#'
					<!--- dtInvoiceStart --->
					,'#PMODate#'
					<!--- dtInvoiceEnd --->
					,0.00
					<!--- mInvoiceTotal --->
					,0.00
					<!--- mLastInvoiceTotal --->
					,#session.UserID# ,getDate()
					,'sys_miinsert'
					)
			</cfquery>
		  </cfif> <!--- TenantInfo.iResidencyType_ID neq 3 --->
		  <!--- Calcluate next invoice number --->
		  <cfset iNewNextInvoice = getNextInvoice.iNextInvoice + 1>
		  <!--- Write next invoice to control table --->
		  <cfquery name= "HouseNumberControl" datasource="#application.datasource#">
			  update HouseNumberControl 
			  set iNextInvoice = #variables.iNewNextInvoice# where dtRowDeleted is null and iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		  </cfquery>
		  <!--- Retrieve the new created iInvoicemaster_ID --->
		  <cfquery name="NewMasterID" datasource="#application.datasource#">
			  select max(iInvoiceMaster_ID) as iInvoiceMaster_ID
			  from InvoiceMaster WITH (NOLOCK) where dtRowDeleted is null 
			  and bMoveInInvoice is not null 
			  and bFinalized is null 
			  and cSolomonKey = '#Tenant.cSolomonKey#' and iInvoiceNumber = '#variables.iInvoiceNumber#'
		  </cfquery>
		  <!--- Set variable for the new iInvoiceMaster_ID --->
		  <cfset iInvoiceMaster_ID = NewMasterID.iInvoiceMaster_ID>
      <cfelse>
      <!--- 25575 - 6/11/2010 - rts - Respite Project --->
      <cfquery name="TenantDates" datasource="#application.datasource#">
		  select dateadd(dd,1,'#TenantInfo.dtMoveOutProjectedDate#') as NewPMODate
		  ,convert(varchar(10),(dateadd(dd,0,'#TenantInfo.dtRentEffective#')),101) as NextStartDate
      </cfquery>
      <cfquery name="AdjustEndPMODatemin" datasource="dbquery">
		  select dateadd(ss,-1,'#TenantDates.NewPMODate#') as PMODate
      </cfquery>
      <cfset PMODate = AdjustEndPMODatemin.PMODate>
      <cfquery name="GetQuantityForNewINV" datasource="#application.datasource#">
		  select datediff(dd,'#TenantInfo.dtRentEffective#', '#PMODate#') + 1 as Days
      </cfquery>
      <cfquery name="GetQuantityForNewINVCare" datasource="#application.datasource#">
		  select datediff(dd,'#TenantInfo.dtMoveIn#', '#PMODate#') + 1 as CareDays
      </cfquery>
      <!--- end 25575 --->
      <cfscript>
		//Set varailbe for the new iInvoiceMaster_ID And the InvoiceNumber
		iInvoiceMaster_ID = InvoiceCheck.iInvoiceMaster_ID; 
		iInvoiceNumber = '#InvoiceCheck.iInvoiceNumber#';
	</cfscript>
    </cfif>
    <cfif variables.iInvoiceMaster_ID EQ "">
      <cfmail type="HTML" 
	from="TIPS4-Message@alcco.com" 
	TO="CFDevelopers@alcco.com" 
	SUBJECT="MoveInInsert InvoiceMaster Variable null">
        #Tenant.iTenant_ID#<br/>
        #Tenant.cSolomonKey#<br/>
        #session.FULLNAME#<br/>
      </cfmail>
    </cfif>
    <cfquery name='qHistSet' datasource="#application.datasource#">
		select distinct tendtRowStart, cSLevelTypeSet, tendtRowEnd, tendtRowDeleted
		from rw.vw_tenant_history_with_state WITH (NOLOCK)
		where iTenant_ID = #TenantInfo.iTenant_ID# and '#TenantInfo.dtMoveIn#' between tenDtRowStart and tendtRowEnd
		order by tenDtRowStart desc
    </cfquery>
    <!--- Calculate ServiceLevel --->
    <cfquery name="SLevel" datasource="#application.datasource#">
		select * 
		from SLevelType WITH (NOLOCK)
		where dtRowDeleted is null
		and iSPointsMin <= #form.iSPoints# and iSPointsMax >= #form.iSPoints#
		<cfif (IsDefined("Tenant.cSLevelTypeSet") and ( Tenant.cSLevelTypeSet neq "") 
				and (Tenant.cSLevelTypeSet neq 0))>
		  and (cSLevelTypeSet = #Tenant.cSLevelTypeSet#)
		  <cfelseif ((qHistSet.RecordCount GT 0) and (qHistSet.cSLevelTypeSet neq ''))>
		  and (cSLevelTypeSet = #qHistSet.cSLevelTypeSet#)
		  <cfelse>
		  and (cSLevelTypeSet = #session.cSLevelTypeSet#)
		</cfif>
    </cfquery>
 <!---    <cfdump var="#SLevel#" label="SLevel"> --->
    <cfif SLevel.RecordCount EQ 0>
		  <B style="font-size: 20;"> A Service level can not be found for this specified points and Service Level Set.<br/>
		  Please, verify the service level and the correct set in the move in form.<br/>
		  If you need help in determining the correct service level set please contact your Accounts Recievable Specialist.<br/>
		  </B> <a href="../Registration/Registration.cfm">Click Here To Continue.</a>
		  <!---   <cfelse>
		<cfdump var="#SLevel#" label="SLevel">  --->
    </cfif>
    <cfquery name="FindOccupancy" datasource="#application.datasource#">
		select t.iTenant_ID, iResidencyType_ID, st.cDescription as Level, ts.dtMoveIn, ts.dtMoveOut
		from AptAddress AD WITH (NOLOCK)
		join TenantState ts WITH (NOLOCK) on (TS.iAptAddress_ID = AD.iAptAddress_ID and ts.dtRowDeleted is null)
		join Tenant T WITH (NOLOCK)	 on (t.iTenant_ID = ts.iTenant_ID and t.dtRowDeleted is null)
		join SLevelType ST WITH (NOLOCK) on (st.cSLevelTypeSet = t.cSLevelTypeSet 
		and ts.iSPoints between st.iSPointsMin and st.iSPointsMax)		
		where AD.dtRowDeleted is null and ts.iTenantStateCode_ID = 2
		and AD.iAptAddress_ID = #form.iAptAddress_ID# and ts.iTenant_ID <> #Tenant.iTenant_ID#
    </cfquery>
    <cfscript>	
		if (FindOccupancy.RecordCount GT 0){ Occupancy = 2;} else {Occupancy = 1;} 
	</cfscript>
    <cfquery name="CheckCompanionFlag" datasource="#application.datasource#">
		select bIsCompanionSuite from AptAddress AD WITH (NOLOCK)
		join AptType AT WITH (NOLOCK) on (AD.iAptType_ID = AT.iAptType_ID and AT.dtRowDeleted is null)
		where AD.dtRowDeleted is null and AD.iAptAddress_ID = #form.iAptAddress_ID#
    </cfquery>
    <cfif CheckCompanionFlag.bIsCompanionSuite EQ 1>
      <cfset Occupancy = 1>
    </cfif>
    <!--- Delete ALL System Generated Invoice Details. (signified by user 0) --->
    <cfquery name= "DeleteSystemDetails" datasource="#application.datasource#">
		update InvoiceDetail 
		set iRowDeletedUser_ID=0 ,dtRowDeleted = getdate()
		where iTenant_ID = #form.iTenant_ID# and iRowStartUser_ID = 0 
		and iInvoiceMaster_ID = #iInvoiceMaster_ID#
    </cfquery>
	<cfquery name="qrycompanionchk" datasource="#application.datasource#">   
	  Select apt.cdescription, apt.iAptType_id , AD.cAptNumber
	  from aptaddress AD WITH (NOLOCK)
	  join AptType APT WITH (NOLOCK) on AD.iAptType_ID = APT.iAptType_ID 
	  where iaptaddress_ID = #trim(form.iAptAddress_ID)#	
	</cfquery>
    <cfquery  name="GetMIAutoApplyCharges" datasource="#APPLICATION.datasource#">
		select c.*,isnull(ct.bIsDaily,'0') as bIsDaily 
		from Charges c WITH (NOLOCK)
		join ChargeType ct WITH (NOLOCK) on (ct.iChargeType_ID = c.iChargeType_ID)
		where c.iHouse_ID = #session.qSelectedHouse.iHouse_ID# and c.cChargeSet = 
		(select cs.cName 
		from Chargeset cs WITH (NOLOCK)
		join House h WITH (NOLOCK) on (h.iChargeSet_ID = cs.iChargeSet_ID 
		and h.iHouse_ID = #session.qSelectedHouse.iHouse_ID#))
		and c.dtRowDeleted is null
		and getdate() between c.dteffectivestart and c.dteffectiveend
		<cfif (IsDefined("FeeType") and (FeeType is not ''))>
		  <cfif FeeType is 'SC'>
			and c.ichargetype_id = 53
			<cfelseif FeeType is 'CF'>
			and c.ichargetype_id = 69
		  </cfif>
		</cfif>
		<cfif TenantInfo.iresidencytype_id is 2>
		  and c.iChargeType_ID not in (53,69,91,89,7,96,14)
		  <cfelse>
		  and c.iChargeType_ID not in (91,89,7,96)
		</cfif>
		and c.bIsMoveInCharge = 1
    </cfquery>
    <!--- Do not Charge Standard Rent for Medicaid. TO be done by Acct. Rec. --->
    <!--- 25575 - 6/10/2010 - rts - also exclude respites --->
    <cfif TenantInfo.iResidencyType_ID neq 3 and TenantInfo.iResidencyType_ID neq 2  ><!--- G --->
      <cfloop from="1" TO="#ArrayLen(MonthList)#" step="1" index="I"><!--- F --->
        <!--- <br /> MonthList:: #MonthList[i]# <br /> --->
        <!--- MLAW 08/17/2006 Add iProductline_ID filter --->
        <cfquery name="StandardRent" datasource="#application.datasource#">
			<cfif Occupancy EQ 1>
				select c.cDescription ,C.mAmount ,C.iQuantity ,CT.iChargeType_ID
				from Charges C WITH (NOLOCK)
				join ChargeType ct WITH (NOLOCK) on (CT.iChargeType_ID = c.iChargeType_ID 
				and ct.dtRowDeleted is null)
				where c.dtRowDeleted is null
				<cfif getHouseChargeset.CName neq "">
				and c.cChargeSet = '#getHouseChargeset.CName#'
				<cfelse>
				and c.cChargeSet is null
				</cfif>
				and ct.bIsRent is not null
				and ct.bIsDiscount is null 
				and ct.bIsRentAdjustment is null
				<cfif tenantinfo.iresidencytype_id is 1>
				and ct.bAptType_ID is not null 
				and ct.bIsMedicaid is null
				and c.iOccupancyPosition = 1
				and c.iAptType_ID = #TenantInfo.iAptType_ID#
				</cfif>
				<cfif #TenantInfo.CBillingtype# eq 'D'>
				<!---Mshah added here winthrop--->
				and ct.bIsDaily is not null
				<cfelse>
				and  ct.bIsDaily is null
				</cfif>
				and ct.bSLevelType_ID is null
				and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID# 
				and dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]# and c.iProductLine_ID = #TenantInfo.iProductLine_ID# 
				order by c.dtRowStart Desc
			<cfelse>
				select c.cDescription ,C.mAmount ,C.iQuantity ,CT.iChargeType_ID
				from Charges C
				join ChargeType ct on (CT.iChargeType_ID = c.iChargeType_ID 
				and ct.dtRowDeleted is null)
				where c.dtRowDeleted is null
				<cfif getHouseChargeset.CName neq "">
				and c.cChargeSet = '#getHouseChargeset.CName#'
				<cfelse>
				and c.cChargeSet is null
				</cfif>
				<cfif tenantinfo.iresidencytype_id is 1>
				and ct.bIsMedicaid is null
				</cfif>
				and ct.bIsRent is not null
				and ct.bIsDiscount is null 
				and ct.bIsRentAdjustment is null
				and ct.bAptType_ID is not null
				<!--- and ct.bIsDaily =1  --->
				<cfif #TenantInfo.CBillingtype# eq 'D'>
				<!---Mshah added here winthrop--->
				and ct.bIsDaily is not null
				<cfelse>
				and  ct.bIsDaily is null
				</cfif>
				and ct.bSLevelType_ID is null
				and c.iAptType_ID is null
				and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# and c.iOccupancyPosition = 2
				and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID# and dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]# and
				c.iProductLine_ID = #TenantInfo.iProductLine_ID# order by c.dtRowStart Desc
			</cfif>
        </cfquery>
        <!--- 		<cfdump var="#StandardRent#" label="StandardRent"> --->
        <cfif StandardRent.RecordCount EQ '0'>
          <cfquery name= "StandardRent" datasource="#application.datasource#">
          select c.iChargeType_ID, c.iQuantity, c.cDescription, c.mAmount
          from Charges	C WITH (NOLOCK)
          join ResidencyTYPE RT WITH (NOLOCK) on c.iResidencyType_ID = RT.iResidencyType_ID
          join ChargeType ct WITH (NOLOCK) on ct.iChargeType_ID = c.iChargeType_ID
          where c.dtRowDeleted is null and ct.dtRowDeleted is null
          and IsNull(C.iOccupancyPosition,1) = #Occupancy#
          <cfif getHouseChargeset.CName neq "">
            and c.cChargeSet = '#getHouseChargeset.CName#'
           <cfelse>
            and c.cChargeSet is null
          </cfif>
          <cfif TenantInfo.iResidencyType_ID neq 3>
            <cfif Occupancy neq 2>
              and c.iAptType_ID = #TenantInfo.iAptType_ID#
            <cfelse>
              and c.iAptType_ID is null
            </cfif>
            <!--- and ct.bIsDaily is null --->
            <cfif #TenantInfo.CBillingtype# eq 'D'>
              <!---Mshah added here winthrop--->
              and ct.bIsDaily is not null
             <cfelse>
              and  ct.bIsDaily is null
            </cfif>
          </cfif>
          and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# 
		  and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID# 
		  and ((iCharge_id = (select iCharge_id from rw.vw_Charges_history 
          		where ihouse_id = #session.qSelectedHouse.iHouse_ID# and #MonthList[i]# between dtrowstart and isNull(dtrowend,getdate())
          and iChargeType_ID = c.iChargeType_ID and iAptType_ID = c.iAptType_ID
          <!--- and cSLevelDescription = c.cSLevelDescription --->
          <!--- and iSLevelType_ID = #SLevel.iSLevelType_ID# --->
          )
          ) 
          or  (dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]#) ) 
          and c.iProductLine_ID = #TenantInfo.iProductLine_ID# order by c.dtRowStart Desc
          </cfquery>
        </cfif>
        <!--- MLAW 08/17/2006 Add iProductline_ID filter --->
       <!--- 		 			Occupancy - #Occupancy# :: iAptType_id - #TenantInfo.iAptType_id# 
			::iResidencyType_ID - #TenantInfo.iResidencyType_ID#
			::iAptType_ID -  #TenantInfo.iAptType_ID# 
			::MonthList -  #MonthList[i]# ::cChargeSet -  #TenantInfo.cChargeSet# ::#getHouseChargeset.CName#
			::iProductLine_ID -  #TenantInfo.iProductLine_ID#<br>
		  <cfabort> ---> 
	<cfquery name="DailyRent" datasource="#application.datasource#">
		<cfif Occupancy EQ 1>
			select c.cDescription ,C.mAmount ,C.iQuantity ,CT.iChargeType_ID
			  from Charges C WITH (NOLOCK)
			  join ChargeType ct WITH (NOLOCK) on (CT.iChargeType_ID = c.iChargeType_ID 
			  and ct.dtRowDeleted is null)
			  where c.dtRowDeleted is null
			  and ct.bIsRent is not null
			  and ct.bIsDiscount is null 
			  and ct.bIsRentAdjustment is null
			  <cfif TenantInfo.iResidencyType_ID eq 3>
				and (c.iAptType_ID is null or c.iAptType_ID = #TenantInfo.iAptType_id#)
				<cfif Occupancy eq 1>
				  and ct.bIsDaily is not null and ct.bSLevelType_ID is null
				  <cfelse>
				  and c.iAptType_ID is null
				</cfif>
				<cfelseif TenantInfo.iResidencyType_ID eq 1>
				<cfif Occupancy eq 1>
				  and c.iOccupancyPosition = 1 
				  and c.iAptType_ID = #TenantInfo.iAptType_ID#
				  <cfelse>
				  and c.iOccupancyPosition = 2
				</cfif>
				<cfif #TenantInfo.CBillingtype# eq 'D'>
				  <!---Mshah added here winthrop--->
				  and ct.bIsDaily is not null
				  <cfelse>
				  and  ct.bIsDaily is null
				</cfif>
				and ct.bIsMedicaid is null
				<!--- 				<cfelseif TenantInfo.iResidencyType_ID eq 2>
						and c.iQuantity > 0 --->
			  </cfif>
			  and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID# 
			  and dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]#
			  <cfif getHouseChargeset.CName neq '' and TenantInfo.iResidencyType_ID neq 3>
				and c.cChargeSet = '#getHouseChargeset.CName#'
				<cfelse>
				and c.cChargeSet is null
			  </cfif>
			  and c.iProductLine_ID = #TenantInfo.iProductLine_ID# 
			  order by c.dtRowStart Desc
          <cfelse>
			  select c.cDescription ,C.mAmount ,C.iQuantity ,CT.iChargeType_ID
			  from Charges C WITH (NOLOCK)
			  join ChargeType ct WITH (NOLOCK) on (CT.iChargeType_ID = c.iChargeType_ID 
			  and ct.dtRowDeleted is null)
			  where c.dtRowDeleted is null
			  and ct.bIsRent is not null
			  and ct.bIsDiscount is null 
			  and ct.bIsRentAdjustment is null
			  <cfif TenantInfo.iResidencyType_ID eq 3>
				and (c.iAptType_ID is null or c.iAptType_ID = #TenantInfo.iAptType_id#)
				<cfif Occupancy eq 1>
				  and ct.bIsDaily is not null and ct.bSLevelType_ID is null
				  <cfelse>
				  and c.iAptType_ID is null
				</cfif>
				<cfelseif TenantInfo.iResidencyType_ID eq 1>
				<cfif Occupancy eq 1>
				  and c.iOccupancyPosition = 1 
				  and c.iAptType_ID = #TenantInfo.iAptType_ID#
				  <cfelse>
				  and c.iOccupancyPosition = 2
				</cfif>
				and ct.bIsMedicaid is null
				<cfelseif TenantInfo.iResidencyType_ID eq 2>
				and c.iQuantity > 0
				<cfelseif TenantInfo.iResidencyType_ID eq 5>
				and ct.bIsDaily is  not null
			  </cfif>
			  and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# and c.iOccupancyPosition = 2
			  and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID# and dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]#
			  <cfif getHouseChargeset.CName neq '' >
				<!--- or TenantInfo.iResidencyType_ID neq 3> --->
				and c.cChargeSet = '#getHouseChargeset.CName#'
				<!--- <cfelse>and c.cChargeSet is null --->
			  </cfif>
			  and c.iProductLine_ID = #TenantInfo.iProductLine_ID#
			   order by c.dtRowStart Desc
		</cfif>
	</cfquery>
	<!--- 		 
	
	
	--->
        <cfif DailyRent.RecordCount EQ 0>
          <!--- MLAW 08/17/2006 Add iProductline_ID filter --->
          <!--- RTS 1/25/10 49542 :placed apttype outside of respite check --->
          <cfquery name="DailyRent" datasource="#application.datasource#">
          		<cfif Occupancy EQ 1>
					select c.iChargeType_ID, c.iQuantity, c.cDescription, c.mAmount
					from Charges	C WITH (NOLOCK)
					join ResidencyTYPE RT WITH (NOLOCK) on c.iResidencyType_ID = RT.iResidencyType_ID
					<!--- left outer join SLevelType ST on c.iSLevelType_ID = st.iSLevelType_ID --->
					join ChargeType ct WITH (NOLOCK) on ct.iChargeType_ID = c.iChargeType_ID
					where c.dtRowDeleted is null
					and ct.dtRowDeleted is null
					<cfif getHouseChargeset.CName neq "">
					  and c.cChargeSet = '#getHouseChargeset.CName#'
					  <cfelse>
					  and c.cChargeSet is null
					</cfif>
					<!--- 				<cfif TenantInfo.iResidencyType_ID neq 3>
								and c.iSLevelType_ID = #SLevel.iSLevelType_ID#
							</cfif> --->
					and c.iAptType_ID = #TenantInfo.iAptType_ID# and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# 
					and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID# and ct.bIsDaily is not null
					and dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]# 
					and c.iProductLine_ID = #TenantInfo.iProductLine_ID# 
					order by c.dtRowstart desc
				<cfelse>
				select * from Charges C WITH (NOLOCK)
				join ChargeType ct WITH (NOLOCK) on c.iChargeType_ID = ct.iChargeType_ID
				where c.dtRowDeleted is null
				<cfif getHouseChargeset.CName neq "">
				  and c.cChargeSet = '#getHouseChargeset.CName#'
				  <cfelse>
				  and c.cChargeSet is null
				</cfif>
				and ct.dtRowDeleted is null 
				and ct.bIsDaily is not null 
				and iOccupancyPosition = 2
				and iHouse_ID = #session.qSelectedHouse.iHouse_ID# and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# 
				and iSLevelType_ID = #SLevel.iSLevelType_ID# and dtEffectiveStart <= #MonthList[i]# 
				and dtEffectiveEnd >= #MonthList[i]# 
				and c.iProductLine_ID = #TenantInfo.iProductLine_ID# 
				order by c.dtRowstart desc
			</cfif>
		</cfquery>
	</cfif>

        <cfif DailyRent.RecordCount EQ 0 and StandardRent.RecordCount EQ 0>
          <!--- 			<center>
			<strong style='color:red;font-size:20;'> Unable to find a daily rate for this resident.
			<br/>
			Please verify that there is valid rate entered for this type of aparment, this residency type, and this occupancy position.
			<br/>
			<a href='../Registration/Registration.cfm'>Click here to continue.</a> 
			</strong>
			</center> --->

          <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <cfif IsSecondOccupant is 'yes'>
            <cfset Is2ndOccupant = "Second Occupant">
            <cfelse>
            <cfset Is2ndOccupant = "Single Occupant">
          </cfif>
          <CFSCRIPT>
				Msg1 = "There is no BSF rate set up for this Residency/Room.<BR>";
				Msg1 = Msg1 & "Residency: #GetDescriptions.ResidencyType#<br>";
				Msg1 = Msg1 & "Apartment Type: #GetDescriptions.AptType#<BR>";
				Msg1 = Msg1 & "Occupancy: #Is2ndOccupant#<br>";
				Msg1 = Msg1 & "Product Line: #GetDescriptions.ProductLine#";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">
 
        </cfif>
        <cfquery name='qResidentCare' datasource="#application.datasource#">
			select c.cDescription ,C.mAmount ,C.iQuantity ,CT.iChargeType_ID
			from Charges C WITH (NOLOCK)
			join ChargeType ct WITH (NOLOCK) on (CT.iChargeType_ID = c.iChargeType_ID and ct.dtRowDeleted is null)
			and ct.bIsRent is not null and ct.bIsMedicaid is null and ct.bIsDiscount is null
			and ct.bIsRentAdjustment is null
			where c.dtRowDeleted is null and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
			<cfif getHouseChargeset.CName neq ''>
			  and c.cChargeSet = '#getHouseChargeset.CName#'
			  <cfelse>
			  and c.cChargeSet is null
			</cfif>
			and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# and c.iAptType_ID is null
			and iSLevelType_ID = #SLevel.iSLevelType_ID# and ct.bIsDaily is null
			and iOccupancyPosition is null
			and dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]#
        </cfquery>
      
        <cfquery name='qDailyCare' datasource="#application.datasource#">
			select c.cDescription ,C.mAmount ,C.iQuantity ,CT.iChargeType_ID
			from Charges C WITH (NOLOCK)
			join ChargeType ct WITH (NOLOCK) on (CT.iChargeType_ID = c.iChargeType_ID and ct.dtRowDeleted is null)
			and ct.bIsRent is not null and ct.bIsMedicaid is null and ct.bIsDiscount is null
			and ct.bIsRentAdjustment is null
			where c.dtRowDeleted is null and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
			<cfif getHouseChargeset.CName neq ''>
			  and c.cChargeSet = '#getHouseChargeset.CName#'
			  <cfelse>
			  and c.cChargeSet is null
			</cfif>
			and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# and c.iAptType_ID is null
			and iSLevelType_ID = #SLevel.iSLevelType_ID# and ct.bIsDaily is not null
			and iOccupancyPosition is null
			and dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]#
        </cfquery>
  <!---  <Cfdump var="#qDailyCare#" label="qDailyCare">    <cfabort> --->
        <!---   I #I# Carelimit #Carelimit#  --->
        <cfscript>
					DaysInHouse = (DaysInMonth(TenantInfo.dtMoveIn) - Day(TenantInfo.dtMoveIn)) + 1;
					
					if ((variables.DaysInHouse GTE 30 or (Month(TenantInfo.dtMoveIn) EQ 2
					and variables.DaysInHouse EQ DaysInMonth(TenantInfo.dtMoveIn))) 
					and TenantInfo.iResidencyType_ID neq 3)
					{ FullMonth=1; DaysInHouse = 30; }
					else { FullMonth=0; }
					
					//if (REMOTE_ADDR EQ '10.1.0.201') { WriteOutPut('#DaysInHouse# - Calc <br/> #DaysInMonth(TenantInfo.dtMoveIn)# - In Month <br/> #Day(TenantInfo.dtMoveIn)# - Day <br/> #DaysInHouse# After Logic<br/>'); }	
		</cfscript>
        <cfscript> 
					switch (billing){
					case 'daily': 
					ConvertedDays=ChargeDays[i];
					ConvertedDescription=DailyRent.cDescription;
					ConvertedChargeType=DailyRent.iChargeType_ID;
					ConvertedAmount=DailyRent.mAmount;
					if (I LTE Carelimit)
					{ConvertedCareDays=CareChargeDays[i];	}
					else	{ConvertedCareDays=0;}
					
					ConvertedCareAmount=qDailyCare.mAmount;
					ConvertedCareChargeType=qDailyCare.iChargeType_ID;
					ConvertedCareDescription=qDailyCare.cDescription;
					iDaysbilled=DaysInMonth(MonthList[i]) - Day(TenantInfo.dtMoveIn) +1;
					break;
					case 'monthly': 
					if ( TenantInfo.iResidencyType_ID neq 3 
					and (DaysInMonth(MonthList[i]) - Day(TenantInfo.dtMoveIn) +1 GTE 30
					and ChargeDays[i] GTE 30) ) { 
					ProrateDays=0; } else{ ProrateDays=1; }	
					if(ProrateDays EQ 0){
					ConvertedDays=1;
					ConvertedDescription=StandardRent.cDescription;
					ConvertedAmount=StandardRent.mAmount;
					ConvertedChargeType=StandardRent.iChargeType_ID;
					ConvertedCareAmount=qResidentCare.mAmount;
					ConvertedCareChargeType=qResidentCare.iChargeType_ID;
					ConvertedCareDescription=qResidentCare.cDescription;
					iDaysbilled=DaysInMonth(MonthList[i]) - Day(TenantInfo.dtMoveIn) +1;
					} 
					else{
					ConvertedDays=1;
					ConvertedDescription=StandardRent.cDescription;
					 
					 ConvertedChargeType=StandardRent.iChargeType_ID; 
					ConvertedAmount=(StandardRent.mAmount * (ChargeDays[i]) / DaysInMonth(MonthList[i]));
					ConvertedCareDays=1;
					iDaysbilled=DaysInMonth(MonthList[i]) - Day(TenantInfo.dtMoveIn) +1;
					if (qResidentCare.mAmount eq '')
						ConvertedCareAmount= 0;
					else
					ConvertedCareAmount=((qResidentCare.mAmount/ DaysInMonth(MonthList[i]) )
						* (DaysInMonth(MonthList[i]) - Day(TenantInfo.dtMoveIn) +1));
					ConvertedCareChargeType=qResidentCare.iChargeType_ID;
					ConvertedCareDescription=qResidentCare.cDescription;
					}
					break;
					default: ConvertedDays='';
					ConvertedDescription=''; 
					ConvertedChargeType='';
					ConvertedAmount=''; 
					ConvertedCareAmount='';
					ConvertedCareChargeType=''; 
					ConvertedCareDescription=''; ;
					}
				</cfscript>
				
        <!---  test convertedcareamountprint#ConvertedCareAmount# ProrateDays #ProrateDays# DaysInMonth(MonthList[i]) 
				#DaysInMonth(MonthList[i])# Day(TenantInfo.dtMoveIn) #Day(TenantInfo.dtMoveIn)# ConvertedCareChargeType #ConvertedCareChargeType#end --->
        <!--- This check added per T.Bates 03/28/2017 --->
        <cfif ConvertedAmount   less than 10.00>
          <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <cfif IsSecondOccupant is 'yes'>
            <cfset Is2ndOccupant = "Second Occupant">
           <cfelse>
            <cfset Is2ndOccupant = "Single Occupant">
          </cfif>
          <CFSCRIPT>
					Msg1 = "The Street Rate for this room is below $10.00.<BR>";
					Msg1 = Msg1 & "Contact AR or Support to have the correct Street Rate entered for this room.<br>";					
					Msg1 = Msg1 & "Residency: #GetDescriptions.ResidencyType#<br>";
					Msg1 = Msg1 & "Apartment Type: #GetDescriptions.AptType#<BR>";
					Msg1 = Msg1 & "Occupancy: #Is2ndOccupant#<br>";
					Msg1 = Msg1 & "Product Line: #GetDescriptions.ProductLine#";
					Msg1 = Msg1 & "Apt. Number: #qrycompanionchk.cAptNumber#";					
				</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">
        </cfif>
        <cfif DailyRent.mAmount neq "">
          <cfset DailyRate = DailyRent.mAmount>
        <cfelseif Isdefined('StandardRent.mAmount') and StandardRent.mAmount gt 0>
          <cfset DailyRate = StandardRent.mAmount>
          <!--- 			<cfelseif TenantInfo.iResidencyType_ID neq 3> --->
         <cfelse>
          <!--- 				<B style="font-size:18;">The Daily Rate is missing for this type of Applicant.</B>
				<br/>
				<A style="color:red;font-size:18;" HREF="MoveInForm.cfm?ID=#TenantInfo.iTenant_ID#"> 
				Click Here to Return to the Move In form. </a>
				<CFABORT> --->
          <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <cfif IsSecondOccupant is 'yes'>
            <cfset Is2ndOccupant = "Second Occupant">
            <cfelse>
            <cfset Is2ndOccupant = "Single Occupant">
          </cfif>
          <CFSCRIPT>
				Msg1 = "There is no BSF rate set up for this Residency/Room.<BR>";
				Msg1 = Msg1 & "Residency: #GetDescriptions.ResidencyType#<br>";
				Msg1 = Msg1 & "Apartment Type: #GetDescriptions.AptType#<BR>";
				Msg1 = Msg1 & "Occupancy: #Is2ndOccupant#<br>";
				Msg1 = Msg1 & "Product Line: #GetDescriptions.ProductLine#";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">

        </cfif>
        <cfscript>
				Value = StandardRent.mAmount;
				if (TenantInfo.iResidencyType_ID neq 3)
				{ProrateAmount = (variables.DailyRate * variables.DaysInHouse);}
				else {ProrateAmount = StandardRent.mAmount;}
			</cfscript>
        <cfif #ConvertedChargeType# eq 1748 or #ConvertedChargeType# eq 1682 or #ConvertedChargeType# eq 1756>
          <cfset ConvertedAmount= #StandardRent.mAmount#/#DaysInMonth(MonthList[i])#* #ChargeDays[i]#>
        </cfif>
        <cfif #ConvertedChargeType# eq 1751>
          <!---   mamta showing monthly care --->
          <cfset ConvertedCareAmount= #ConvertedCareAmount#/#DaysInMonth(MonthList[i])#* #ChargeDays[i]#>
        </cfif>
     RENT   test #ConvertedAmount# #ConvertedChargeType# #StandardRent.mAmount# * #(ChargeDays[i])# / #DaysInMonth(MonthList[i])# <br />
        <!---   test mamta  --->
        <cfif   #DateFormat(MonthList[i],'yyyymm')#  LT #TIPSPeriod#><!--- Prorated Rent  --->
 	  RENT: #DateFormat(MonthList[i],'yyyymm')#  LT #TIPSPeriod# <br /> 
          
          <cftry>

              <cfset  ConvertedAmount = round(#ConvertedAmount#*100)/100>
              <cfquery name= "ProrateRent" datasource="#application.datasource#" result="ProrateRent">
              insert into InvoiceDetail
              ( iInvoiceMaster_ID 
              ,iTenant_ID 
              ,iChargeType_ID 
              ,cAppliesToAcctPeriod 
              ,bIsRentAdj 
              ,dtTransaction 
              ,iQuantity 
              ,cDescription 
              ,mAmount 
              ,cComments 
              ,dtAcctStamp 
              ,iRowStartUser_ID 
              ,dtRowStart
              ,iDaysBilled )
              values
              ( #variables.iInvoiceMaster_ID# ,#TenantInfo.iTenant_ID# ,#ConvertedChargeType# ,'#DateFormat(MonthList[i],'yyyymm')#' 
              ,NULL 
              ,getdate() 
              ,#ConvertedDays# ,'#ConvertedDescription#' 
              ,#ConvertedAmount# ,'RENT' 
              ,#CreateODBCDateTime(session.AcctStamp)# ,0 
              ,getdate() 
              ,#ChargeDays[i]#)
              </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Invoice Detail for BSF<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
          </cftry>
          <!---  
			Prorate rent #ChargeDays[i]#<br />  
		
			  --->
        </cfif><!--- Prorated Rent  --->
 <!--- getting Refreshed data for table because sometime inquiry tenant PL was 2 but they move to PL 1  Gthota - 05/23/2018 --->    
    <cfquery name="TenantInfo_REF" dbtype="Query">
		 select iproductline_id from TenantInfo 	   
	    where iTenant_ID = #form.iTenant_ID#
    </cfquery>
 
        <cfif  (SLevel.iSPointsMin neq '0' and SLevel.iSPointsMax neq '0' 
			and TenantInfo_REF.iproductline_id neq 2) 
			and ((IsDefined('qResidentCare.RecordCount') is "yes")
			and (IsDefined('qDailyCare.RecordCount') is "yes") 
			and ((Tenant.cBillingType is 'M' and qResidentCare.RecordCount GT 0) 
			or (Tenant.cBillingType is 'D' 	
			and qDailyCare.RecordCount GT 0)))
				<!---put here the condition--->
          ><!--- DDD --->
          
          <!--- ResidentCare  --->
         <!---	<br />
			=>Out #ArrayLen(CareMonthList)#
			lte #i# 
			lte #TIPSPeriod# 
			:: #ArrayLen(CareMonthList)# le #limit#
			<br /> --->  
          <cfif #ArrayLen(CareMoveInPeriod)#   lte i>
            latida #ArrayLen(CareMoveInPeriod)# lte #i#
            <cfelse>
            lololo #ArrayLen(CareMoveInPeriod)# lte #i#
          </cfif>
          <cfset LenCareMonthList = #ArrayLen(CareMonthList)#>
          <cfset LenCareMoveInPeriod = #ArrayLen(CareMoveInPeriod)#>
          <!--- 		<br />LenCareMonthList :: #LenCareMonthList# ::: LenCareMoveInPeriod :: #LenCareMoveInPeriod# #i# <br /> --->
          <cfif   #i# LTE  #LenCareMonthList#     ><!--- CCC --->
            <!---  mamta test  #i# LTE  #LenCareMonthList#  --->
            <cfif #i# LTE  #LenCareMoveInPeriod#    ><!--- BBB --->
              <!--- mamta test #i# LTE  #LenCareMoveInPeriod# ( #CareMoveInPeriod[i]#  LT #TIPSPeriod#) --->
              <!---<cfif ( #CareMoveInPeriod[i]#  LT #TIPSPeriod#)> --->
              <cfif (#CareMoveInPeriod[i]# LT #TIPSPeriod#)><!--- AAA  --->
                <!---  test mamta  --->
                <!--- lte --->
                <br /> ===> INB #ArrayLen(CareMonthList)# ::lte #i# #CareMoveInPeriod[i]# ::
					lte #TIPSPeriod# ::	#ConvertedCareDays# :: #ArrayLen(CareMonthList)# le #limit#	<br /> 
                <cftry>
 
                    <cfset ConvertedCareAmount = round(#ConvertedCareAmount#*100)/100>
                    <cfquery name="ResidentCare" datasource="#application.datasource#" result="result">
                    insert into InvoiceDetail
                    ( iInvoiceMaster_ID 
                    ,iTenant_ID 
                    ,iChargeType_ID 
                    ,cAppliesToAcctPeriod 
                    ,bIsRentAdj,dtTransaction 
                    ,iQuantity 
                    ,cDescription
                    , mAmount 
                    ,cComments 
                    ,dtAcctStamp 
                    ,iRowStartUser_ID 
                    ,dtRowStart
                    ,iDaysBilled )
                    values
                    ( #variables.iInvoiceMaster_ID# ,#TenantInfo.iTenant_ID# ,#ConvertedCareChargeType# ,'#DateFormat(CareMonthList[i],'yyyymm')#' 
                    ,null 
                    ,getdate()
                    ,#ConvertedCareDays# ,'#ConvertedCareDescription#' 
                    , #ConvertedCareAmount# ,'CARE' 
                    ,#CreateODBCDateTime(session.AcctStamp)# ,0 
                    ,#CreateODBCDateTime(TenantInfo.dtmovein)# ,#iDaysbilled#
                    <!--- --getdate() --->
                    )
                    </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Invoice Detail for Level of Care<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
                </cftry>
                <!--- <cfdump var="#result#" label="Insert care"> Care <br /> --->
              </cfif><!--- AAA --->
            </cfif><!--- BBB --->
          </cfif><!--- CCC --->
        </cfif> <!--- DDD --->
        <!--- GetMIAutoApplyCharges: #TenantInfo.iResidencyType_ID# :: #Occupancy# :: #GetMIAutoApplyCharges.RecordCount#  <br /> --->
        <!--- Medicaid added Februrary, 2015 --->
        <cfif  ((TenantInfo.iResidencyType_ID eq 1) 
			or ( TenantInfo.iResidencyType_ID eq 2 )
			or ( TenantInfo.iResidencyType_ID eq 5 )			
			) AND Occupancy EQ 1> <!--- E --->
         
          <cfif GetMIAutoApplyCharges.RecordCount gt 0>  <!--- D --->
          
            <cfloop query="GetMIAutoApplyCharges"> <!--- C --->
              <!--- <cfdump var="#GetMIAutoApplyCharges.iChargeType_ID#" label="GetMIAutoApplyCharges1">  <br />--->
              <cfif GetMIAutoApplyCharges.iChargeType_ID neq 69 and GetMIAutoApplyCharges.iChargeType_ID neq 53><!--- B --->
                <!--- RECURRING PART --->
                <cfquery name="CheckforRecurringCharge" datasource="#application.datasource#">
                select * from RecurringCharge rc
                where rc.iTenant_ID = #TenantInfo.iTenant_ID# and rc.iCharge_ID = #GetMIAutoApplyCharges.iCharge_ID# and rc.dtRowDeleted is null
                </cfquery>
                <cfif CheckforRecurringCharge.RecordCount lt 1><!--- A --->
                  <cfset thisAmount = round(#GetMIAutoApplyCharges.mAmount#*100)/100>
                  <cftry>
 
                      <cfquery name="AddAutoApplyRecurringCharge" datasource="#application.datasource#">
                      insert into RecurringCharge
                      (iTenant_ID
                      ,iCharge_ID
                      ,dtEffectiveStart
                      ,dtEffectiveEnd
                      ,iQuantity
                      ,cDescription
                      ,mAmount
                      ,cComments 
                      ,dtAcctStamp
                      ,iRowStartUser_ID
                      ,dtRowStart
                      ,bIsDaily)
                      values
                      (#TenantInfo.iTenant_ID# ,#GetMIAutoApplyCharges.iCharge_ID# ,
                      <cfif GetMIAutoApplyCharges.iChargeType_ID is 89>
						#CreateODBCDateTime(TenantInfo.dtRentEffective)#
                      <cfelse>
						#CreateODBCDateTime(TenantInfo.dtMoveIn)#
                      </cfif>
                      <!--- getdate() --->
                      <!--- 54309 - rts - 5/11/2010 - dates should be to 2020 --->
                      <!--- <cfif #Rstamp# lt 1115>
							, '12-31-#ThisYear#'<cfelse>, '12-31-#NextYear#'
							</cfif> --->
                      ,'12/31/2020'
                      <!--- end 53409 --->
                      ,'1'
                      ,'#GetMIAutoApplyCharges.cDescription#'
                      , #thisAmount# ,'Created During MoveIn - AutoApply' 
                      ,#CreateODBCDateTime(session.AcctStamp)# ,#session.userid# ,getdate()  
                      ,#GetMIAutoApplyCharges.bIsDaily# )
                      </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Invoice Detail<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
                  </cftry>
                  <!--- Then get info on what was just inserted for invoice  --->
                  <cfquery name="GetNewRecurringforInvoice" datasource="#application.datasource#">
                  Select rc.* from RecurringCharge rc
                  where rc.iTenant_ID = #TenantInfo.iTenant_ID# and rc.iCharge_ID = #GetMIAutoApplyCharges.iCharge_ID# and rc.dtRowDeleted is null
                  </cfquery>
                </cfif>
                <!--- INVOICE PART --->
                <cfquery name="CheckforInvDtlRecord" datasource="#application.datasource#">
                select id.* from invoicedetail id 
                where id.iTenant_ID = #TenantInfo.iTenant_ID# and id.iChargeType_ID = #GetMIAutoApplyCharges.iChargeType_ID# 
				and id.cAppliesToAcctPeriod = '#DateFormat(MonthList[i],'yyyymm')#'
                and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID#
                <cfif CheckforRecurringCharge.RecordCount gt 0>
                  and id.iRecurringCharge_ID = '#CheckforRecurringCharge.iRecurringCharge_ID#'
                  <cfelse>
                  and id.iRecurringCharge_ID = '#GetNewRecurringforInvoice.iRecurringCharge_ID#'
                </cfif>
                and id.dtRowDeleted is null
                </cfquery>
				DD:CC:BB
                <cfif CheckforInvDtlRecord.RecordCount lt 1><!--- DD --->
                  <cfif #DateFormat(MonthList[i],'yyyymm')# lt #tipsperiod#><!--- CC --->
                    <cfif ((GetMIAutoApplyCharges.iChargeType_ID is 89 )or (GetMIAutoApplyCharges.iChargeType_ID is 8))><!--- BB --->
                      <cfset thisAmount = round(#GetMIAutoApplyCharges.mAmount#*100)/100>
                      <cftry>
                          <cfquery name="InsertAutoApplyCharge" datasource="#application.datasource#">
                          insert into InvoiceDetail
                          (iInvoiceMaster_ID 
                          ,iTenant_ID 
                          ,iChargeType_ID 
                          ,cAppliesToAcctPeriod 
                          ,dtTransaction 
                          ,iQuantity 
                          ,cDescription
                          , mAmount 
                          ,cComments 
                          ,dtAcctStamp 
                          ,iRowStartUser_ID 
                          ,dtRowStart
                          ,iRecurringCharge_ID
                          ,iDaysBilled )
                          values
                          (#variables.iInvoiceMaster_ID# ,#TenantInfo.iTenant_ID# 
						  ,#GetMIAutoApplyCharges.iChargeType_ID# 
						  ,'#DateFormat(MonthList[i],'yyyymm')#'
                          ,getdate()
                          <cfif GetMIAutoApplyCharges.iChargeType_ID is 91>
                            <cfif GetMIAutoApplyCharges.bIsDaily eq 1>
                              ,#ConvertedCareDays#
                              <cfelse>
                              ,1
                            </cfif>
                            <cfelse>
                            <cfif GetMIAutoApplyCharges.bIsDaily eq 1>
                              ,#ConvertedDays#
                              <cfelse>
                              ,1
                            </cfif>
                          </cfif>
                          ,'#GetMIAutoApplyCharges.cDescription#'
                          , #thisAmount# ,'Recurring-Created-at-MoveIn' 
                          ,#CreateODBCDateTime(session.AcctStamp)# , #session.userid# ,getdate() 
                          ,
                          <cfif ((IsDefined("GetNewRecurringforInvoice.iRecurringCharge_ID") is "yes")
									and (GetNewRecurringforInvoice.iRecurringCharge_ID is not ""))>									
							#GetNewRecurringforInvoice.iRecurringCharge_ID#
                           <cfelse>
							#CheckforRecurringCharge.iRecurringCharge_ID#
                          </cfif>
                          ,#ChargeDays[i]#)
                          </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Invoice Detail for BSF<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
                      </cftry>
                      <cfset BSFAmount = round(#GetMIAutoApplyCharges.mAmount#*100)/100>
                      <cfquery name="UpdateBSFTenant" datasource="#application.datasource#">
                      Update TenantState
                      set mBSFOrig = #BSFAmount# where itenant_id = #form.itenant_id#
                      </cfquery>
                      <cfif FindNoCase('Companion Studio', GetMIAutoApplyCharges.cDescription,1) gt 0>
                        <cfset IsCompanion = 'Yes'>
                        <cfelse>
                        <cfset IsCompanion = 'No'>
                      </cfif>
                      <cfelse>
                  not BSF  <br />
                      <cfif #DateFormat(MonthList[i],'yyyymm')# gte #DateFormat(dtmovein,'yyyymm')#><!--- AA --->
                        <cfset MICharge = round(#GetMIAutoApplyCharges.mAmount#*100)/100>
                        <cftry>
                            <cfquery name="InsertAutoApplyCharge"datasource="#application.datasource#">
                            insert into InvoiceDetail
                            (iInvoiceMaster_ID 
                            ,iTenant_ID 
                            ,iChargeType_ID 
                            ,cAppliesToAcctPeriod 
                            ,dtTransaction 
                            ,iQuantity 
                            ,cDescription
                            , mAmount 
                            ,cComments 
                            ,dtAcctStamp 
                            ,iRowStartUser_ID 
                            ,dtRowStart
                            ,iRecurringCharge_ID
                            ,iDaysBilled )
                            values
                            (#variables.iInvoiceMaster_ID# 
							,#TenantInfo.iTenant_ID# 
							,#GetMIAutoApplyCharges.iChargeType_ID# 
							,'#DateFormat(MonthList[i],'yyyymm')#'
                            ,getdate()
                            <cfif GetMIAutoApplyCharges.iChargeType_ID is 91>
                              <cfif GetMIAutoApplyCharges.bIsDaily eq 1>
                                ,#ConvertedCareDays#
                                <cfelse>
                                ,1
                              </cfif>
                              <cfelse>
                              <cfif GetMIAutoApplyCharges.bIsDaily eq 1>
                                ,#ConvertedDays#
                                <cfelse>
                                ,1
                              </cfif>
                            </cfif>
                            ,'#GetMIAutoApplyCharges.cDescription#'
                            ,#MICharge# 
							,'Recurring-Created-at-MoveIn' 
                            ,#CreateODBCDateTime(session.AcctStamp)# 
							, #session.userid# 
							,getdate() 
                            ,
                            <cfif
								((IsDefined("GetNewRecurringforInvoice.iRecurringCharge_ID")
								is "yes") and (GetNewRecurringforInvoice.iRecurringCharge_ID is not ""))>
								#GetNewRecurringforInvoice.iRecurringCharge_ID#
							<cfelse>
								#CheckforRecurringCharge.iRecurringCharge_ID#
							</cfif>
							,#ChargeDays[i]#)
                            </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Invoice Detail<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
                        </cftry>
                        <!---  Recurring-Created-at-MoveIn #GetMIAutoApplyCharges.cDescription# #GetMIAutoApplyCharges.iChargeType_ID# <br /> --->
                      </cfif><!--- AA --->
                    </cfif><!--- BB --->
                  </cfif><!--- CC --->
                </cfif><!--- DD --->
                <!--- 	 <br />variables.iInvoiceMaster_ID: #variables.iInvoiceMaster_ID#<br />  --->
                <!--- <cfquery name="BSFbase" datasource="#application.datasource#">
						select id.* from invoicedetail id 
						where id.iTenant_ID = #TenantInfo.iTenant_ID#
						and id.iChargeType_ID in (7,31,89)
						and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID#
						and id.dtRowDeleted is null
					</cfquery>
					<cfquery name="ComunityFeebase" datasource="#application.datasource#">
						select id.* from invoicedetail id 
						where id.iTenant_ID = #TenantInfo.iTenant_ID#
						and id.iChargeType_ID in (7,31,89)
						and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID#
						and id.dtRowDeleted is null
					</cfquery> --->
                <!--- 					<cfquery name="UpdateBSFTenant" datasource="#application.datasource#">
						Update TenantState
						set mBSFOrig = #BSFbase.mamount#
						where itenant_id = #form.itenant_id#
					</cfquery> --->
                <!--- <cfquery name="qryCompanion" DBTYPE='QUERY'>
						select cdescription from ComunityFeebase where ichargetype_id in (7,31,89)
					</cfquery> --->
                <!--- 					<cfif FindNoCase('Companion Studio', qryCompanion.cdescription,1) gt 0>
						<cfset IsCompanion = 'Yes'>
					<cfelse>
						<cfset IsCompanion = 'No'>
					</cfif> --->
                <cfelseif (((Occupancy gt 1) and   (IsCompanion is not 'Yes')) and (GetMIAutoApplyCharges.iChargeType_ID is 69))>
                <!--- Then ChargeType_ID is 69 (new resident fee). 1 time charge --->
                <!--- do something else --->
                <cfelse>
                <!--- Then ChargeType_ID is 69 (new resident fee). 1 time charge --->
                <cfset thisacctmonth = #DateFormat(MonthList[i],'yyyymm')#>
                <cfquery name="CheckforInvDtlRecord" datasource="#application.datasource#">
                select id.* 
                from invoicedetail id WITH (NOLOCK)
                where id.iTenant_ID = #TenantInfo.iTenant_ID# 
					and id.iChargeType_ID = #GetMIAutoApplyCharges.iChargeType_ID# 
					and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID# and id.dtRowDeleted is null
                </cfquery>
                <cfif CheckforInvDtlRecord.RecordCount lt 1><!--- A --->
                  <cfset  StandardRentmAmount  = round(#StandardRent.mAmount#*100)/100>
                  <cfif #Tenant.cBillingType# is 'M' >
                    <cfset  StandardRentmAmount  = round(#StandardRent.mAmount#*100)/100>
                    <cfelseif #Tenantinfo.cSecDepCommFee# is 'SC' >
                    <cfset GetMIAutoApplyChargesmAmount =  round(#GetMIAutoApplyCharges.mAmount#*100)/100>
                    <cfelseif #Tenantinfo.iresidencytype_id# is 5>
                    <cfset ConvertedAmount=  round((#ConvertedAmount# * 30.4)*100)/100 >
                    <cfelse>
                    <cfset ConvertedAmount =  round((#ConvertedAmount# * 30.4)*100)/100 >
                  </cfif>
				<br />  #Tenant.cBillingType# StandardRentmAmount: #StandardRentmAmount# <br />
                  <cftry>
                      <cfquery name="InsertAutoApplyCharge" datasource="#application.datasource#">
                      insert into InvoiceDetail
                      (iInvoiceMaster_ID 
                      ,iTenant_ID 
                      ,iChargeType_ID 
                      ,cAppliesToAcctPeriod 
                      ,dtTransaction 
                      ,iQuantity 
                      ,cDescription
                      , mAmount 
                      ,ccomments
                      ,dtAcctStamp 
                      ,iRowStartUser_ID 
                      ,dtRowStart
                      ,iDaysBilled)
                      values
                      (#variables.iInvoiceMaster_ID# ,#TenantInfo.iTenant_ID# ,
					<cfif #Tenantinfo.cSecDepCommFee# is 'SC'>
						53
					<cfelse>
						#GetMIAutoApplyCharges.iChargeType_ID#
					</cfif>
                      ,'#DateFormat(MonthList[i],'yyyymm')#'
                      ,getdate()
                      ,1 
                      ,
                      <cfif #Tenant.cBillingType# is 'M' >
                        'CommunityFee'
                        , #StandardRentmAmount# ,'AutoApply Created at MoveIn - CF2'
                        <cfelseif #Tenantinfo.cSecDepCommFee# is 'SC' >
                        'Security Deposit'
                        , #GetMIAutoApplyChargesmAmount# ,'AutoApply Created at MoveIn - SC2'
                        <cfelseif #Tenantinfo.iresidencytype_id# is 5>
                        '#GetMIAutoApplyCharges.cDescription#'
                        ,#ConvertedAmount# ,'AutoApply Created at MoveIn - NRF-MC2'
                        <cfelse>
                        '#GetMIAutoApplyCharges.cDescription#'
                        ,#ConvertedAmount# ,'AutoApply Created at MoveIn - NRF2'
                      </cfif>
                      <!--- ,#GetMIAutoApplyCharges.mAmount#, 75019 --->
                      <!--- <cfif Isdefined ('newNRFee')>
						, (#ConvertedAmount# * 30.4)
						
						<cfelse>  
						,(#ConvertedAmount# * 30.4)
						
						</cfif> --->
                      ,#CreateODBCDateTime(session.AcctStamp)# ,0
                      ,getdate()
                      ,#ChargeDays[i]#)
                      </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Invoice Detail for Community Fee/Security Fee<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
                  </cftry>
                  <!---  NRF 2#GetMIAutoApplyCharges.iChargeType_ID#  --->
                </cfif><!--- A --->
              </cfif><!--- B --->
            </cfloop><!--- C --->
          </cfif><!--- D --->
        </cfif><!--- E --->
        <!--- End 35227 --->
      </CFLOOP><!--- F --->
   
  
      <!--- 25575 - rts - 6/10/2010 - Respite Invoice Details Processing --->
	<cfelseif TenantInfo.iResidencyType_ID eq 3>
		<cfinclude template="MoveInRespiteProcess.cfm">
	</cfif><!--- G --->
    <!--- Loop over existing deposit charges --->
    <cfloop INDEX="Field" LIST="#form.fieldnames#" DELIMITERS=",">
      <cfif FindNoCase('Deposit', Field, 1) GT 0>
        <cfquery name="qgetDepositCharge" datasource="#application.datasource#">
        select * from Charges WITH (NOLOCK) where dtRowDeleted is null and iCharge_ID = #Evaluate('form.'& field)#
        </cfquery>
       <br />#field# - #Evaluate('form.'& field)# : #qgetDepositCharge.cDescription# <br/> 
        <cfset  qgetDepositChargemAmount = round(#qgetDepositCharge.mAmount#*100)/100>
        <cftry>
            <cfquery name="Deposit#Evaluate('form.' & field)#" datasource="#application.datasource#">
            insert into InvoiceDetail
            ( iInvoiceMaster_ID ,iTenant_ID ,iChargeType_ID 
            ,cAppliesToAcctPeriod	,bIsRentAdj	,dtTransaction,iQuantity
            ,cDescription ,mAmount ,cComments ,dtAcctStamp 
            ,iRowStartUser_ID ,dtRowStart )
            values
            ( #variables.iInvoiceMaster_ID# ,#TenantInfo.iTenant_ID# ,#qgetDepositCharge.iChargeType_ID# ,'#MoveInPeriod#' ,NULL
            ,getDate() ,1 ,'#qgetDepositCharge.cDescription#' 
            , #qgetDepositChargemAmount# ,'Deposit' 
            ,#CreateODBCDateTime(session.AcctStamp)# ,0 
            ,getDate() )
            </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Invoice Detail for Deposits<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
        </cftry>
      </cfif>
    </CFLOOP> <!--- Loop over existing deposit charges --->
    <!--- Added for Update Medicaid Residents February 2015 --->
    <cfif TenantInfo.iResidencyType_ID EQ 2>
      <cfquery name="qryHouseMedicaid" datasource="#application.datasource#">
      select * from HouseMedicaid WITH (NOLOCK) where ihouse_id = #tenant.ihouse_id#
      </cfquery>
      <cfif ((bondhouse.cstatecode is 'NJ') or (bondhouse.cstatecode is 'WI') or (bondhouse.cstatecode is 'IA') or (bondhouse.cstatecode is 'DE') or (bondhouse.cstatecode is 'OH')
				or (bondhouse.cstatecode is 'KS') or (bondhouse.cstatecode is 'NC'))>
        <!--- Mshah added IA medicaid Each state will have its own include --->
        <cfinclude template="MoveInMedicaidNJ.cfm" >
        <cfif ArrayLen(MonthList) gt 1 and    ( MonthList[2]   LT  #TIPSMonth# )>
          <cfscript>
					nbrdays1 = monthdays[1];
					nbrdays2 = monthdays[2];
				</cfscript>
          <cfelse>
          <cfscript>
					nbrdays1 = monthdays[1];
				</cfscript>
        </cfif>
      </cfif>
    </cfif>
    <!--- Retreive contact information --->
    <cfquery name="contactinfo" datasource="#application.datasource#">
    select c.*, ltc.*, R.cDescription as Relation
    from tenant T WITH (NOLOCK)
    join LinkTenantContact ltc WITH (NOLOCK) on t.iTenant_ID = ltc.iTenant_ID
    join contact c WITH (NOLOCK) on c.iContact_ID = ltc.iContact_ID
    join RelationShipType R WITH (NOLOCK) on ltc.iRelationshipType_ID = R.iRelationshipType_ID
    where t.iTenant_ID =
	<cfif IsDefined("url.ID") and url.ID neq "">
		#url.ID#
	<cfelse>
		#form.iTenant_ID#
	</cfif>
    </cfquery>
    <!--- Do not perform an Insert for entries with no first or last name  --->
    <cfif form.cFirstName neq "" and form.cLastName neq "">
      <cfif CONTACTINFO.iContact_id eq "">
        <cftry>
            <cfquery name= "Contact" datasource="#application.datasource#">
            insert into Contact
            ( cFirstName ,cLastName ,cPhoneNumber1 ,iPhoneType1_ID ,cPhoneNumber2 ,iPhoneType2_ID ,cAddressLine1 ,cAddressLine2 
            ,cCity ,cStateCode ,cZipCode ,iRowStartUser_ID ,dtRowStart, cEmail)
            values(
            <cfif form.cFirstName neq ''>
              '#form.cFirstName#'
              <cfelse>
              null
            </cfif>
            ,
            <cfif cLastName neq ''>
              '#form.cLastName#'
              <cfelse>
              null
            </cfif>
            , #isBlank(variables.Phone1,'null')#
			, #isBlank(form.iPhoneType1_ID,'null')#
			, #isBlank(Variables.Phone2,'null')#
			, #isBlank(form.iPhoneType2_ID,'null')#,
            <cfif form.cAddressLine1 neq ''>
              '#form.cAddressLine1#'
              <cfelse>
              null
            </cfif>
            ,
            <cfif form.cAddressLine2 neq ''>
              '#form.cAddressLine2#'
              <cfelse>
              null
            </cfif>
            ,
            <cfif form.cCity neq ''>
              '#form.cCity#'
              <cfelse>
              null
            </cfif>
            ,
            <cfif form.cStateCode neq ''>
              '#form.cStateCode#'
              <cfelse>
              null
            </cfif>
            ,
            <cfif form.cZipCode neq ''>
              '#form.cZipCode#'
              <cfelse>
              null
            </cfif>
            , #session.UserID#, 
            getDate(),
            <cfif form.cEmail neq ''>
              '#form.cEmail#'
              <cfelse>
              null
            </cfif>
            )
            </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Contact record<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
        </cftry>
        <cfelse>
        <cftry>
            <cfquery name= "Contact" datasource="#application.datasource#">
            UPDATE  Contact
            SET  cFirstName =
            <cfif form.cFirstName neq ''>
              '#form.cFirstName#'
              <cfelse>
              null
            </cfif>
            ,
            cLastName =
            <cfif cLastName neq ''>
              '#form.cLastName#'
              <cfelse>
              null
            </cfif>
            ,
            cPhoneNumber1 =
            <cfif variables.Phone1 neq ''>
              '#variables.Phone1#'
              <cfelse>
              null
            </cfif>
            ,			   
            iPhoneType1_ID = #isBlank(form.iPhoneType1_ID,'null')#, 
            cPhoneNumber2 =
            <cfif Variables.Phone2 neq ''>
              '#Variables.Phone2#'
              <cfelse>
              null
            </cfif>
            ,
            iPhoneType2_ID = #isBlank(form.iPhoneType2_ID,'null')#,
            cAddressLine1 =
            <cfif form.cAddressLine1 neq ''>
              '#form.cAddressLine1#'
              <cfelse>
              null
            </cfif>
            ,
            cAddressLine2 =
            <cfif form.cAddressLine2 neq ''>
              '#form.cAddressLine2#'
              <cfelse>
              null
            </cfif>
            ,
            cCity =
            <cfif form.cCity neq ''>
              '#form.cCity#'
              <cfelse>
              null
            </cfif>
            ,
            cStateCode =
            <cfif form.cStateCode neq ''>
              '#form.cStateCode#'
              <cfelse>
              null
            </cfif>
            ,
            cZipCode =
            <cfif form.cZipCode neq ''>
              '#form.cZipCode#'
              <cfelse>
              null
            </cfif>
            ,
            iRowStartUser_ID = #session.UserID#,
            dtRowStart = getDate(),
            cEmail =
            <cfif form.cEmail neq ''>
              '#form.cEmail#'
              <cfelse>
              null
            </cfif>
            WHERE iContact_id = #CONTACTINFO.iContact_id#
            </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Contact<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
        </cftry>
      </cfif>
    </cfif>
    <!--- Retrieve Contact ID --->
    <cfquery name= "ContactID" datasource="#application.datasource#">
    select iContact_ID from Contact 
    where cFirstname = '#form.cFirstName#' 
    and cLastName = '#form.cLastName#' 
    and cCity = '#form.cCity#' 
    and cStateCode = '#form.cStateCode#' and iRowStartUser_ID = #session.UserID#
    </cfquery>
    <cfquery name= "LinkTenantContactID" datasource="#application.datasource#">
    select * from LinkTenantContact 
    where
    <cfif CONTACTINFO.iContact_id eq "">
      iTenant_ID =
      <cfif IsDefined("url.ID") and url.ID neq "">
#url.ID#
        <cfelse>
#form.iTenant_ID#
      </cfif>
      <cfelse>
      iContact_ID = #CONTACTINFO.iContact_id#
    </cfif>
    </cfquery>
    <cfif ContactID.iContact_ID neq "">
      <cfif LinkTenantContactID.iContact_id eq "">
        <cftry>
            <cfquery name="LinkTenantContact" datasource="#application.datasource#">
            insert into LinkTenantContact
            ( iTenant_ID ,iContact_ID ,iRelationshipType_ID 
            ,bIsPayer 
            ,bIsPowerOfAttorney ,bIsExecutorContact
            ,bIsMedicalProvider
            ,cPrimaryCarePhysicianContact,cComments 
            ,iRowStartUser_ID 
            ,dtRowStart,bIsGuarantorAgreement
            ) 
			values (
            <cfif form.iTenant_ID neq "">
				#form.iTenant_ID#,
              <cfelse>
              null,
            </cfif>
            <cfif ContactID.iContact_ID neq "">
					#ContactID.iContact_ID#,
              <cfelse>
              null,
            </cfif>
            <cfif form.iRelationshipType_ID neq "">
				#form.iRelationshipType_ID#,
              <cfelse>
              null,
            </cfif>
            <cfif IsDefined("form.ContactbIsPayor")>
				#form.ContactbIsPayor#,
              <cfelse>
              null,
            </cfif>
            <cfif IsDefined("form.bIsPowerOfAttorney")>
				#form.bIsPowerOfAttorney#,
              <cfelse>
              null,
            </cfif>
            <cfif IsDefined("form.bIsExecutorContact")>
				#form.bIsExecutorContact#,
              <cfelse>
              null,
            </cfif>
            <cfif IsDefined("form.bIsMedicalProvider")>
				#form.bIsMedicalProvider#,
              <cfelse>
              null,
            </cfif>
            <cfif IsDefined("form.cPrimaryCarePhysicianContact")>
				#form.cPrimaryCarePhysicianContact#,
              <cfelse>
              null,
            </cfif>
            <cfif form.cComments neq "">
              '#trim(form.cComments)#',
              <cfelse>
              null,
            </cfif>
				#session.UserID# ,getDate()
            <cfif isDefined("form.oGuarentorAgreement") and form.oGuarentorAgreement neq ''>
              ,#form.oGuarentorAgreement#
              <cfelse>
              ,null
            </cfif>
            )
            </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Link Tenant Contact record<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
			</cftry>
         <cfelse>
			<cftry> 
            <cfquery name="LinkTenantContact" datasource="#application.datasource#">
            UPDATE LinkTenantContact
            SET iRelationshipType_ID =
            <cfif form.iRelationshipType_ID neq "">
				#form.iRelationshipType_ID#,
              <cfelse>
              null,
            </cfif>
            bIsPayer =
            <cfif IsDefined("form.ContactbIsPayor")>
				#form.ContactbIsPayor#,
             <cfelse>
              	null,
            </cfif>
            bIsPowerOfAttorney =
            <cfif IsDefined("form.bIsPowerOfAttorney")>
				#form.bIsPowerOfAttorney#,
             <cfelse>
              	null,
            </cfif>
            bIsExecutorContact =
            <cfif IsDefined("form.bIsExecutorContact")>
				#form.bIsExecutorContact#,
             <cfelse>
              	null,
            </cfif>
            bIsMedicalProvider =
            <cfif IsDefined("form.bIsMedicalProvider")>
				#form.bIsMedicalProvider#,
             <cfelse>
              	null,
            </cfif>
            cPrimaryCarePhysicianContact =
				<cfif IsDefined("form.cPrimaryCarePhysicianContact")>
					#form.cPrimaryCarePhysicianContact#,
				<cfelse>
				  null,
				</cfif>
            cComments =
				<cfif form.cComments neq "">
				  '#trim(form.cComments)#',
				  <cfelse>
				  null, 
				</cfif>
            iRowStartUser_ID = #session.UserID#,
            dtRowStart = getDate(),
            bIsGuarantorAgreement =
				<cfif isDefined("form.oGuarentorAgreement") and form.oGuarentorAgreement neq ''>
					#form.oGuarentorAgreement#
				<cfelse>
					null
				</cfif>
            WHERE  iContact_ID = #LinkTenantContactID.iContact_ID#
            </cfquery>
        <cfcatch type="any">
		  <cfset processname = "Resident Move In" >
          <cfset residentname = #resident#>
          <cfset residentID = #form.iTenant_ID#>
          <cfset Formname = "MoveInFormInsert.cfm">
          <CFSCRIPT>
				Msg1 = "There is a problem creating the Link Tenant Contact record<BR>";
			</CFSCRIPT>
          <cfset wherefrom = 'MoveIn'>
          <cflocation url="../Shared/ErrorTemplate.cfm?processname=#processname#&Formname=#Formname#&wherefrom=#wherefrom#&residentID=#residentID#&residentname=#residentname#&Msg1=#Msg1#">				  
            </cfcatch>
        </cftry>
      </cfif>
    </cfif>
 <!---    </cfif> --->
<!--- 	</cfif>  --->
  </cftransaction>
  <!---  IsCompanion = #IsCompanion#  --->
  <CFIF SESSION.USERID is 9999  or  SESSION.username is 'xxxxxx' >
    <BR>
    <A HREF="MoveInCredits.cfm?ID=#form.iTenant_ID#&MID=#variables.iInvoiceMaster_ID#&NrfDiscApprove=#form.NrfDiscApprove#&monthdays1=#nbrdays1#&monthdays2=#nbrdays2#&acctperiod1=#AcctMonthList[1]#<cfif arraylen(AcctMonthList) gt 1>&acctperiod2=#AcctMonthList[2]#</cfif>">Continue.</A>
    <CFELSE>
    <cfif arraylen(AcctMonthList) gt 1>
      <cflocation url="MoveInCredits.cfm?ID=#form.iTenant_ID#&MID=#variables.iInvoiceMaster_ID#		&NrfDiscApprove=#form.NrfDiscApprove#&monthdays1=#nbrdays1#&monthdays2=#nbrdays2#&acctperiod1=#AcctMonthList[1]#&acctperiod2=#AcctMonthList[2]#"
			ADDTOKEN="No">
      <cfelse>
      <cflocation url="MoveInCredits.cfm?ID=#form.iTenant_ID#&MID=#variables.iInvoiceMaster_ID#
			&NrfDiscApprove=#form.NrfDiscApprove#&monthdays1=#nbrdays1#&monthdays2=#nbrdays2#&acctperiod1=#AcctMonthList[1]#"
			ADDTOKEN="No">
    </cfif>
  </CFIF>
</cfoutput>