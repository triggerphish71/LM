<!----------------------------------------------------------------------------------------------
| DESCRIPTION: update Move in Information.                                                     |
|----------------------------------------------------------------------------------------------|
| MoveInFormUpdate.cfm                                                                         |
|----------------------------------------------------------------------------------------------|
| STORED PROCEDURES                                                                            |
|----------------------------------------------------------------------------------------------|
|  none                                                                                        |
|----------------------------------------------------------------------------------------------|
| INCLUDES                                                                                     |
|----------------------------------------------------------------------------------------------|
| Called by: 		MoveInForm.cfm													           |
| Calls/Submits:	MoveInSummary.cfm												           |
|----------------------------------------------------------------------------------------------|
| HISTORY                                                                                      |
|----------------------------------------------------------------------------------------------|
| Author     | Date       | Description                                                        |
|------------|------------|--------------------------------------------------------------------|
| pbuendia   | 10/01/2002 | Original Authorship								                   |
|		     | 03/14/2002 | Changed Find occupancy query be dependent only		   		       |
|		     |            | upon if there is a person in the room. (ie. regardless 		       |
|		     |		      | of the solomonkey or linked status)                                |
| steved     | 04/22/2002 | Added check for companion suite when determining occupancy         |
| paulb      | 09/03/2002 | Changed invoice header update to not include sol bal if second     |
|            |            | tenant                                                             |
| mlaw       | 09/12/2005 | Project 732228: Update New Tenant's chargeset with the cChargeSet  |
|            |            | from charges table                                                 |
| mlaw       | 12/07/2005 | New Move-In Tenant.cchargeset will be assigned by house.cchargeset |
| ranklam    | 12/07/2005 | CHANGED STATIC DSN TO VARIABLE!!!!                                 |
| nryali     | 01/06/2006 | ZipCode varibles are updated with single quotes.                   |
| ranklam    | 01/17/2006 | Changed all rent queries to get the charges for the correct        |
|            |            | product line.                                                      |
| ranklam    | 01/26/2006 | Updated the page to abort if no daily rent is found.               |
|MLAW        | 08/22/2006 | Make sure the charges are assigned to correct Product Line ID      |
|SSathya     | 06/20/08   | Made modification according to project #20125                      |
| Ssathya    | 10/30/2008 | Added a query that would mark the record generated by the activating|
|                         | assessments without billing in the invoicemaster table as per 29842|
| Ssathya    | 11/10/2008 | Project 30178 added the bIsGuarantorAgreement to the query         |
|                           LinkTenantContact query.                                           |
|Rschuette   | 11/21/2008 | Project 26955: updated the "TenantState" query for the right	   |
|			 |  		  | apt address.													   |
 sfarmer     | 4/10/2012  | Project 75019 - EFT Update/NRF Deferral.                           |
|sfarmer     | 04/24/2012 | move in charges changed to check dtEffectiveEnd date. tckt 89924   | 
|sfarmer     | 06/09/2012 | 75019 - NRF/Deferred Installation                                  |
|sfarmer     | 06/09/2012 | 75019 - Adjustments for 2nd opp, respite, Idaho                    | 
|sfarmer     | 12/13/2012 | 99579 - removed required approval process for discounted NRF       | 
|Sfarmer     | 09/18/2013 | 102919 - Revise NRF approval process                               |
|S Farmer    | 05/20/2014 | 116824 - Move-In update  - Allow ED to adjust BSF rate             |
|S Farmer    | 05/20/2014 | 116824 - Phase 2 Allow different move-in and rent-effective dates  |
|            |            | allow respite to adjust BSF rates                                  |
----------------------------------------------------------------------------------------------->
  <cfdump var="#form#"> 
   <cfdump var="#session#"> 
  <!---<cfabort> --->
<p style="font-family:verdana;font-size:xx-small;">
<cfset todaysdate = CreateODBCDateTime(now())>
<cfparam name="formatenddate" default="">
<cfparam name="formatbgndate" default="">
<cfparam name="IsSecondOccupant" default="">
<cfparam name="IsCompanion" default="">
 <cfif IsDefined("FIELDNAMES") is "Yes">
<cfloop list="#FIELDNAMES#" index="loopVar" delimiters=",">
	<cfset string = "form." & loopVar & " = Replace(form." & loopVar & ",""'"",""''"",""ALL"")">
	<cfset temp = evaluate(string)>
</cfloop>
</cfif>
<!--- Define Care Day Start  --->
	<cfif IsDefined('form.MoveInMonth') and (form.MoveInMonth is not '')>
		<cfset variables.MoveInMonth = form.MoveInMonth>
	<cfelse>
		<cfset variables.MoveInMonth = form.RentMonth>	
	</cfif>
	
	<cfset variables.RentMonth = form.RentMonth>
 
	<cfif IsDefined('form.MoveInDay') and (form.MoveInDay is not '')>
		<cfset variables.MoveInDay = form.MoveInDay>
	<cfelse>
		<cfset variables.MoveInDay = form.RentDay>	
	</cfif>
 	
	<cfset variables.RentDay = form.RentDay>
 
 	<cfif IsDefined('form.MoveInYear') and  (form.MoveInYear is not '')>
		<cfset variables.MoveInYear = form.MoveInYear>
	<cfelse>
		<cfset variables.MoveInYear = form.RentYear>	
	</cfif>
 
	<cfset variables.RentYear = form.RentYear>
<cfquery name="previnfo" datasource="#application.datasource#">
  select T.cchargeset, TS.iAptAddress_ID
  from Tenant T
  inner join TenantState TS on T.iTenant_ID = TS.iTenant_ID
  where T.iTenant_ID = <cfif IsDefined("url.ID") and url.ID neq ""> #url.ID#<cfelseif IsDefined("url.iTenant_ID") and url.iTenant_ID neq ""> #url.iTenant_ID# <cfelse> #form.iTenant_ID#</cfif>
</cfquery>


<cfquery name="getHouseChargeset" datasource="#application.datasource#">
  select cs.CName, h.cSLevelTypeSet from house h
  join chargeset cs
  on cs.iChargeSet_ID = h.iChargeSet_ID
  where ihouse_id = #session.qSelectedHouse.iHouse_ID#
  and h.dtrowdeleted is null
</cfquery>

<cfif session.qSelectedHouse.iHouse_ID gt 0>
	<cftry>
		<cfquery name="UpdateChargeset" datasource="#application.datasource#">
		  update Tenant
		  set cChargeSet = '#getHouseChargeset.CName#' ,dtrowstart=getdate() ,crowstartuser_id='#session.userid#'
		  where iTenant_ID = #form.iTenant_ID#
		</cfquery>
		<cfcatch>
		  There is some problem while updating the Tenant table
		</cfcatch>
	</cftry>
</cfif>

<!--- Retrieve Tenant Information not dependent upon other tables ---> 
<cfquery name="Tenant" datasource="#application.datasource#">
	select t.csolomonkey,* 
	from Tenant T
	join TenantState ts on t.iTenant_ID = ts.iTenant_ID
	join TenantStateCodes tc on ts.iTenantStateCode_ID = tc.iTenantStateCode_ID
	join ResidencyType rt on rt.iResidencyType_ID = ts.iResidencyType_ID
	where t.iTenant_ID = <cfif IsDefined("url.ID") and url.ID neq ""> #url.ID#<cfelseif IsDefined("url.iTenant_ID") and url.iTenant_ID neq ""> #url.iTenant_ID# <cfelse> #form.iTenant_ID#</cfif>
</cfquery>
<!---<cfdump  var="#tenant#">--->
<cfquery name="qLinkedCheck" datasource="#application.datasource#">
	select count(distinct t.itenant_id) as linkcount from Tenant T
	join TenantState ts on t.iTenant_ID = ts.iTenant_ID and t.dtrowdeleted is null
	and ts.dtrowdeleted is null and ts.itenantstatecode_id <= 3
	where t.csolomonkey=#tenant.csolomonkey#
</cfquery>

<cfif qLinkedCheck.linkcount gt 1> <cfset linkedaccount=1>
<cfelse> <cfset linkedaccount=0> </cfif>

<cfif Tenant.iTenantStateCode_ID eq 2>
	<center><strong style='font-size: large; color: red;'>This tenant is already moved in.<br/>You will be redirected in 10 seconds.</strong></center>
	<script> function redirect() { location.href='../MainMenu.cfm'; } setTimeout('redirect()',10000); </script>
	<cfabort>
</cfif>

<cfscript>
//	switch(Tenant.cBillingType){
//		case "d": billing = 'daily'; break;
//		case "m": billing = 'monthly'; break;
//		default: billing='monthly';
//	}
	
//	null = 'Null';

	//Concatenate Phone Number from areacode prefix and number
//	Phone1 = form.areacode1 & form.prefix1 & form.number1;
//	Phone2 = form.areacode2 & form.prefix2 & form.number2;

	//Concatenate the dates
//	dtMoveIn = CreateODBCDATETIME(variables.MoveInMonth & '/' & variables.MoveInDay & '/' & variables.MoveInYear);
//	MoveInMonth = CreateODBCDATETIME(variables.MoveInMonth & '/' & 01 & '/' & variables.MoveInYear);
//	MoveInPeriod = Year(variables.dtMoveIn) & DateFormat(variables.dtMoveIn,"mm");
//	MIDaysInMonth = DaysInMonth(MoveInMonth);

//	dtRent = CreateODBCDATETIME(variables.RentMonth & '/' & variables.RentDay & '/' & variables.RentYear);
//	RentMonth = CreateODBCDATETIME(variables.RentMonth & '/' & 01 & '/' & variables.RentYear);
//	RentPeriod = Year(variables.dtRent) & DateFormat(variables.dtRent,"mm");
//	RentDaysInMonth = DaysInMonth(RentMonth);

 //  	CurrPeriod = Year(session.TipsMonth) & DateFormat(session.TipsMonth,"mm");  
 ////	CurrPeriod = Year(now()) & DateFormat(now(),"mm");
 //	CurrentMonth = createODBCDateTime(Month(session.TIPSMonth) & "/" & 01 & "/" & Year(session.TIPSMonth));
// 	CurrPeriodDays = DaysInMonth(CurrPeriod);

 //	RentDaysToCharge = (RentDaysInMonth - form.RentDay) +1;
 //	if (MoveInPeriod LT currPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
 //	MonthsDifference = DateDiff('m',CurrentMonth,RentMonth);

// 	MonthList=ArrayNew(1); chargeDays=ArrayNew(1);
 //	MonthList[1]=dtRent;
 //	ChargeDays[1]=RentDaysToCharge;
//
 //	limit=abs(monthsdifference)-1;
 //	for (i=1; i LTE limit; i=i+1) {
 //		MonthList[i+1]=DateAdd('m', i, RentMonth);
 //		ChargeDays[i+1]=DaysInMonth(MonthList[i+1]);
 //	}

//// splits care days(movein) to separate count from RentEffective days
//// 	dtMoveIn = createodbcdatetime(form.RentMonth & "/" & form.RentDay & "/" & form.RentYear);
//// 	MoveInMonth = createodbcdatetime(form.RentMonth & "/" & 01 & "/" & form.RentYear);
//// 	MoveInPeriod = Year(variables.dtMoveIn) & DateFormat(variables.dtMoveIn,"mm");
// //	MIDaysInMonth = DaysInMonth(MoveInMonth);
 
 
 


//	CurrPeriod = Year(session.TipsMonth) & DateFormat(session.TipsMonth,"mm");
//	CurrentMonth = CreateODBCDateTime(Month(session.TIPSMonth) & "/" & 01 & "/" & Year(session.TIPSMonth));
//	CurrPeriodDays = DaysInMonth(CurrPeriod);
 //	limit=abs(MonthsDifference)-1;
// 	for (i=1; i LTE limit; i=i+1) {  
// 		MonthList[i+1]=DateAdd('m', i, RentMonth);  
 //		ChargeDays[i+1]=DaysInMonth(MonthList[i+1]); 
 //		}
		
// if  (RentMonth == MoveInMonth)
// {	whereat = 'toppart';
//	RentDaysToCharge = RentDaysInMonth - variables.RentDay +1;
//	if (RentPeriod LT CurrPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
//	MonthsDifference = DateDiff('m',CurrentMonth,RentMonth);

//	CareDaysToCharge = RentDaysInMonth - variables.MoveInDay +1;
//	if (RentPeriod LT CurrPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
//	CareMonthsDifference = DateDiff('m',CurrentMonth,RentMonth);
	
//	CareMonthList=ArrayNew(1); CareChargeDays=ArrayNew(1);
//	CareMonthList[1]=dtMoveIn; CareChargeDays[1]=CareDaysToCharge;
	
//	MonthList=ArrayNew(1); ChargeDays=ArrayNew(1);
//	MonthList[1]=dtRent; ChargeDays[1]=RentDaysToCharge;
	

//	Carelimit=abs(CareMonthsDifference)-1;
 
//	for (i=1; i LTE Carelimit; i=i+1) {  
//		CareMonthList[i+1]=DateAdd('m', i, MoveInMonth);  
//		CareChargeDays[i+1]=DaysInMonth(CareMonthList[i+1]);
	 
//	}
//	}
//else // actual move-in is next month after financial possession month
//	{	
//	whereat = 'elsepart';
//		RentDaysToCharge = RentDaysInMonth - variables.RentDay +1;
//	if (RentPeriod LT CurrPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
//	MonthsDifference = DateDiff('m',CurrentMonth,RentMonth);

//
//	CareDaysToCharge = 0;
	//if (RentPeriod LT CurrPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
//	CareMonthsDifference = DateDiff('m',CurrentMonth,RentMonth);
	
//	CareMonthList=ArrayNew(1); CareChargeDays=ArrayNew(1);
//	CareMonthList[1]=dtMoveIn; CareChargeDays[1]=CareDaysToCharge;
	
//	MonthList=ArrayNew(1); ChargeDays=ArrayNew(1);
//	MonthList[1]=dtRent; ChargeDays[1]=RentDaysToCharge;
	

//	Carelimit=abs(CareMonthsDifference)-1;
//	//for (i=1; i LTE Carelimit; i=i+1) {  
////		CareMonthList[i+1]=DateAdd('m', i, MoveInMonth);  
//	//	CareChargeDays[i+1]=DaysInMonth(MonthList[i+1]);
////		alert(i, ' ', MoveinMonth, ' ', CareChargeDays);
//	//}
//		i = 1;
//	 	CareMonthList[i]= RentMonth; //MoveInMonth;  
//	 	CareChargeDays[i] = 0;//DaysInMonth(MoveInMonth) - MoveInDay + 1;
// //		alert(i, ' ', MoveinMonth, ' ', CareChargeDays);
//	}
	</cfscript>
  	<cfif SESSION.qSelectedHouse.iopsarea_ID is 44> 
  <cfscript>
	switch(Tenant.cBillingType){
		case 'd': billing = 'daily'; break;
		case 'm': billing = 'monthly'; break;
		default: billing='monthly';
	}

	//Concatenate Phone Number from areacode prefix and number
	Phone1 = form.areacode1 & form.prefix1 & form.number1; 	
	Phone2 = form.areacode2 & form.prefix2 & form.number2;

	//Concatenate the dates

	dtMoveIn = CreateODBCDATETIME(variables.MoveInMonth & '/' & variables.MoveInDay & '/' & variables.MoveInYear);
	MoveInMonth = CreateODBCDATETIME(variables.MoveInMonth & '/' & 01 & '/' & variables.MoveInYear);
	MoveInPeriod = Year(variables.dtMoveIn) & DateFormat(variables.dtMoveIn,"mm");
	MIDaysInMonth = DaysInMonth(MoveInMonth);
   	CurrPeriod = Year(session.TipsMonth) & DateFormat(session.TipsMonth,"mm");  
 	CurrPeriod = Year(now()) & DateFormat(now(),"mm");
 	CurrentMonth = createODBCDateTime(Month(session.TIPSMonth) & "/" & 01 & "/" & Year(session.TIPSMonth));
 	CurrPeriodDays = DaysInMonth(CurrPeriod);	
 	MonthsDifference = DateDiff('m',CurrentMonth,RentMonth);
	
	dtRent = CreateODBCDATETIME(variables.RentMonth & '/' & variables.RentDay & '/' & variables.RentYear);
	RentMonth = CreateODBCDATETIME(variables.RentMonth & '/' & 01 & '/' & variables.RentYear);
	RentPeriod = Year(variables.dtRent) & DateFormat(variables.dtRent,"mm");
	RentDaysInMonth = DaysInMonth(RentMonth);

	CurrPeriod = Year(session.TipsMonth) & DateFormat(session.TipsMonth,"mm");
	CurrentMonth = CreateODBCDateTime(Month(session.TIPSMonth) & "/" & 01 & "/" & Year(session.TIPSMonth));
	CurrPeriodDays = DaysInMonth(CurrPeriod);
	limit=abs(MonthsDifference)-1;
	for (i=1; i LTE limit; i=i+1) {  
		MonthList[i+1]=DateAdd('m', i, RentMonth);  
		ChargeDays[i+1]=DaysInMonth(MonthList[i+1]); 
		}
		
 if  (RentMonth == MoveInMonth)
 	{	
		RentDaysToCharge = RentDaysInMonth - variables.RentDay +1;
		if (RentPeriod LT CurrPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
		MonthsDifference = DateDiff('m',CurrentMonth,RentMonth);
	
	
		CareDaysToCharge = RentDaysInMonth - variables.MoveInDay +1;
		if (RentPeriod LT CurrPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
		CareMonthsDifference = DateDiff('m',CurrentMonth,RentMonth);
		
		CareMonthList=ArrayNew(1); CareChargeDays=ArrayNew(1);
		CareMonthList[1]=dtMoveIn; CareChargeDays[1]=CareDaysToCharge;
		
		MonthList=ArrayNew(1); ChargeDays=ArrayNew(1);
		MonthList[1]=dtRent; ChargeDays[1]=RentDaysToCharge;
		
	
		Carelimit=abs(CareMonthsDifference)-1;
		for (i=1; i LTE Carelimit; i=i+1) {  
			CareMonthList[i+1]=DateAdd('m', i, RentMonth);  
			CareChargeDays[i+1]=DaysInMonth(MonthList[i+1]);
		}
	}
	else // actual move-in is 1st or later of month of room possession
		{	
			RentDaysToCharge = RentDaysInMonth - variables.RentDay +1;
			if (RentPeriod LT CurrPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
			MonthsDifference = DateDiff('m',CurrentMonth,RentMonth);

			CareDaysToCharge = 0;
			if (RentPeriod LT CurrPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
			CareMonthsDifference = DateDiff('m',CurrentMonth,RentMonth);
			
			CareMonthList=ArrayNew(1); CareChargeDays=ArrayNew(1);
			CareMonthList[1]=dtMoveIn; CareChargeDays[1]=CareDaysToCharge;
			
			MonthList=ArrayNew(1); ChargeDays=ArrayNew(1);
			MonthList[1]=dtRent; ChargeDays[1]=RentDaysToCharge;
		
			Carelimit=abs(CareMonthsDifference)-1;
			for (i=1; i LTE Carelimit; i=i+1) {  
				CareMonthList[i+1]=DateAdd('m', i, RentMonth);  
				CareChargeDays[i+1]=DaysInMonth(CareMonthList[i+1]);
		}
	}
</cfscript>
<cfelse>
<cfscript>
	switch(Tenant.cBillingType){
		case 'd': billing = 'daily'; break;
		case 'm': billing = 'monthly'; break;
		default: billing='monthly';
	}

	//Concatenate Phone Number from areacode prefix and number
	Phone1 = form.areacode1 & form.prefix1 & form.number1; 	
	Phone2 = form.areacode2 & form.prefix2 & form.number2;

	//Concatenate the dates

	dtMoveIn = CreateODBCDATETIME(variables.MoveInMonth & '/' & variables.MoveInDay & '/' & variables.MoveInYear);
	MoveInMonth = CreateODBCDATETIME(variables.MoveInMonth & '/' & 01 & '/' & variables.MoveInYear);
	MoveInPeriod = Year(variables.dtMoveIn) & DateFormat(variables.dtMoveIn,"mm");
	MIDaysInMonth = DaysInMonth(MoveInMonth);

	dtRent = CreateODBCDATETIME(form.RentMonth & '/' & form.RentDay & '/' & form.RentYear);
	RentMonth = CreateODBCDATETIME(form.RentMonth & '/' & 01 & '/' & form.RentYear);
	RentPeriod = Year(variables.dtRent) & DateFormat(variables.dtRent,"mm");
	RentDaysInMonth = DaysInMonth(RentMonth);

	CurrPeriod = Year(session.TipsMonth) & DateFormat(session.TipsMonth,"mm");
	CurrentMonth = CreateODBCDateTime(Month(session.TIPSMonth) & "/" & 01 & "/" & Year(session.TIPSMonth));
	CurrPeriodDays = DaysInMonth(CurrPeriod);

	RentDaysToCharge = RentDaysInMonth - form.RentDay +1;
	if (RentPeriod LT CurrPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
	MonthsDifference = DateDiff('m',CurrentMonth,RentMonth);
	
	MonthList=ArrayNew(1); ChargeDays=ArrayNew(1);
	MonthList[1]=dtRent; ChargeDays[1]=RentDaysToCharge;
	
	limit=abs(monthsdifference)-1;
	for (i=1; i LTE limit; i=i+1) {  
		MonthList[i+1]=DateAdd('m', i, RentMonth);  
		ChargeDays[i+1]=DaysInMonth(MonthList[i+1]); 
	}
</cfscript>
</cfif>
<!--- Retrieve DatabaseServer TimeStamp --->
<cfquery name="qTimeStamp" datasource="#application.datasource#">
select getdate() as timestamp,
	 Right(CONVERT(VARCHAR(8), GETDATE(), 112),4) AS Stamp2
	 ,RIGHT(CONVERT(VARCHAR(10), GETDATE(), 101),4) as Stamp3	
</cfquery>

<cfset TimeStamp = qTimeStamp.timestamp>

<cfset Rstamp = qTimeStamp.Stamp2>
<cfset ThisYear = qTimeStamp.Stamp3>
<cfset NextYear = (qTimeStamp.Stamp3 + 1)>
 
<!--- Retreive information for chosen Apartment --->
<cfquery name="AptInfo" datasource="#application.datasource#">
<!--- 	select * from AptAddress where iAptAddress_ID = #form.iAptAddress_ID# and dtRowDeleted is null --->
	select distinct TS.iAptAddress_ID  ,  APT.cdescription
	from TenantState TS
	join Tenant T on T.iTenant_ID = TS.iTenant_ID and T.dtRowDeleted is null
	join AptAddress AD on AD.iAptAddress_ID = TS.iAptAddress_ID and AD.dtRowDeleted is null
	join AptType APT on AD.iAptType_ID = APT.iAptType_ID
	where TS.dtRowDeleted is null 
	and	TS.iTenantStateCode_ID = 2
	and	AD.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
	and ts.iAptAddress_ID = #form.iAptAddress_ID#
</cfquery> 

<cfif AptInfo.iAptAddress_ID is not ''> <cfset IsSecondOccupant = 'Yes'> <cfelse><cfset IsSecondOccupant = "No"></cfif>
<cfif find('Companion',AptInfo.cdescription) gt 1><cfset IsCompanion = "Yes"> <cfelse><cfset IsCompanion = "No"></cfif>

 <cfquery name="bondhouse" datasource="#application.datasource#">
	select ibondhouse from house  where ihouse_id =  #session.qSelectedHouse.iHouse_ID#
 </cfquery>
<cftransaction>
	<cfquery name="TenantState" datasource="#application.datasource#">
		update tenantstate
		set 
			iproductline_id=#trim(form.iproductline_id)#,
			iResidencyType_ID = #trim(Form.iResidencyType_ID)#, 
			dtMoveIn = '#dateformat(trim(variables.dtMoveIn),"YYYY-MM-DD")#',
			dtRentEffective = '#dateformat(trim(variables.dtRent),"YYYY-MM-DD")#', 			
			bNextMonthsRent =  #isBlank(form.bNextMonthsRent,'null')#,
			iSPoints = #trim(form.iSPoints)#,
            iAptAddress_ID = #trim(form.iAptAddress_ID)#,
			iPrimaryDiagnosis=#isBlank(form.PrimaryDiagnosis,'null')#,
			iSecondaryDiagnosis=#isBlank(form.SecondaryDiagnosis,'null')#,
			cMilitaryVA = <cfif form.cMilitaryVA neq ""> '#form.cMilitaryVA#' <cfelse> null </cfif>,
			cMilitaryStartDate = <cfif form.cMilitaryStartDate neq ""> '#form.cMilitaryStartDate#' <cfelse> null </cfif>,
			cMilitaryEndDate = <cfif form.cMilitaryEndDate neq ""> '#form.cMilitaryEndDate#' <cfelse> null </cfif>,
			<cfif isdefined("VABenefits")>
				VABenefits = #isBlank(form.VABenefits,'null')#,
			</cfif>
			<cfif isdefined("VaRepresentativeContacted")>
				VaRepresentativeContacted = #isBlank(form.VaRepresentativeContacted,'null')#,
			</cfif>
			VaBranchOfMilitary = <cfif form.VaBranchOfMilitary neq ""> '#form.VaBranchOfMilitary#' <cfelse> null </cfif>,
		  
			<cfif isdefined("form.iResidencyType_ID") and form.iResidencyType_ID eq 3>
				dtmoveoutprojecteddate = '#form.dtmoveoutprojecteddate#',
			</cfif>

			<cfif (ListContains(session.groupid,'240') gt 0) or (ListContains(session.groupid,'192') gt 0)>
				cTenantPromotion=	<cfif isDefined("form.PromotionUsed")and form.PromotionUsed neq "">
										#form.PromotionUsed#,
									<cfelse>
										null,
									</cfif>
				
				<cfif isdefined("form.TenantbMICheckReceived") and form.TenantbMICheckReceived eq 1>
						bMICheckReceived = '#form.TenantbMICheckReceived#',dtMICheckReceived = getdate(),
				 <cfelse>
						bMICheckReceived = 0,dtMICheckReceived = null,
				</cfif>
				
				bDeferredPayment = 	<cfif isdefined("form.TenantbDeferredPayment") and form.TenantbDeferredPayment neq "">
										'#form.TenantbDeferredPayment#',
									<cfelse>
										null,
									</cfif>
			<cfelse>
				bMICheckReceived = null,
				dtMICheckReceived = null,
				bDeferredPayment = null,
			</cfif>

			dtRowStart = getdate(), 
			iRowStartUser_ID = #session.UserID# 
			<cfif IsDefined('form.VADeferral')>	   
				<cfif form.VAApprove is not null  and form.VADeferral eq 1>
					,bIsVADeferred =    1 
					,cVADefApproveUser_ID = '#form.VAApprove#' 
				</cfif>
			</cfif>
			<cfif IsDefined('form.nrfApprove')  and (form.nrfApprove is not '')  and (form.NRFDeferral eq 1) >
				,bIsNRFDeferred =    1 
				,cNRFDefApproveUser_ID =    '#form.nrfApprove#' 
			</cfif>
			
			<cfif IsDefined('form.nrfApprove')  and (form.nrfApprove is not '')  and (form.newnrfee eq 0)   >
				,cNRFDefApproveUser_ID =    '#form.nrfApprove#' 
			</cfif>	
				
			<cfif IsDefined('form.nrfee')  and (form.nrfee is not '')	>
	
 				<cfif AptInfo.iAptAddress_ID is not '' and ((IsCompanion is "No") or (IsCompanion is ""))>		
				,mBaseNRF = 0				
				<cfelseif Tenant.iResidencyType_ID is   3>
				,mBaseNRF = 0
				<cfelse>		
				,mBaseNRF = #nrfee#
				</cfif>
			</cfif>
			
			<cfif IsDefined('form.newNRFee')  and (form.newNRFee is not '') >			
 				<cfif AptInfo.iAptAddress_ID is not ''>		
				,mAdjNRF = 0			 
				<cfelseif Tenant.iResidencyType_ID is  3>
				,mAdjNRF = 0
				<cfelse>		
				,mAdjNRF = #newNRFee#
				</cfif>
			</cfif>
			
<!--- 	99579		<cfif IsDefined('form.nrfADJApprove')  and (form.nrfADJApprove is not '') and (Tenant.iResidencyType_ID is not 3)	>	
				,cNRFAdjApprovedBy = #nrfADJApprove#  
			</cfif>	 --->			
		<cfif isdefined('amtdef') and (Tenant.iResidencyType_ID is not 3)  and (amtdef is not '')>
		,mAmtDeferred = #amtdef# 
		</cfif>
		<cfif IsDefined('MonthstoPay') and (Tenant.iResidencyType_ID is not 3) and (MonthstoPay is not '')>
		,iMonthsDeferred = #MonthstoPay#
		</cfif>
		<cfif IsDefined('AmtPAid') and (Tenant.iResidencyType_ID is not 3) and (AmtPAid is not '')>
		,mAmtNRFPaid = #AmtPAid#
		</cfif>

		
		where iTenant_ID = #form.iTenant_ID#
		
	</cfquery>
</cftransaction>

<!--- Retrieve all information from tenant table for this tenant --->
<cfquery name="TenantInfo" datasource="#application.datasource#">
	select distinct t.*, tc.*, ad.*, ap.cDescription as RoomType, rt.*, ts.*
	from tenant t
	join tenantstate ts on t.iTenant_ID = ts.iTenant_ID
	join tenantstatecodes tc on ts.iTenantStateCode_ID = tc.iTenantStateCode_ID
	join aptaddress ad on ts.iAptAddress_ID = ad.iAptAddress_ID
	join apttype ap on ap.iAptType_ID = ad.iAptType_ID
	join ResidencyType rt on ts.iResidencyType_ID = rt.iResidencyType_ID
	where t.iTenant_ID = <cfif IsDefined("url.ID") and url.ID neq "">#url.ID# <cfelse> #form.iTenant_ID#</cfif>
</cfquery>

<cftransaction>

<!---  Bond Update on tenant --->
<cfif bondhouse.ibondhouse eq 1> 
	<cfquery name="UpdateTenantBondInfo" datasource="#application.datasource#">
		Update Tenant
		Set 
		<cfif isdefined("form.cBondQualifying") and form.cBondQualifying neq "">
			bIsBond = '#form.cBondQualifying#',
		</cfif>
		<cfif isdefined("form.dtBondCertificationMailed") and ((form.dtBondCertificationMailed neq "") or (form.dtBondCertificationMailed neq "00/00/0000"))>
			dtBondCert = '#form.dtBondCertificationMailed#'
		<cfelse>
			dtBondCert = getdate()
		</cfif>
		,cRowEndUser_ID = '#SESSION.USERNAME#'
		Where iTenant_ID = #form.iTenant_ID#
	</cfquery>
	<cfquery name="TenantBondCheck" datasource="#application.datasource#">
		select bIsBond from tenant where iTenant_ID = #form.iTenant_ID#
	</cfquery>
	<cfquery name="RoomBondCheck" datasource="#application.datasource#">
		select bBondIncluded from AptAddress where iAptAddress_ID = #form.iAptAddress_ID#
	</cfquery>
	<cfif TenantBondCheck.bIsBond eq 1 and RoomBondCheck.bBondIncluded eq 1>
		<cfquery name="TurnRoomBond" datasource="#application.datasource#">
			Update AptAddress
			Set bIsBond = 1,cRowEndUser_ID = '#SESSION.USERNAME#'
			where iAptAddress_id = #form.iAptAddress_ID#
		</cfquery>
	</cfif>
</cfif>

<cfquery name="UpdateTenantPayer" datasource="#application.datasource#">
	update Tenant
		set 
			cMiddleInitial = <cfif form.cMiddleInitial neq ''> '#form.cMiddleInitial#' <cfelse> null </cfif>,
			cSSN = <cfif form.cSSN neq ''> '#form.cSSN#' <cfelse> null </cfif>,
			dBirthDate = '#form.dbirthdate#',
			csleveltypeset='#trim(form.csleveltypeset)#',
			<cfif IsDefined("form.TenantbIsPayer") and form.TenantbIsPayer neq ""> bIsPayer = #form.TenantbIsPayer#,<cfelse> bIsPayer = null, </cfif>
		    <cfif IsDefined("session.cBillingType") and session.cBillingType neq ''> cbillingtype = '#session.cbillingtype#',</cfif>
		    <cfif (ListContains(session.groupid,'240') gt 0) or (ListContains(session.groupid,'192') gt 0)> 	
			 <cfif IsDefined("form.cResidenceAgreement")and form.cResidenceAgreement neq "">
			   	cResidenceAgreement = #form.cResidenceAgreement#, 
		     <cfelse>
		        cResidenceAgreement = null ,
			 </cfif>
			</cfif>
			<cfif IsDefined("form.hasExecutor") and form.hasExecutor neq "">
			   	chasExecutor = #form.hasExecutor#,
			 <cfelse>
			    chasExecutor = null,
			  </cfif>
			  <cfif (ListContains(session.groupid,'240') gt 0) or (ListContains(session.groupid,'192') gt 0)>
			  <cfif IsDefined("form.cResidentFee") and form.cResidentFee neq "">
				 cResidentFee=#trim(form.cResidentFee)#, 
			 <cfelse>
			    cResidentFee=null,
	    	   </cfif>
	    	   </cfif>

			cPreviousAddressLine1 = <cfif form.cPreviousAddressLine1 neq ''> '#form.cPreviousAddressLine1#' <cfelse> null </cfif>,
			cPreviousAddressLine2 = <cfif form.cPreviousAddressLine2 neq ''> '#form.cPreviousAddressLine2#' <cfelse> null </cfif>,
			cPreviousCity = <cfif form.cPreviousCity neq ''> '#form.cPreviousCity#' <cfelse> null </cfif>,
			cPreviousState = <cfif form.cPreviousState neq ''> '#form.cPreviousState#' <cfelse> null </cfif>,
			cPreviousZipCode = <cfif form.cPreviousZipCode neq ''> '#form.cPreviousZipCode#' <cfelse> null </cfif>
			where iTenant_ID = #form.iTenant_ID#
</cfquery>

<!--- Retreive contact information --->
<cfquery name="contactinfo" datasource="#application.datasource#">
	select c.*, ltc.*, R.cDescription as Relation
	from tenant T
	join LinkTenantContact ltc on t.iTenant_ID = ltc.iTenant_ID
	join contact c on c.iContact_ID = ltc.iContact_ID
	join RelationShipType R on ltc.iRelationshipType_ID = R.iRelationshipType_ID
	where t.iTenant_ID = <cfif IsDefined("url.ID") and url.ID neq ""> #url.ID# <cfelse> #form.iTenant_ID# </cfif>
</cfquery>

	<!--- Get Invoice Master Info For Record Being Generated By Activate without billing --->

<cfquery name="GetInvoiceMasterInfo" datasource="#application.datasource#">
	Select 	iInvoiceMaster_ID 
	from Invoicemaster where csolomonkey ='#Tenant.csolomonkey#'
</cfquery>

<!--- 10/23/2008 Project 29842 mark it as deleted in the invoicemaster table if there is a record prior to move in of the resident --->
<cfif GetInvoiceMasterInfo.RecordCount neq 0>
	<cfquery name="deleteInvoicemasterRecord" datasource="#application.datasource#">
		update Invoicemaster set 
		dtrowdeleted=getdate() 
		,irowdeleteduser_id = #session.UserId#
		where csolomonkey ='#Tenant.csolomonkey#'
	</cfquery>
</cfif> 

<!--- Check for MI for this specific tenant with no other residents on it  --->
<cfquery name="MoveInInvoiceCheck" datasource="#application.datasource#">
	Select im.iInvoiceMaster_ID 
	From InvoiceMaster im
	Join InvoiceDetail inv on (inv.iInvoiceMaster_ID = im.iInvoiceMaster_ID and inv.dtRowDeleted is null)
	Where im.dtRowDeleted is null 
	and im.bMoveInInvoice is not null 
	and im.bFinalized is null 
	and inv.iTenant_ID = #Tenant.iTenant_ID#
	and 1 = (select count(distinct itenant_id) from invoicedetail sd
			where dtrowdeleted is null and sd.iinvoicemaster_id = inv.iinvoicemaster_id)
</cfquery>

<cfif MoveInInvoiceCheck.RecordCount eq 0>
	<!---	Check InvoiceMaster for Existing MoveIn Invoice for this cSolomonKey
	that is not finalized with not details--->
	<cfquery name="MoveInInvoiceCheck" datasource="#application.datasource#">
		select * from InvoiceMaster im
		where im.dtRowDeleted is null and im.bMoveInInvoice is not null and im.bFinalized is null
		and im.cSolomonKey = '#Tenant.cSolomonKey#'
		and 0=(select count(*) from InvoiceDetail where dtRowDeleted is null and iInvoiceMaster_ID = im.iInvoiceMaster_ID)
	</cfquery>
</cfif>

<cfif MoveInInvoiceCheck.iInvoiceMaster_ID neq "" and MoveInInvoiceCheck.iInvoiceMaster_ID neq 0>
	<!--- ==============================================================================
	Delete ALL System Generated Invoice Details. (signified by user 0) These charges WILL BE Re-Generated BELOW.
	=============================================================================== --->
	<cfquery name="DeleteSystemDetails" datasource="#application.datasource#">
		update invoicedetail
		set	dtrowdeleted=getdate() ,irowdeleteduser_id = #session.UserId#
		from invoicedetail inv
		join invoicemaster im on im.iinvoicemaster_id = inv.iinvoicemaster_id
		and im.dtrowdeleted is null and inv.dtrowdeleted is null
		and im.bmoveininvoice is not null and im.bmoveoutinvoice is null
		where inv.irowstartuser_id = 0 and inv.itenant_id = #form.itenant_id#
	</cfquery>
</cfif>

<!---If there no available invoice.
We get the next number from house number control and update the invoice master table--->
<cfif MoveInInvoiceCheck.RecordCount LTE 0>
	<!--- Retrieve Next invoice number from the control table --->
	<cfquery name="GetNextInvoice" datasource="#application.datasource#">
		select iNextInvoice from HouseNumberControl where iHouse_ID = #session.qSelectedHouse.iHouse_ID#
	</cfquery>

	<cfscript> //Set variables for house number and invoicenumber
		HouseNumber = session.HouseNumber; iInvoiceNumber = '#variables.HouseNumber#' & GetNextInvoice.iNextInvoice;
	</cfscript>

	<!--- Create New Invoice --->
	<!--- 25575 - 6/11/2010 - rts - Respite Invoice Creation --->
	<cfif TenantInfo.iResidencyType_ID neq 3>
		<cfquery name="NewInvoice" datasource="#application.datasource#">
		insert into InvoiceMaster
		(iInvoiceNumber ,cSolomonKey ,bMoveInInvoice ,bFinalized ,cAppliesToAcctPeriod ,cComments ,dtAcctStamp ,iRowStartUser_ID ,dtRowStart)
		values
		('#variables.iInvoiceNumber#' ,'#Tenant.cSolomonKey#' ,1 ,null ,'#CurrPeriod#' ,null ,#CreateODBCDateTime(session.AcctStamp)# ,#session.UserID# ,getdate()	)
		</cfquery>
	<cfelse>
	<!---QUERIES  --->
		<cfquery name="TenantDates" datasource="#application.datasource#">
			select dateadd(dd,1,'#TenantInfo.dtMoveOutProjectedDate#') as NewPMODate
			,convert(varchar(10),(dateadd(dd,0,'#TenantInfo.dtRentEffective#')),101) as NextStartDate
		</cfquery>
		<cfset NextStartDate = TenantDates.NextStartDate>
		<cfquery name="AdjustEndPMODatemin" datasource="#application.datasource#">
			select dateadd(ss,-1,'#TenantDates.NewPMODate#') as PMODate
		</cfquery>
		<cfset PMODate = AdjustEndPMODatemin.PMODate>
		<cfquery name="GetQuantityForNewINV" datasource="#application.datasource#">
			select datediff(dd,'#NextStartDate#', '#PMODate#') + 1 as Days
		</cfquery>
		<cfquery name="GetQuantityForNewINVCare" datasource="#application.datasource#">
		select datediff(dd,'#TenantInfo.dtMoveIn#', '#PMODate#') + 1 as CareDays
		</cfquery>	
				
		<cfquery name="NewInvoice" datasource="#application.datasource#">
			insert into InvoiceMaster
			(iInvoiceNumber ,cSolomonKey ,bMoveInInvoice ,bFinalized ,cAppliesToAcctPeriod 
			,dtInvoiceStart,dtInvoiceEnd
			,cComments ,dtAcctStamp ,iRowStartUser_ID ,dtRowStart)
			values
			('#variables.iInvoiceNumber#' ,'#Tenant.cSolomonKey#' ,1 ,null ,'#CurrPeriod#' 
			,'#TenantInfo.dtRentEffective#','#AdjustEndPMODatemin.PMODate#'
			,null ,#CreateODBCDateTime(session.AcctStamp)# ,#session.UserID# ,getdate()	)
		</cfquery>
	</cfif>

	<!--- Calcluate next invoice number --->
	<cfset iNewNextInvoice = getNextInvoice.iNextInvoice + 1>

	<!--- Write next invoice to control table --->
	<cfquery name="HouseNumberControl" datasource="#application.datasource#">
		update HouseNumberControl
		set iNextInvoice = #variables.iNewNextInvoice# ,iRowStartUser_ID = #session.USERID# ,dtRowStart = getdate()
		where iHouse_ID = #session.qSelectedHouse.iHouse_ID#
	</cfquery>
	
	<cfquery name="GetMIAutoApplyCharges" datasource="#APPLICATION.datasource#">
		select c.*,isnull(ct.bIsDaily,'0') as bIsDaily 
		from Charges c 
		join ChargeType ct on (ct.iChargeType_ID = c.iChargeType_ID)
		where c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		and c.cChargeSet = (select cs.cName from Chargeset cs join House h on (h.iChargeSet_ID = cs.iChargeSet_ID and h.iHouse_ID = #session.qSelectedHouse.iHouse_ID#))
		and c.dtRowDeleted is null
		and getdate() between c.dteffectivestart and c.dteffectiveend		
		and c.iChargeType_ID not in (91,89,7,96)
		<!--- and c.mAmount > 0 --->
		and c.bIsMoveInCharge = 1
	</cfquery>
<cfoutput>
TenantInfo.iResidencyType_ID:: #TenantInfo.iResidencyType_ID# TenantInfo.iResidencyType_ID:: #TenantInfo.iResidencyType_ID#
</cfoutput> 
 
	<!--- Retrieve the new created iInvoicemaster_ID --->
	<cfquery name="NewMasterID" datasource="#application.datasource#">
		select iInvoiceMaster_ID from InvoiceMaster	where dtRowDeleted is null
		and cSolomonKey = '#Tenant.cSolomonKey#' 
		<cfif TenantInfo.iResidencyType_ID neq 3>
			and bMoveInInvoice is not null 
		</cfif>
		and bFinalized is null
		and iInvoiceNumber = '#variables.iInvoiceNumber#'
	</cfquery>

	<!--- Set varailbe for the new iInvoiceMaster_ID --->
	<cfset iInvoiceMaster_ID = NewMasterID.iInvoiceMaster_ID>

<cfelse>
		<cfquery name="TenantDates" datasource="#application.datasource#">
			select dateadd(dd,1,'#TenantInfo.dtMoveOutProjectedDate#') as NewPMODate
			,convert(varchar(10),(dateadd(dd,0,'#TenantInfo.dtRentEffective#')),101) as NextStartDate
		</cfquery>
		<cfquery name="AdjustEndPMODatemin" datasource="dbquery">
			select dateadd(ss,-1,'#TenantDates.NewPMODate#') as PMODate
		</cfquery>
		<cfset PMODate = AdjustEndPMODatemin.PMODate>
		<cfquery name="GetQuantityForNewINV" datasource="#application.datasource#">
			select datediff(dd,'#TenantInfo.dtRentEffective#', '#PMODate#') + 1 as Days
		</cfquery>
		<cfquery name="GetQuantityForNewINVCare" datasource="#application.datasource#">
		select datediff(dd,'#TenantInfo.dtMoveIn#', '#PMODate#') + 1 as CareDays
		</cfquery>	
				
	<cfscript>
		//Set variable for the new iInvoiceMaster_ID And the InvoiceNumber
		iInvoiceMaster_ID = MoveInInvoiceCheck.iInvoiceMaster_ID;
		iInvoiceNumber = '#MoveInInvoiceCheck.iInvoiceNumber#';
	</cfscript>
</cfif>

<cfquery name='qHistSet' datasource="#application.datasource#">
	select distinct tendtRowStart, cSLevelTypeSet, tendtRowEnd, tendtRowDeleted
	from rw.vw_tenant_history_with_state
	where iTenant_ID = #TenantInfo.iTenant_ID#
	and '#TenantInfo.dtMoveIn#' between tenDtRowStart and tendtRowEnd
	order by tenDtRowStart desc
</cfquery>

<!--- Calculate ServiceLevel --->
<cfquery name="SLevel" datasource="#application.datasource#">
	select 	cDescription, cSLevelTypeSet, iSLevelType_ID, iSPointsMin, iSPointsMax
	from 	SLevelType where dtRowDeleted is null
	and (iSPointsMin <= #form.iSPoints# and iSPointsMax >= #form.iSPoints#)
	<cfif qHistSet.RecordCount gt 0 and qHistSet.cSLevelTypeSet neq '' and 1 eq 0>
		and cSLevelTypeSet = #qHistSet.cSLevelTypeSet#
	<cfelseif trim(TenantInfo.cSLevelTypeSet) neq "" and TenantInfo.cSLevelTypeSet neq 0>
		and cSLevelTypeSet = #TenantInfo.cSLevelTypeSet#
	<cfelse>
		and cSLevelTypeSet = #session.qselectedhouse.cSLevelTypeSet#
	</cfif>
</cfquery>

<!--- Do not Charge Standard Rent for Medicaid. For Mediciad it must be keyed in manually --->
<cfset Occupancy = 1>
<cfif TenantInfo.iResidencyType_ID neq 2>
	<cfquery name="FindOccupancy" datasource="#application.datasource#">
	select t.iTenant_ID, iResidencyType_ID, ST.cDescription as Level, ts.dtMoveIn, ts.dtMoveOut
	from AptAddress AD
	join TenantState ts on (ts.iAptAddress_ID = ad.iAptAddress_ID and ts.dtRowDeleted is null)
	join Tenant T	on (t.iTenant_ID = ts.iTenant_ID and t.dtRowDeleted is null)
	join SLevelType ST on (ST.cSLevelTypeSet = t.cSLevelTypeSet and ts.iSPoints between ST.iSPointsMin and ST.iSPointsMax)
	where ad.dtRowDeleted is null and ts.iTenantStateCode_ID = 2
	and ad.iAptAddress_ID = #form.iAptAddress_ID#	and ts.iTenant_ID <> #Tenant.iTenant_ID#
	</cfquery>

	<cfif FindOccupancy.RecordCount gt 0>
		<cfif FindOccupancy.Level GTE SLevel.cDescription or (FindOccupancy.iResidencyType_ID eq 1 and TenantInfo.iResidencyType_ID eq 2)
			or (FindOccupancy.dtMoveIn LTE createODBCDateTime(variables.dtMovein))>
			<cfset Occupancy = 2>
		<cfelse> <cfset Occupancy = 1> </cfif>
	<cfelse> <cfset Occupancy = 1> </cfif>

	<cfquery name="CheckCompanionFlag" datasource="#application.datasource#">
		select bIsCompanionSuite from AptAddress AD
		join AptType AT on (ad.iAptType_ID = at.iAptType_ID and at.dtRowDeleted is null)
		where ad.dtRowDeleted is null and ad.iAptAddress_ID = #form.iAptAddress_ID#
	</cfquery>
	<cfif checkCompanionFlag.bIsCompanionSuite eq 1> <cfset Occupancy = 1> </cfif>
<!---here2:<cfdump var="#TenantInfo.cChargeSet#' 
		  ,#TenantInfo.iResidencyType_ID#
		 , #session.qSelectedHouse.iHouse_ID# 
		 , #TenantInfo.iAptType_ID#
		 , #MonthList[i]# 
		 , #TenantInfo.iProductLine_ID#
		 , #MonthList[i]#">--->
<cfif TenantInfo.iResidencyType_ID neq 3>
<cfloop from=1 TO='#ArrayLen(MonthList)#' step='1' index=I>
 
	<!--- create Rent InvoiceDetail --->
	<cfquery name="StandardRent" datasource="#application.datasource#">
		select 
			 c.cDescription 
			,c.mAmount 
			,c.iQuantity 
			,ct.iChargeType_ID
		from charges c
		inner join chargeType ct on (ct.iChargeType_ID = c.iChargeType_ID and ct.dtRowDeleted is null)
		where c.dtRowDeleted is null
		<cfif TenantInfo.cChargeSet neq ""> 
			and c.cChargeSet = '#TenantInfo.cChargeSet#' 
		<cfelse> 
			and c.cChargeSet is null 
		</cfif>
		and ct.bIsRent is not null
		<cfif Occupancy eq 1> 
			and c.iOccupancyPosition = 1
			and ct.bAptType_ID is not null
		<cfelse>
			and c.iOccupancyPosition = 2
			and ct.bAptType_ID is null		
		</cfif>
		and ct.bIsDiscount is null 
		and ct.bIsRentAdjustment is null 
		and ct.bIsMedicaid is null
		 
		and ct.bIsDaily is null 
		and ct.bSLevelType_ID is null
		and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID#
		and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID# 
		and c.iAptType_ID = #TenantInfo.iAptType_ID#
		and dtEffectiveStart <= #MonthList[i]# 
		and c.iproductline_id = #TenantInfo.iProductLine_ID#
		and dtEffectiveEnd >= #MonthList[i]#
		order by c.dtRowStart Desc
	</cfquery>

	<cfif StandardRent.RecordCount eq '0'>
			<cfoutput>StandardRent.RecordCount :: #StandardRent.RecordCount#</cfoutput> 
		<!--- MLAW 08/22/2006 Add iProductline_ID filter --->
		<cfquery name="StandardRent" datasource="#application.datasource#">
		select 
			 c.iChargeType_ID
			,c.iQuantity
			,c.cDescription
			,c.mAmount
		from 
			charges c 
			inner join 	residencytype rt on	c.iResidencyType_ID = rt.iResidencyType_ID
			left outer join	SLevelType ST on c.iSLevelType_ID = ST.iSLevelType_ID
			inner join chargeType ct	 on	ct.iChargeType_ID = c.iChargeType_ID
		where 
			c.dtRowDeleted is null 
		and ct.dtRowDeleted is null
		and IsNull(c.iOccupancyPosition,1) = #Occupancy#
		<cfif TenantInfo.cChargeSet neq ""> 
			and c.cChargeSet = '#TenantInfo.cChargeSet#' 
		<cfelse> 
			and c.cChargeSet is null 
		</cfif>
		<cfif TenantInfo.iResidencyType_ID neq 3>
			<cfif Occupancy neq 2> 
			and c.iAptType_ID = #TenantInfo.iAptType_ID# 
			<cfelse> 
			and c.iAptType_ID is null 
			</cfif>
			and c.iSLevelType_ID = #SLevel.iSLevelType_ID# 
			and ct.bIsDaily is null
		</cfif>
		and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID#
		and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		and ((iCharge_id = (select 
							top 1 iCharge_id 
						from rw.vw_charges_history 
						where ihouse_id = #session.qSelectedHouse.iHouse_ID# 
						and #MonthList[i]# between dtrowstart 
						and isNull(dtrowend,getdate())
						and iChargeType_ID = c.iChargeType_ID 
						and iAptType_ID = c.iAptType_ID 
						and cSLevelDescription = c.cSLevelDescription 
						and iSLevelType_ID = #SLevel.iSLevelType_ID# 
						and iproductline_id = #TenantInfo.iProductLine_ID#
						and dtRowDeleted is null)) 
				or( dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]#) )
		and c.iproductline_id = #TenantInfo.iProductLine_ID#
		order by c.dtRowStart Desc
		</cfquery>
	</cfif>
	<cfoutput>here:  #form.iTenant_ID#</cfoutput>
<!---<cfdump var="#TenantInfo#">--->
	<cfquery name="DailyRent" datasource="#application.datasource#">
		select c.cDescription ,c.mAmount ,c.iQuantity ,ct.iChargeType_ID
		from charges c
		inner join 	chargeType ct on (ct.iChargeType_ID = c.iChargeType_ID and ct.dtRowDeleted is null)
		where c.dtRowDeleted is null
		<cfif TenantInfo.cChargeSet neq ""> 
			and c.cChargeSet = '#TenantInfo.cChargeSet#' 
		<cfelse> 
			and c.cChargeSet is null 
		</cfif>
		and ct.bIsRent is not null
		and ct.bIsDiscount is null 
		and ct.bIsRentAdjustment is null 
		and ct.bIsMedicaid is null
		<cfif TenantInfo.iResidencyType_ID eq 3>
			and (c.iAptType_ID is null or c.iAptType_ID = #TenantInfo.iAptType_id#)
			
			<cfif Occupancy eq 1>
				and ct.bIsDaily is not null and ct.bSLevelType_ID is null
			<cfelse>
				and c.iAptType_ID is null
			</cfif>
		</cfif>
		and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# 
		and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		
		<cfif Occupancy eq 1>
			and c.iOccupancyPosition = 1 
			and c.iAptType_ID = #TenantInfo.iAptType_ID#
		<cfelse>
			and c.iOccupancyPosition = 2
		</cfif>

		and dtEffectiveStart <= #MonthList[i]# 
		and dtEffectiveEnd >= #MonthList[i]#
		and	c.iproductline_id = #TenantInfo.iProductLine_ID#
		order by c.dtRowStart Desc
	</cfquery>

	<!--- Stop Processing if no Rent records found --->
	<cfif DailyRent.Recordcount eq 0>
		<cfquery name="GetDescriptions" datasource="#application.datasource#">
			SELECT P.cDescription AS ProductLine
				,R.cDescription AS ResidencyType
				,A.cDescription AS AptType
			FROM
				 ProductLine P
				,ResidencyType R
				,AptType A
			WHERE	P.iProductLine_ID = #TenantInfo.iProductLine_ID#
			AND	R.iResidencyType_ID = #TenantInfo.iResidencyType_ID#
			AND A.iAptType_ID = #TenantInfo.iAptType_id#
		</cfquery>
		
		<strong>
		<cfoutput>
			<font face="arial" size="4" color="red">There was no r&b charge found for this tenant.</font><br><br>
			Pleast contact AR and tell them that a charge needs to be added for:
			<ul>
				<li><font face="arial" size="1"><strong>Apartment Type</strong>: #GetDescriptions.AptType#</font></li>
				<li><font face="arial" size="1"><strong>Residency Type</strong>: #GetDescriptions.ResidencyType#</font></li>
				<li><font face="arial" size="1"><strong>Product Line</strong>: #GetDescriptions.ProductLine#</font></li>
				<li><font face="arial" size="1"><strong>Charge Set</strong>: <cfif TenantInfo.cChargeSet eq "">
																				NULL (HR may need to call TIPS Support)
																			 <cfelse>#TenantInfo.cChargeSet#</cfif></font></li>
			</ul>
			<a href="javaScript:window.history.go(-1)"><font face="arial" size="1">Click Here</font></a>
			<font face="arial" size="1">to return to the previous page.</font>
		</strong>
		</cfoutput>
		<cfabort>
	</cfif>	

	<cfquery name='qResidentCare' datasource="#application.datasource#">
		select c.cDescription ,c.mAmount ,c.iQuantity ,ct.iChargeType_ID
		from charges c
		join chargeType ct on (ct.iChargeType_ID = c.iChargeType_ID and ct.dtRowDeleted is null)
		and ct.bIsRent is not null and ct.bIsMedicaid is null and ct.bIsDiscount is null
		and ct.bIsRentAdjustment is null
		where c.dtRowDeleted is null and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		<cfif TenantInfo.cChargeSet neq ''>and c.cChargeSet = '#TenantInfo.cChargeSet#'<cfelse>and c.cChargeSet is null</cfif>
		and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# and c.iAptType_ID is null and iSLevelType_ID = #SLevel.iSLevelType_ID# and ct.bIsDaily is null
		and iOccupancyPosition is null and dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]#
	</cfquery>

	<cfquery name='qDailyCare' datasource="#application.datasource#">
		select c.cDescription ,c.mAmount ,c.iQuantity ,ct.iChargeType_ID
		from charges c
		join chargeType ct on (ct.iChargeType_ID = c.iChargeType_ID and ct.dtRowDeleted is null)
		and ct.bIsRent is not null and ct.bIsMedicaid is null and ct.bIsDiscount is null
		and ct.bIsRentAdjustment is null
		where c.dtRowDeleted is null and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		<cfif TenantInfo.cChargeSet neq ''>and c.cChargeSet = '#TenantInfo.cChargeSet#'<cfelse>and c.cChargeSet is null</cfif>
		and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# and c.iAptType_ID is null and iSLevelType_ID = #SLevel.iSLevelType_ID# and ct.bIsDaily is not null
		and iOccupancyPosition is null and dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]#
	</cfquery>

  	<cfif SESSION.qSelectedHouse.iopsarea_ID is not 44>	
	<cfscript>
		DaysInHouse = (DaysInMonth(TenantInfo.dtMoveIn) - Day(TenantInfo.dtMoveIn)) + 1;
		if ((DaysInHouse GTE 30 or (DaysInHouse eq DaysInMonth(MonthList[i])) OR
			(Month(TenantInfo.dtMoveIn) eq 2 and variables.DaysInHouse eq DaysInMonth(TenantInfo.dtMoveIn)))
			and TenantInfo.iResidencyType_ID neq 3)
		{ FullMonth=1; DaysInHouse = 30; }
		else { FullMonth=0; }

		switch (billing){
			case 'daily':
				ConvertedDays=ChargeDays[i];
				ConvertedDescription=  left(ucase(left(TenantInfo.cFirstName,1)) & '.' & TenantInfo.cLastName & ': ' & DailyRent.cDescription,50);
				ConvertedChargeType=DailyRent.iChargeType_ID;
				ConvertedAmount=DailyRent.mAmount;
			//	ConvertedCareDays=CareChargeDays[i];				
				ConvertedCareAmount=qDailyCare.mAmount;
				ConvertedCareChargeType=qDailyCare.iChargeType_ID;
				ConvertedCareDescription= left(ucase(left(TenantInfo.cFirstName,1)) & '.' & TenantInfo.cLastName & ': ' & qDailyCare.cDescription,50);
			break;
			case 'monthly':
				if (TenantInfo.iResidencyType_ID neq 3 and (DaysInMonth(MonthList[i]) - Day(TenantInfo.dtMoveIn) +1 GTE 30 or chargeDays[i] GTE 30 or chargeDays[i] eq DaysInMonth(MonthList[i])) ) {
					ProrateDays=0; } else{ ProrateDays=1; }
				if(ProrateDays eq 0){
					ConvertedDays=1;
					ConvertedDescription=StandardRent.cDescription;
					ConvertedAmount=StandardRent.mAmount;
					ConvertedChargeType=StandardRent.iChargeType_ID;
					ConvertedCareAmount=qResidentCare.mAmount;
					ConvertedCareChargeType=qResidentCare.iChargeType_ID;
					ConvertedCareDescription=qResidentCare.cDescription;
				}
				else{
						ConvertedDays=ChargeDays[i];
						ConvertedDescription=DailyRent.cDescription;
						ConvertedChargeType=DailyRent.iChargeType_ID;
						ConvertedAmount=DailyRent.mAmount;
						ConvertedCareAmount=qDailyCare.mAmount;
						ConvertedCareChargeType=qDailyCare.iChargeType_ID;
						ConvertedCareDescription=qDailyCare.cDescription;
				}
			break;
			default: convertedDays='AAA';
		}
	</cfscript>
	<cfelse>
	<cfscript>
		DaysInHouse = (DaysInMonth(TenantInfo.dtMoveIn) - Day(TenantInfo.dtMoveIn)) + 1;
		if ((DaysInHouse GTE 30 or (DaysInHouse eq DaysInMonth(MonthList[i])) OR
			(Month(TenantInfo.dtMoveIn) eq 2 and variables.DaysInHouse eq DaysInMonth(TenantInfo.dtMoveIn)))
			and TenantInfo.iResidencyType_ID neq 3)
		{ FullMonth=1; DaysInHouse = 30; }
		else { FullMonth=0; }

		switch (billing){
			case 'daily':
				ConvertedDays=ChargeDays[i];
				ConvertedDescription=  left(ucase(left(TenantInfo.cFirstName,1)) & '.' & TenantInfo.cLastName & ': ' & DailyRent.cDescription,50);
				ConvertedChargeType=DailyRent.iChargeType_ID;
				ConvertedAmount=DailyRent.mAmount;
			 	ConvertedCareDays=CareChargeDays[i];				
				ConvertedCareAmount=qDailyCare.mAmount;
				ConvertedCareChargeType=qDailyCare.iChargeType_ID;
				ConvertedCareDescription= left(ucase(left(TenantInfo.cFirstName,1)) & '.' & TenantInfo.cLastName & ': ' & qDailyCare.cDescription,50);
			break;
			case 'monthly':
				if (TenantInfo.iResidencyType_ID neq 3 and (DaysInMonth(MonthList[i]) - Day(TenantInfo.dtMoveIn) +1 GTE 30 or chargeDays[i] GTE 30 or chargeDays[i] eq DaysInMonth(MonthList[i])) ) {
					ProrateDays=0; } else{ ProrateDays=1; }
				if(ProrateDays eq 0){
					ConvertedDays=1;
					ConvertedDescription=StandardRent.cDescription;
					ConvertedAmount=StandardRent.mAmount;
					ConvertedChargeType=StandardRent.iChargeType_ID;
					ConvertedCareAmount=qResidentCare.mAmount;
					ConvertedCareChargeType=qResidentCare.iChargeType_ID;
					ConvertedCareDescription=qResidentCare.cDescription;
				}
				else{
						ConvertedDays=ChargeDays[i];
						ConvertedDescription=DailyRent.cDescription;
						ConvertedChargeType=DailyRent.iChargeType_ID;
						ConvertedAmount=DailyRent.mAmount;
						ConvertedCareAmount=qDailyCare.mAmount;
						ConvertedCareChargeType=qDailyCare.iChargeType_ID;
						ConvertedCareDescription=qDailyCare.cDescription;
				}
			break;
			default: convertedDays='AAA';
		}
	</cfscript>
	</cfif>
	
	
	
	<cfif DailyRent.mAmount neq "">
		<cfset DailyRate = DailyRent.mAmount>
	<cfelseif TenantInfo.iResidencyType_ID neq 3>
		<B style="font-size:18;">The Daily Rate is missing for this type of Applicant.</B><br/>
		<cfoutput>
			<A style="color:red;font-size:18;" HREF="MoveInForm.cfm?ID=#TenantInfo.iTenant_ID#"> click Here to Return to the Move In form. </A>
			<CFABORT>
		</cfoutput>
	<cfelse>
		<cfset DailyRate = StandardRent.mAmount>
	</cfif>

	<cfscript>
		Value = StandardRent.mAmount;
		if (TenantInfo.iResidencyType_ID neq 3) {ProrateAmount = (variables.DailyRate * variables.DaysInHouse);}
		else {ProrateAmount = StandardRent.mAmount;}
	</cfscript>
	

	<!--- Prorated Rent --->
	<!--- Added by Katie: do a comparison between the converted amount and the amount currently in the InvoiceDetail table in case the user updated the private or respite R&B rate for that resident in the Move In credits screen.  If they are different, keep the InvoiceDetail amount --->
	Old convertedAmount (House Rate) is <cfoutput>#ConvertedAmount#<br/>ChargeType: #ConvertedChargeType#</cfoutput><br/>
	<cfif convertedChargeType is "89" or convertedChargeType is "7">This is a RandB charge<br/>
		<cfquery name="getRBInvoiceDetail" datasource="#application.datasource#" maxrows="1">
		select mAmount from InvoiceDetail
		where dtRowDeleted is not null and iTenant_ID = #TenantInfo.iTenant_ID#
		and iChargeType_ID = #ConvertedChargeType#
		and dtrowdeleted is null
		order by iInvoiceDetail_ID DESC
		</cfquery>

		<cfif getRBInvoiceDetail.recordcount is not 0>
			<cfif convertedAmount is not getRBInvoiceDetail.mAmount>
				<!--- added by katie 9/14/05: Only do this if the Tenant chargeSet or Apt Number hasn't changed --->
				<cfif (PrevInfo.cChargeSet is #Tenant.cChargeset#) AND (PrevInfo.iAptAddress_ID is #form.iAptAddress_ID#)>
					<cfset convertedAmount = getRBInvoiceDetail.mAmount>New converted Amount since the RandB rate was independantly updated for this resident (and neither the chargeset or room number changed): <cfoutput>#ConvertedAmount#.<BR>new Chargeset: #Tenant.cChargeSet# Old chargeset: #PrevInfo.cChargeset# newAptAddress_ID: #form.iAptAddress_ID# Old AptAddress_ID: #PrevInfo.iAptAddress_ID# <BR></cfoutput>
				<cfelse>
					And older different rate existed, but since the chargeset or room number has changed, the R&B rate will be the new rate: <cfoutput>#convertedAmount#.<BR>new Chargeset: #Tenant.cChargeSet# Old chargeset: #PrevInfo.cChargeset# newAptAddress_ID: #form.iAptAddress_ID# Old AptAddress_ID: #PrevInfo.iAptAddress_ID# <BR></cfoutput>
				</cfif>
			</cfif>
		</cfif>
	</cfif>

	<cfquery name="ProrateRent" datasource="#application.datasource#">
		insert into InvoiceDetail
		(iInvoiceMaster_ID ,iTenant_ID ,iChargeType_ID ,cAppliesToAcctPeriod ,bIsRentAdj ,dtTransaction ,iQuantity ,cDescription ,mAmount
		 ,cComments ,dtAcctStamp ,iRowStartUser_ID ,dtRowStart )
		values
		(#iInvoiceMaster_ID# ,#TenantInfo.iTenant_ID# ,#ConvertedChargeType# ,'#DateFormat(MonthList[i],'yyyymm')#' ,null ,getdate()
			,#ConvertedDays# ,'#trim(ConvertedDescription)#' ,#ConvertedAmount# ,'RENT U' ,#CreateODBCDateTime(session.AcctStamp)# ,0 ,getdate() )
	</cfquery>

	<cfif  (tenant.iproductline_id neq 2 and SLevel.iSPointsMin neq '0' and SLevel.iSPointsMax neq '0')
		and (IsDefined('qResidentCare.RecordCount') and IsDefined('qDailyCare.RecordCount')
		and (
				(tenant.iproductline_id neq 2 and Tenant.cBillingType is 'M' and qResidentCare.RecordCount gt 0)
				or (tenant.iproductline_id neq 2 and Tenant.cBillingType is 'D' and qDailyCare.RecordCount gt 0)
				)
		)>
		<!--- ResidentCare  --->
		<cfquery name="ResidentCare" datasource="#application.datasource#">
			insert into InvoiceDetail
			(iInvoiceMaster_ID ,iTenant_ID ,iChargeType_ID ,cAppliesToAcctPeriod ,bIsRentAdj ,dtTransaction ,iQuantity ,cDescription, mAmount 
			,cComments ,dtAcctStamp ,iRowStartUser_ID ,dtRowStart )
				values
			(#iInvoiceMaster_ID# 
				,#TenantInfo.iTenant_ID# 
				,#ConvertedCareChargeType# 
				,<cfif SESSION.qSelectedHouse.iopsarea_ID is 44> 
					'#DateFormat(CareMonthList[i],'yyyymm')#' 
					,null 
					,getdate()
					,#ConvertedCareDays# 
				<cfelse>
					'#DateFormat(MonthList[i],'yyyymm')#'
					,null 
					,getdate()
					,#ConvertedDays# 					
				</cfif> 			
				<!--- 			,'#DateFormat(CareMonthList[i],'yyyymm')#' 
				,null 
				,getdate()
				,#ConvertedCareDays#  --->
				,'#ConvertedCareDescription#' 
				,#ConvertedCareAmount# 
				,'CARE U - ' 
				,#CreateODBCDateTime(session.AcctStamp)# 
				,0 
				,<cfif GetMIAutoApplyCharges.iChargeType_ID is 91>
					#CreateODBCDateTime(TenantInfo.dtMoveIn)#
				<cfelse>
					#CreateODBCDateTime(TenantInfo.dtRentEffective)#
				</cfif>	<!--- getdate()  --->
				)
		</cfquery>
	</cfif>
	<!--- 35227 RTS - AUTO APPLY RECURRING CHARGES  --->
		<cfif TenantInfo.iResidencyType_ID eq 1  AND Occupancy EQ 1>
		 <br />		<cfset thisacctmonth = #DateFormat(MonthList[i],'yyyymm')#>
		<cfif GetMIAutoApplyCharges.RecordCount gt 0>
		 		 <br /> 
			<cfloop query="GetMIAutoApplyCharges">
				 <br />	<cfdump var="1: #GetMIAutoApplyCharges.iChargeType_ID#">
						<cfif GetMIAutoApplyCharges.iChargeType_ID neq 69>
						<!--- RECURRING PART --->
						<br /><cfdump var="2: #GetMIAutoApplyCharges.iChargeType_ID#"> 		
						<cfquery name="CheckforRecurringCharge" datasource="#application.datasource#">
								select * from RecurringCharge rc
								where rc.iTenant_ID = #TenantInfo.iTenant_ID#
								and rc.iCharge_ID = #GetMIAutoApplyCharges.iCharge_ID#
								and rc.dtRowDeleted is null
							</cfquery>
							<br /><cfif CheckforRecurringCharge.RecordCount lt 1>
						<br />	<cfdump var="3: #GetMIAutoApplyCharges.iChargeType_ID# :: #CheckforRecurringCharge.RecordCount#">
								<cfquery name="AddAutoApplyRecurringCharge" datasource="#application.datasource#">
								insert into RecurringCharge
									(iTenant_ID,iCharge_ID,dtEffectiveStart
									,dtEffectiveEnd
									,iQuantity,cDescription
									,mAmount
									<!---,cComments--->
									,dtAcctStamp
									,iRowStartUser_ID
									,dtRowStart,bIsDaily)
								values
									(#TenantInfo.iTenant_ID#,#GetMIAutoApplyCharges.iCharge_ID#,getdate()
									,'12/31/2020'
									,'1','#GetMIAutoApplyCharges.cDescription#'
									,#GetMIAutoApplyCharges.mAmount#
									<!---,'Created During MoveIn - AutoApply'--->
									,#CreateODBCDateTime(session.AcctStamp)#
									,#session.userid#
									,<cfif GetMIAutoApplyCharges.iChargeType_ID is 91>
										#CreateODBCDateTime(TenantInfo.dtMoveIn)#
									<cfelse>
										#CreateODBCDateTime(TenantInfo.dtRentEffective)#
									</cfif>	<!--- getdate() --->
									,#GetMIAutoApplyCharges.bIsDaily#
									)
								</cfquery>
								<!--- Then get info on what was just inserted for invoice  --->
								<cfquery name="GetNewRecurringforInvoice" datasource="#application.datasource#">
									Select rc.* from RecurringCharge rc
									where rc.iTenant_ID = #TenantInfo.iTenant_ID#
									and rc.iCharge_ID = #GetMIAutoApplyCharges.iCharge_ID#
									and rc.dtRowDeleted is null 
								</cfquery>
							</cfif>
					<!--- INVOICE PART --->
							<cfquery name="CheckforInvDtlRecord" datasource="#application.datasource#">
								select id.* from invoicedetail id 
								where id.iTenant_ID = #TenantInfo.iTenant_ID#
								and id.iChargeType_ID = #GetMIAutoApplyCharges.iChargeType_ID#
								and id.cAppliesToAcctPeriod = '#DateFormat(MonthList[i],'yyyymm')#'
								and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID#
								<cfif CheckforRecurringCharge.RecordCount gt 0>
								and id.iRecurringCharge_ID = '#CheckforRecurringCharge.iRecurringCharge_ID#' 
								<cfelse>	
								and id.iRecurringCharge_ID = '#GetNewRecurringforInvoice.iRecurringCharge_ID#'
								</cfif>
								and id.dtRowDeleted is null
							</cfquery>
							<cfif CheckforInvDtlRecord.RecordCount lt 1>
							<br /><cfdump var="4: #GetMIAutoApplyCharges.iChargeType_ID# :: #CheckforRecurringCharge.RecordCount# :: #CheckforInvDtlRecord.RecordCount#">
								<cfquery name="InsertAutoApplyCharge" datasource="#application.datasource#">
									insert into InvoiceDetail
									(iInvoiceMaster_ID ,iTenant_ID ,iChargeType_ID 
									,cAppliesToAcctPeriod ,dtTransaction 
									,iQuantity 
									,cDescription
									, mAmount 
									 ,cComments 
									,dtAcctStamp 
									,iRowStartUser_ID ,dtRowStart,iRecurringCharge_ID )
									values
									(#variables.iInvoiceMaster_ID# ,#TenantInfo.iTenant_ID# ,#GetMIAutoApplyCharges.iChargeType_ID#
									,'#DateFormat(MonthList[i],'yyyymm')#',getdate()
									<cfif GetMIAutoApplyCharges.iChargeType_ID is 91>
										<cfif GetMIAutoApplyCharges.bIsDaily eq 1>,#ConvertedCareDays# <cfelse>,1 </cfif>
									<cfelse>
										<cfif GetMIAutoApplyCharges.bIsDaily eq 1>,#ConvertedDays# <cfelse>,1 </cfif>
									</cfif>
									,'#GetMIAutoApplyCharges.cDescription#'
									,#GetMIAutoApplyCharges.mAmount#
								 ,'Recurring Created at MoveIn U' 
									,#CreateODBCDateTime(session.AcctStamp)#
									,0
									
									,<cfif GetMIAutoApplyCharges.iChargeType_ID is 91>
										#CreateODBCDateTime(TenantInfo.dtMoveIn)#
									<cfelse>
										#CreateODBCDateTime(TenantInfo.dtRentEffective)#
									</cfif>	
									<!--- getdate() --->
									,<cfif CheckforRecurringCharge.RecordCount gt 0>
										#CheckforRecurringCharge.iRecurringCharge_ID# 
									<cfelse>	
										#GetNewRecurringforInvoice.iRecurringCharge_ID#
									</cfif>
									)
								</cfquery>
							</cfif>
						<cfelse><!--- Then ChargeType_ID is 69 (new resident fee). 1 time charge --->
						 					
							<cfquery name="CheckforInvDtlRecord" datasource="#application.datasource#">
								select id.* from invoicedetail id 
								where id.iTenant_ID = #TenantInfo.iTenant_ID#
								and id.iChargeType_ID = #GetMIAutoApplyCharges.iChargeType_ID#
								and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID#
								and id.dtRowDeleted is null
							</cfquery>
						 
							<cfoutput>	
							<cfif (Isdefined ('form.newNRFee') and (form.newNRFee gt 0))>
								<br />		newNRFee:	#newNRFee#
								<cfset thisNRFee = form.newNRFee>
							<cfelse>
								<cfset 	thisNRFee = 		#GetMIAutoApplyCharges.mAmount#>
								GetMIAutoApplyCharges.mAmount:	#GetMIAutoApplyCharges.mAmount#
							</cfif>	
							</cfoutput>							
									 
							<cfif CheckforInvDtlRecord.RecordCount lt 1>
							 
							 	<cfquery name="InsertAutoApplyCharge" datasource="#application.datasource#">
									insert into InvoiceDetail  
			 					(iInvoiceMaster_ID 
									,iTenant_ID 
									,iChargeType_ID 
									,cAppliesToAcctPeriod 
									,dtTransaction 
									,iQuantity 
									,cDescription
									, mAmount 
									 ,cComments 
									,dtAcctStamp 
									,iRowStartUser_ID 
									,dtRowStart)
									values
									(#variables.iInvoiceMaster_ID# 
									,#TenantInfo.iTenant_ID# 
									,#GetMIAutoApplyCharges.iChargeType_ID#
									,'#DateFormat(MonthList[i],'yyyymm')#'
									,getdate()
									,1 
									,'#GetMIAutoApplyCharges.cDescription#'
									,#thisNRFee#
									<!--- ,#GetMIAutoApplyCharges.mAmount# 
									<cfif (Isdefined ('newNRFee') and (newNRFee gt 0))>
									,#newNRFee#
									<cfelse>
									,#GetMIAutoApplyCharges.mAmount#
									</cfif>--->							
									 ,'AutoApply Created at MoveIn - NRF' 
									,#CreateODBCDateTime(session.AcctStamp)#
									,0,getdate() 
									)
								 </cfquery> 
							<cfelse>	 
							</cfif>
						</cfif>
					</cfloop>
				</cfif>
		</cfif>

</cfloop>
<cfelseif TenantInfo.iResidencyType_ID eq 3> <!--- Resident is respite--->
	<cfinclude template="MoveInRespiteProcess.cfm">
</cfif>
</cfif>
 
<cfquery name="qHouseDeposits" datasource="#application.datasource#">
	select ct.* from chargeType ct
	join charges c on (c.iChargeType_ID = ct.iChargeType_ID)
	where ct.dtRowDeleted is null and bIsDeposit is not null and bIsRefundable is not null
	and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
</cfquery>

<!--- Loop over existing deposit charges --->

<cfoutput>
	<cfloop index="Field" list="#form.fieldnames#" delimiters=",">
		<cfif FindNoCase('Deposit', Field, 1) gt 0>
			<cfquery name="qGetDepositCharge" datasource="#application.datasource#">
				select * from charges where dtRowDeleted is null and iCharge_ID = #Evaluate('form.'& field)#
			</cfquery>
			#field# - #Evaluate('form.'& field)# : #qGetDepositCharge.cDescription# <br/>

			<cfquery name="Deposit#Evaluate('form.'& field)#" datasource="#application.datasource#">
				insert into InvoiceDetail
				(iInvoiceMaster_ID ,iTenant_ID ,iChargeType_ID ,cAppliesToAcctPeriod ,bIsRentAdj,
					dtTransaction ,iQuantity ,cDescription ,mAmount ,cComments ,dtAcctStamp ,iRowStartUser_ID ,dtRowStart )
				values
				(#iInvoiceMaster_ID# ,#TenantInfo.iTenant_ID# ,#qGetDepositCharge.iChargeType_ID#
					,'#MoveInPeriod#' ,null ,getdate() ,1 ,'#qGetDepositCharge.cDescription#' ,#qGetDepositCharge.mAmount# ,'qGetDepositCharge U'
					,#CreateODBCDateTime(session.AcctStamp)# ,0 ,getdate() )
			</cfquery>
		</cfif>
	</cfloop>
</cfoutput>

<cfif TenantInfo.iResidencyType_ID LT 3>
	<!--- check to see if there are any charges for this invoice --->
	<cfquery name="qRecordCheck" datasource="#application.datasource#">
		select count(*) count from InvoiceDetail where dtRowDeleted is null
		and iInvoiceMaster_ID = #variables.iInvoiceMaster_ID# and iTenant_ID = #TenantInfo.iTenant_ID#
	</cfquery>

	<cfif qRecordCheck.RecordCount eq 0 or (qRecordCheck.count eq 0 or qRecordCheck.count eq "")>
		<!--- If there are no details automatically add a zero charge to the 3011 medicaid co-pay account --->
		<cfquery name="qMedZeroCharge" datasource="#application.datasource#">
			select c.* from chargeType ct
			join charges c on c.iChargeType_ID = ct.iChargeType_ID
			where ct.dtRowDeleted is null and c.dtRowDeleted is null and ct.bIsMedicaid is not null
			and ct.bIsDaily is null and cGLAccount = 3011
		</cfquery>
		<!--- Insert Zero amount Mediciad charge --->
		<cfquery name="ZeroAddition" datasource="#application.datasource#">
			insert into InvoiceDetail
			(iInvoiceMaster_ID ,iTenant_ID ,iChargeType_ID ,cAppliesToAcctPeriod ,bIsRentAdj ,dtTransaction ,iQuantity
				,cDescription ,mAmount ,cComments ,dtAcctStamp ,iRowStartUser_ID ,dtRowStart )
				values
			(#iInvoiceMaster_ID# ,#TenantInfo.iTenant_ID# ,#qMedZeroCharge.iChargeType_ID# ,'#MoveInPeriod#' ,null
			,getdate() ,1 ,'#trim(qMedZeroCharge.cDescription)#' ,0.00 ,'Medicaid U' ,#CreateODBCDateTime(session.AcctStamp)# ,0 ,getdate() )
		</cfquery>
	</cfif>
</cfif>


<!--- ==============================================================================
Check InvoiceMaster for Existing MoveIn Invoice for this cSolomonKey that is open
or the last closed invoice
=============================================================================== --->
<cfquery name="InvoiceCheck" datasource="#application.datasource#">
	select Max(dtMoveIn) as MaxMoveIn,
			im.iInvoiceMaster_ID, im.mInvoiceTotal, im.mLastInvoiceTotal, im.dtInvoiceEnd, im.dtInvoiceStart, im.bFinalized, inv.iTenant_ID
	from InvoiceMaster im
	join InvoiceDetail inv on im.iInvoiceMaster_ID = inv.iInvoiceMaster_ID
	join TenantState ts on ts.iTenant_ID = inv.iTenant_ID
	where cSolomonKey = '#TenantInfo.cSolomonKey#' and ts.iTenantStateCode_ID = 2
	and (bFinalized is not null or (inv.iTenant_ID <> #TenantInfo.iTenant_ID# and bMoveInInvoice is not null))
	and im.dtRowDeleted is null and inv.dtRowDeleted is null
	group by im.iInvoiceMaster_ID, im.mInvoiceTotal, im.mLastInvoiceTotal, im.dtInvoiceEnd, im.dtInvoiceStart,
	im.bFinalized, inv.iTenant_ID, im.cAppliesToAcctPeriod
	order by im.cAppliesToAcctPeriod desc
</cfquery>

<cfquery name="qInvoice" datasource="#application.datasource#">
	select cast(sum(mamount * iquantity) as money) as sumtotal, im.iInvoiceMaster_ID, im.mLastInvoiceTotal, im.mInvoiceTotal, im.dtInvoiceStart
	from InvoiceDetail inv
	join InvoiceMaster im on (im.iInvoiceMaster_ID = inv.iInvoiceMaster_ID and im.dtRowDeleted is null)
	where inv.dtRowDeleted is null and inv.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID# and inv.dtrowdeleted is null
	group by im.iInvoiceMaster_ID, im.mLastInvoiceTotal, im.mInvoiceTotal, im.dtInvoiceStart
</cfquery>

<cfif InvoiceCheck.RecordCount eq 0>
	<!--- get the solomon balance --->
	<cfquery name="qSolbalance" datasource="#application.datasource#">
		<cfif session.qSelectedHouse.iHouse_ID eq 200>
			select -200.00 as bal
		<cfelse> 
			select isNull(SUM(amount),0) as BAL from rw.vw_Get_Trx where CUSTID = '#Tenant.cSolomonKey#'
			and RLSED = 1 and USER7 <= '#qInvoice.dtInvoiceStart#'
		</cfif>
	</cfquery>

	<cfscript>
		if (qSolbalance.Bal neq 0 and qSolbalance.Bal neq '' and (Occupancy eq 1 or linkedaccount eq 0) ) { PreviousBalance = qSolbalance.Bal; }
		else { PreviousBalance = 0.00; }
	</cfscript>
<cfelse>
	<cfscript>
		if (InvoiceCheck.mInvoiceTotal neq "" and InvoiceCheck.mInvoiceTotal neq 0) { PreviousBalance = InvoiceCheck.mInvoiceTotal; }
		else { PreviousBalance = 0.00; }
	</cfscript>
</cfif>

<cfscript>
	if ((qInvoice.recordcount gt 0 and qInvoice.sumtotal neq "") and Occupancy eq 1) { ThisNewInvoiceTotal = (qInvoice.sumtotal *1) + PreviousBalance;}
	else if ((qInvoice.recordcount gt 0 and qInvoice.sumtotal neq "") and Occupancy eq 2) { ThisNewInvoiceTotal = (qInvoice.sumtotal *1); }
	else { ThisNewInvoiceTotal = PreviousBalance; }
</cfscript>

<!--- Update the Invoice Header with the current amounts --->

<cfif TenantInfo.iResidencyType_ID neq 3>
	<cfquery name="qUpdateMoveInHeader" datasource="#application.datasource#">
		update InvoiceMaster
		set dtInvoiceStart = <cfif InvoiceCheck.dtInvoiceEnd neq ""> '#InvoiceCheck.dtInvoiceEnd#'  <cfelse> getdate()  </cfif>
			,<cfif PreviousBalance neq ""> mLastInvoiceTotal = #PreviousBalance# <cfelse>mLastInvoiceTotal = null </cfif>
			,mInvoiceTotal = #ThisNewInvoiceTotal#
			, cAppliesToAcctPeriod = '#DateFormat(session.TipsMonth,"yyyymm")#'
			,iRowStartUser_ID = #session.USERID#
		where iInvoiceMaster_ID = #iInvoiceMaster_ID#
	</cfquery>
</cfif>
 	<cfquery name="qChkNRF" datasource="#application.datasource#">
		Select mAmount 
		from InvoiceDetail
 		where iInvoiceMaster_ID = #iInvoiceMaster_ID# and iChargeType_ID = 69
	</cfquery>
<cfif isdefined('newNRFee')   and qChkNRF.mamount neq #newNRFee# and  Tenant.iResidencyType_ID is not 3>
	<cfquery name="qUpdateMoveInHeader" datasource="#application.datasource#">
		update InvoiceDetail
		set mAmount = #newNRFee#  
 		where iInvoiceMaster_ID = #iInvoiceMaster_ID# and iChargeType_ID = 69
	</cfquery>
</cfif>

<cfif form.cFirstName neq "" and form.cLastName neq "">
	<cfif contactInfo.iContact_ID neq "">
		<cfquery name="Contact" datasource="#application.datasource#">
			update contact
			set cFirstName = <cfif form.cFirstName neq "">'#trim(form.cFirstName)#',<cfelse> null, </cfif>
					cLastName = <cfif form.cLastName  neq "">'#trim(form.cLastName)#',<cfelse> null, </cfif>
					cPhoneNumber1 = <cfif variables.Phone1	neq "">'#trim(variables.Phone1)#',<cfelse> null, </cfif>
					iPhoneType1_ID = <cfif form.iPhoneType1_ID neq "">#trim(form.iPhoneType1_ID)#,<cfelse> null, </cfif>
					cPhoneNumber2 = <cfif variables.Phone2	neq "">'#trim(variables.Phone2)#',<cfelse> null, </cfif>
					iPhoneType2_ID = <cfif form.iPhoneType2_ID neq "">#trim(form.iPhoneType2_ID)#,<cfelse> null, </cfif>
					cAddressLine1 = <cfif form.cAddressLine1 neq "">'#trim(form.cAddressLine1)#',<cfelse> null, </cfif>
					cAddressLine2 = <cfif form.cAddressLine2 neq "">'#trim(form.cAddressLine2)#',<cfelse> null, </cfif>
					cCity = <cfif form.cCity neq ""> 	'#trim(form.cCity)#', <cfelse> null, </cfif>
					cStateCode = <cfif form.cStateCode neq ""> '#trim(form.cStateCode)#',	<cfelse> null, </cfif>
					cZipCode = <cfif form.cZipCode	neq "">'#trim(form.cZipCode)#',<cfelse>null,</cfif>
					iRowStartUser_ID =	#session.UserID#, 
					dtRowStart = getdate(),
					cEmail = <cfif form.cEmail neq "">'#trim(form.cEmail)#'<cfelse> null </cfif>
			where iContact_ID = #ContactInfo.iContact_ID#
		</cfquery>

		<cfquery name="LinkTenantContact" datasource="#application.datasource#">
			update LinkTenantContact
			set <cfif form.iRelationshipType_ID neq ""> iRelationshipType_ID = #form.iRelationshipType_ID#, </cfif>
					<cfif IsDefined("form.ContactbIsPayer") and form.ContactbIsPayer neq ""> bIsPayer=#form.ContactbIsPayer#, <cfelse> bIsPayer=null, </cfif>
					<cfif IsDefined("form.bIsPowerOfAttorney") and form.bIsPowerOfAttorney neq ""> bIsPowerOfAttorney=#form.bIsPowerOfAttorney#, <cfelse> bIsPowerOfAttorney=null,	</cfif>
					<cfif IsDefined("form.bIsExecutorContact") and form.bIsExecutorContact neq ""> bIsExecutorContact=#form.bIsExecutorContact#, <cfelse> bIsExecutorContact=null,	</cfif>
				    <cfif IsDefined("form.bIsMedicalProvider") and form.bIsMedicalProvider neq ""> bIsMedicalProvider=#form.bIsMedicalProvider#, <cfelse> bIsMedicalProvider=null,	</cfif>
				    <cfif IsDefined("form.cPrimaryCarePhysicianContact") and form.cPrimaryCarePhysicianContact neq "">cPrimaryCarePhysicianContact =#form.cPrimaryCarePhysicianContact#, <cfelse>cPrimaryCarePhysicianContact = null, </cfif>
					<cfif form.cComments neq ""> cComments='#form.cComments#', <cfelse> cComments =	null, </cfif>
					iRowStartUser_ID = #session.UserID#,
					 dtRowStart = getdate()

<!--- 				<cfif isDefined("form.oGuarentorAgreement") and form.oGuarentorAgreement eq ''>,bIsGuarantorAgreement = null
				<cfelseif isDefined("form.oGuarentorAgreement")>,bIsGuarantorAgreement = #form.oGuarentorAgreement#
				<cfelse>,bIsGuarantorAgreement = null
				</cfif> --->
				<cfif isDefined("form.oGuarentorAgreement") and form.oGuarentorAgreement eq ''>
					,bIsGuarantorAgreement = null
				<cfelseif isDefined("form.oGuarentorAgreement")>
					,bIsGuarantorAgreement = #form.oGuarentorAgreement#
					,bIsPrimaryPayer  = 1
				<cfelse>
					,bIsGuarantorAgreement = null
					,bIsPrimaryPayer  = null				
				</cfif>
								
			where iLinkTenantContact_ID =	#ContactInfo.iLinkTenantContact_ID#
		</cfquery>
	<cfelse>

		<cfquery name="Contact" datasource="#application.datasource#">
			insert into contact
				(cFirstName ,cLastName ,cPhoneNumber1 ,iPhoneType1_ID ,cPhoneNumber2 ,iPhoneType2_ID ,cAddressLine1
				,cAddressLine2 ,cCity ,cStateCode ,cZipCode ,iRowStartUser_ID ,dtRowStart, cEmail )
			values(
				<cfif form.cFirstname neq ''> '#form.cFirstName#' <cfelse> Null </cfif>,
				<cfif form.cLastname neq ''> '#form.cLastName#'  <cfelse> Null </cfif>,
				<cfif variables.Phone1 neq ''> '#variables.Phone1#'  <cfelse> Null </cfif>, #isBlank(form.iPhoneType1_ID,'null')#,
				<cfif variables.Phone2 neq ''> '#variables.Phone2#'  <cfelse> Null </cfif>, #isBlank(form.iPhoneType2_ID,'null')#,
				<cfif form.cAddressLine1 neq ''> '#form.cAddressLine1#' <cfelse> Null </cfif>,
				<cfif form.cAddressLine2 neq ''> '#form.cAddressLine2#' <cfelse> Null </cfif>,
				<cfif form.cCity neq ''> '#form.cCity#' <cfelse> Null </cfif>,
				<cfif form.cStateCode neq ''> '#form.cStateCode#' <cfelse> Null </cfif>,
				<cfif form.cZipCode neq ''> '#form.cZipCode#' <cfelse> Null </cfif>,
				#session.UserID#, getDate(),
				<cfif form.cEmail neq ''> '#form.cEmail#' <cfelse> Null </cfif>
			)
		</cfquery>

		<cfquery name="ContactID" datasource="#application.datasource#">
		select Max(iContact_ID) as iContact_ID from contact where cFirstname = '#form.cFirstName#' and cLastName = '#form.cLastName#'
		</cfquery>

		<cfquery name="LinkTenantContact" datasource="#application.datasource#">
			insert into LinkTenantContact (iTenant_ID 
			,iContact_ID 
			,iRelationshipType_ID 
			,bIsPayer 
			,bIsPowerOfAttorney 
			,bIsExecutorContact
			,bIsMedicalProvider 
			,cPrimaryCarePhysicianContact
			,bIsGuarantorAgreement
			,cComments 
			,iRowStartUser_ID 
			,dtRowStart
 )
			values
			(	<cfif form.iTenant_ID neq ""> #form.iTenant_ID#, <cfelse> null, </cfif>
				<cfif contactID.iContact_ID neq ""> #ContactID.iContact_ID#, <cfelse> null, </cfif>
				<cfif form.iRelationshipType_ID neq ""> #form.iRelationshipType_ID#, <cfelse> null, </cfif>
				<cfif IsDefined("form.ContactbIsPayer") and form.ContactbIsPayer neq ""> #form.ContactbIsPayer#, <cfelse> null, </cfif>
				<cfif IsDefined("form.bIsPowerOfAttorney") and form.bIsPowerOfAttorney neq ""> #form.bIsPowerOfAttorney#, <cfelse> null, </cfif>
				<cfif IsDefined("form.bIsExecutorContact") and form.bIsExecutorContact neq ""> #form.bIsExecutorContact#, <cfelse> null, </cfif>
				<cfif IsDefined("form.bIsMedicalProvider") and form.bIsMedicalProvider neq ""> #form.bIsMedicalProvider#, <cfelse> null, </cfif>
				<cfif IsDefined("form.cPrimaryCarePhysicianContact") and form.cPrimaryCarePhysicianContact neq ""> #form.cPrimaryCarePhysicianContact#, <cfelse> null, </cfif>
				<cfif IsDefined("form.bIsGuarantorAgreement") and form.bIsGuarantorAgreement neq "">#form.bIsGuarantorAgreement#,<cfelse>null,</cfif>
				<cfif form.cComments neq "">'#form.cComments#',<cfelse>null,</cfif>
				#session.UserID#, 
				getdate() 
			)
		</cfquery>
			<cfif not isDefined("form.oGuarentorAgreement") or (form.oGuarentorAgreement  neq 1)>
				<cfquery name="TenantStateCode" datasource="#application.datasource#">
					update TenantState
					Set bIsPrimaryPayer = 1
					
					WHERE iTenant_ID = #form.iTenant_ID#
				</cfquery>
			</cfif>
	</cfif>
<cfelseif not isDefined("form.oGuarentorAgreement") or (form.oGuarentorAgreement  neq 1)>
		<cfquery name="TenantStateCode" datasource="#application.datasource#">
			update TenantState
			Set bIsPrimaryPayer = 1
			
			WHERE iTenant_ID = #form.iTenant_ID#
		</cfquery>
</cfif>
<!--- if the contact is not the Guarantor the tenant is the primary payer if the contact is the Guarantor than the contact is the primary payer --->
 
<!---  ---><!---  ---><!---  ---><!--- added for deferred new resident fee  ---><!---  ---><!---  ---><!---  --->

<!--- 	F<br />	

<cfoutput><br /> #iChargeType_ID# is 1740) and (( (#mamount# is not '') and (#mamount# gt 0)) or (#form.amtdef#<br /></cfoutput>
	<cfif TenantInfo.iResidencyType_ID eq 1  AND Occupancy EQ 1>
	<cfif ((iChargeType_ID is 1740) and (( (mamount is not '') and (mamount gt 0)) or (form.amtdef gt 0)) )>
  
		<cfif form.payment1 gt form.defpymntamt>
			<cfset thisamount = form.payment1>
		<cfelse>
			<cfset thisamount = form.defpymntamt> <!--- monthly payment amount for the 1741 --->
		</cfif>
		<cfif Isdefined("DEFENDDATE") and (DEFENDDATE is not "")>
			<cfset monthend = left(DEFENDDATE,2)>
			<cfset yearend = right(DEFENDDATE,4)>
			<cfset enddate = monthend & "-01-" &  yearend>
			<cfset lastday = #DaysInMonth(enddate)#>
			<cfset formatenddate =  monthend & "/" &  lastday  & "/" &yearend>
			<cfset formatenddate = #CreateODBCDateTime(formatenddate)#>	
			<cfoutput>End Date:: #formatenddate#</cfoutput> <br />
			<cfset monthbgn =  ApplyToMonth >
			<cfset yearbgn =  ApplyToYear >
			<cfset bgndate = monthbgn & "-01-" &  yearbgn>
			<cfset formatbgndate =  monthbgn & "/01/" &yearbgn>
			<cfset formatbgndate =  #CreateODBCDateTime(formatbgndate)#>	
			<cfoutput>Begin Date: #formatbgndate#  </cfoutput>  <br /> 
			<cfset datestart =  CreateODBCDateTime(#ApplyToMonth#  & '/01/' & #ApplyToYear#) > 
			<cfset dateend  = CreateODBCDateTime(#formatenddate#)>
		</cfif>		
		<!--- <cfset mamount = form.mamount - form.nrfee  > ---> 
		<cfset mamount = form.amtdef  >
		<CFQUERY NAME = "ChargeDetail1740" DATASOURCE = "#APPLICATION.datasource#">
			SELECT	c.icharge_id,c.ichargetype_id,c.cChargeSet, C.cDescription as ChargeDescription
			FROM	Charges C
			JOIN	ChargeType CT	ON	C.iChargeType_ID = CT.iChargeType_ID
			WHERE	CT.iChargeType_ID =  1740 
			AND		C.dtRowDeleted IS NULL
			and 	c.ihouse_id = #SESSION.qSelectedHouse.iHouse_ID#
		</CFQUERY>	 

		<CFQUERY NAME="MoveInInvoice" DATASOURCE="#APPLICATION.datasource#">
			SELECT	distinct IM.iInvoiceMaster_ID
			FROM	InvoiceMaster IM
			LEFT JOIN 	InvoiceDetail INV	ON	(IM.iInvoiceMaster_ID = INV.iInvoiceMaster_ID 	AND INV.dtRowDeleted IS NULL 	AND iTenant_ID = #form.iTenant_ID#)
			JOIN	Tenant T	ON	(T.iTenant_ID = #form.iTenant_ID#	AND T.cSolomonKey = IM.cSolomonKey	AND	T.dtRowDeleted is null)
			WHERE	IM.bMoveInInvoice IS NOT NULL
			AND	IM.dtRowDeleted IS NULL
			AND	IM.bFinalized IS NULL
		</CFQUERY>

		<!--- create invoicedetail for the 1740 charge --->
		<cfquery NAME = "qry1740Chg" DATASOURCE = "#APPLICATION.datasource#">
			SELECT   rc.iRecurringCharge_ID
			FROM RecurringCharge rc
			join charges ch on ch.iCharge_ID = rc.iCharge_ID
			join dbo.ChargeType CT on ct.iChargeType_ID = ch.iChargeType_ID
			where ch.ichargetype_id = 1740
			and rc.dtRowDeleted is null
			and itenant_id = #form.iTenant_ID#
		</cfquery>
 		<CFQUERY NAME = "ChargeDetail1740" DATASOURCE = "#APPLICATION.datasource#">  
			SELECT	c.icharge_id,c.ichargetype_id,c.cChargeSet, C.cDescription as ChargeDescription
			FROM	Charges C
			JOIN	ChargeType CT	ON	C.iChargeType_ID = CT.iChargeType_ID
			WHERE	CT.iChargeType_ID =  1740 
			AND		C.dtRowDeleted IS NULL
			and 	c.ihouse_id = #SESSION.qSelectedHouse.iHouse_ID#
		</cfquery>			
   	<CFQUERY NAME = "InvoiceDetail" DATASOURCE = "#APPLICATION.datasource#">
		INSERT INTO 	InvoiceDetail
		( iInvoiceMaster_ID 
		,iTenant_ID 
		,iChargeType_ID 
		,cAppliesToAcctPeriod
		 ,bIsRentAdj 
		 ,dtTransaction 
		 ,iQuantity 
		,cDescription
		,mAmount
		,cComments 
		,dtAcctStamp
		,iRowStartUser_ID 
		,dtRowStart
		, dtRowEnd)    
 		VALUES
 		( #MoveInInvoice.iInvoiceMaster_ID#,
			#form.iTenant_ID#,
			#ChargeDetail1740.iChargeType_ID#,
			#thisacctmonth#,
			1,
			#todaysdate#,
			<CFIF NOT IsDefined("form.iQuantity")> 1, <CFELSE> #TRIM(form.iQuantity)#, </CFIF>
			<CFIF NOT IsDefined("form.cDescription")> '#ChargeDetail1740.ChargeDescription#', <CFELSE> '#TRIM(form.cDescription)#', </CFIF>
			(#mamount# *-1),  
			NULL, 
			#CreateODBCDateTime(SESSION.AcctStamp)#,
			0, 
			 #formatbgndate#,  
			 #formatenddate# 			
		)  
	  </CFQUERY>	 	
		<cfoutput>				
			<cfif qry1740Chg.recordcount gt 0 >
				<cfquery name="updexistRecChg" DATASOURCE = "#APPLICATION.datasource#">
					update RecurringCharge
					set mAmount =  #mamount#
					,dtEffectiveStart  =  #datestart# 
					,dtEffectiveEnd =  #dateend# 
					,dtRowDeleted = null
					,cRowDeletedUser_id = null
					where iRecurringCharge_ID =  #qry1740Chg.iRecurringCharge_ID# 
				</cfquery>
			<cfelse>
				<CFQUERY NAME = "RecurringChargeInsertDetail" DATASOURCE = "#APPLICATION.datasource#">
					INSERT INTO  RecurringCharge
						(iTenant_ID
						,iCharge_ID
						,dtEffectiveStart
						,dtEffectiveEnd						
						,iQuantity
						,cDescription
						,mAmount
						,cComments
						,dtAcctStamp
						,iRowStartUser_ID
						,dtRowStart
						,bIsDaily  
						)  
					VALUES
						(#form.iTenant_ID#
						,#ChargeDetail1740.icharge_id#
						,#datestart#
						,#dateend#
						,#iQuantity#
						,'#ChargeDetail1740.ChargeDescription#'
						,#mamount#
						,<cfif IsDefined('cComments')>'#cComments#'<cfelse>null</cfif>
						,#CreateODBCDateTime(SESSION.AcctStamp)#
						,#SESSION.UserID#
						,#todaysdate#
						,0
						)	 
				</CFQUERY> 
	
				  <cfquery  name="qryIMID"  DATASOURCE = "#APPLICATION.datasource#">
					  select max ( iInvoicedetail_ID ) as   'maxIMID'
					  from  InvoiceDetail   
					  where   iInvoiceMaster_ID = #MoveInInvoice.iInvoiceMaster_ID#
							 and iChargeType_ID =  1740
				  </cfquery>	
	 
				  <cfquery  name="qryRCID"  DATASOURCE = "#APPLICATION.datasource#">
					  select max (iRecurringCharge_ID) as 'maxRCID'
					  from  RecurringCharge RC
					  	join Charges CH on   CH.iCharge_ID = RC.iCharge_ID
					  where  RC.iTenant_ID = #form.iTenant_ID#
					  and CH.iChargeType_ID = 1740
				  </cfquery>	
				  
				  <cfquery name="updIMD" DATASOURCE = "#APPLICATION.datasource#">
					  update dbo.InvoiceDetail
					  set iRecurringCharge_ID = #qryRCID.maxRCID#
					  where iInvoiceDetail_ID =  #qryIMID.maxIMID#
				  </cfquery>	  
			</cfif>	
		</cfoutput>	
	 <!--- create the records for the 1741 charge   ---------------------------------------------------------------------------------------------------------------->
		<cfquery NAME = "qry1741Chg" DATASOURCE = "#APPLICATION.datasource#">
			SELECT   rc.iRecurringCharge_ID
			FROM RecurringCharge rc
			join charges ch on ch.iCharge_ID = rc.iCharge_ID
			join dbo.ChargeType CT on ct.iChargeType_ID = ch.iChargeType_ID
			where ch.ichargetype_id = 1741
			and rc.dtRowDeleted is null
			and itenant_id = #form.iTenant_ID#
		</cfquery>
 		<CFQUERY NAME = "ChargeDetail1741" DATASOURCE = "#APPLICATION.datasource#"> 
			SELECT	c.icharge_id,c.ichargetype_id,c.cChargeSet, C.cDescription as ChargeDescription
			FROM	Charges C
			JOIN	ChargeType CT	ON	C.iChargeType_ID = CT.iChargeType_ID
			WHERE	CT.iChargeType_ID =  1741 
			AND		C.dtRowDeleted IS NULL
			and 	c.ihouse_id = #SESSION.qSelectedHouse.iHouse_ID#
		</cfquery>		  
		<cfoutput>	
			<CFQUERY NAME = "InvoiceDetail" DATASOURCE = "#APPLICATION.datasource#">
				INSERT INTO 	InvoiceDetail
				( iInvoiceMaster_ID 
				,iTenant_ID 
				,iChargeType_ID 
				,cAppliesToAcctPeriod 
				,bIsRentAdj 
				,dtTransaction
				,iQuantity 
				,cDescription
				,mAmount
				,cComments 
				,dtAcctStamp 
				,iRowStartUser_ID
				,dtRowStart
				, dtRowEnd)
				VALUES 
				( #MoveInInvoice.iInvoiceMaster_ID#,
					#form.iTenant_ID#,
					1741,
					'#thisacctmonth#',
					1,
					#todaysdate#,
					1,
					'#ChargeDetail1741.ChargeDescription#',
					#thisamount#,	
					 NULL, 
					#CreateODBCDateTime(SESSION.AcctStamp)#,
					0, 
					 <CFIF (IsDefined("formatbgndate") and (formatbgndate is not ""))>  #formatbgndate# , <CFELSE>NULL,</CFIF>
					 <CFIF (IsDefined("formatenddate") and (formatenddate is not ""))> #formatenddate#  <CFELSE>NULL</CFIF>  			
				)  
		   </CFQUERY> 
<!--- 		   <cfif form.aftertips = "Y">
				<CFQUERY NAME = "InvoiceDetail" DATASOURCE = "#APPLICATION.datasource#">
				INSERT INTO 	InvoiceDetail
				( iInvoiceMaster_ID 
				,iTenant_ID 
				,iChargeType_ID 
				,cAppliesToAcctPeriod 
				,bIsRentAdj 
				,dtTransaction
				,iQuantity 
				,cDescription
				,mAmount
				,cComments 
				,dtAcctStamp 
				,iRowStartUser_ID
				,dtRowStart
				, dtRowEnd)
				VALUES 
				( #MoveInInvoice.iInvoiceMaster_ID#,
					#form.iTenant_ID#,
					1741,
					#form.nextacctperiod#
					1,
					#todaysdate#,
					1,
					'#ChargeDetail1741.ChargeDescription#',
					#thisamount#,	
					 NULL, 
					#CreateODBCDateTime(SESSION.AcctStamp)#,
					0, 
					 <CFIF (IsDefined("formatbgndate") and (formatbgndate is not ""))>  #formatbgndate# , <CFELSE>NULL,</CFIF>
					 <CFIF (IsDefined("formatenddate") and (formatenddate is not ""))> #formatenddate#  <CFELSE>NULL</CFIF>  			
				)  
			   </CFQUERY>	
		   </cfif>	 --->		   
	   </cfoutput>	

	
		<cfoutput>				
			<cfif qry1741Chg.recordcount gt 0 >
				<cfquery name="updexistRecChg" DATASOURCE = "#APPLICATION.datasource#">
					update RecurringCharge
					set mAmount =  #thisamount#
					,dtEffectiveStart  =  #datestart# 
					,dtEffectiveEnd =  #dateend# 
					,dtRowDeleted = null
					,cRowDeletedUser_id = null
					where iRecurringCharge_ID =  #qry1741Chg.iRecurringCharge_ID# 
				</cfquery>
			<cfelse>
				<CFQUERY NAME = "RecurringChargeInsertDetail" DATASOURCE = "#APPLICATION.datasource#">
					INSERT INTO  RecurringCharge
						(iTenant_ID
						,iCharge_ID
						,dtEffectiveStart
						,dtEffectiveEnd						
						,iQuantity
						,cDescription
						,mAmount
						,cComments
						,dtAcctStamp
						,iRowStartUser_ID
						,dtRowStart
						,bIsDaily  
						)  
					VALUES
						(#form.iTenant_ID#
						,#ChargeDetail1741.icharge_id#
						,#datestart#
						,#dateend#
						,#iQuantity#
						,'#ChargeDetail1741.ChargeDescription#'
						,#thisamount#
						,<cfif IsDefined('cComments')>'#cComments#'<cfelse>null</cfif>
						,#CreateODBCDateTime(SESSION.AcctStamp)#
						,#SESSION.UserID#
						,#todaysdate#
						,0
						)	 
				</CFQUERY> 
	
				  <cfquery  name="qryIMID"  DATASOURCE = "#APPLICATION.datasource#">
					  select max ( iInvoicedetail_ID ) as   'maxIMID'
					  from  InvoiceDetail   
					  where   iInvoiceMaster_ID = #MoveInInvoice.iInvoiceMaster_ID#
					   and iChargeType_ID =  1741
				  </cfquery>	
	 
				  <cfquery  name="qryRCID"  DATASOURCE = "#APPLICATION.datasource#">
					  select max (iRecurringCharge_ID) as 'maxRCID'
					  from  RecurringCharge RC
					  	join Charges CH on   CH.iCharge_ID = RC.iCharge_ID
					  where  RC.iTenant_ID = #form.iTenant_ID#
					  and CH.iChargeType_ID = 1741
				  </cfquery>	
				  
				  <cfquery name="updIMD" DATASOURCE = "#APPLICATION.datasource#">
					  update dbo.InvoiceDetail
					  set iRecurringCharge_ID = #qryRCID.maxRCID#
					  where iInvoiceDetail_ID =  #qryIMID.maxIMID#
				  </cfquery>	  
			</cfif>	
		</cfoutput>	
	<cfelseif  (iChargeType_ID is '')	>
		<cfquery NAME = "qry1740Chg" DATASOURCE = "#APPLICATION.datasource#">
			SELECT   rc.iRecurringCharge_ID
			FROM RecurringCharge rc
			join charges ch on ch.iCharge_ID = rc.iCharge_ID
			join dbo.ChargeType CT on ct.iChargeType_ID = ch.iChargeType_ID
			where ch.ichargetype_id = 1740
			and rc.dtRowDeleted is null
			and itenant_id = #form.iTenant_ID#
		</cfquery>	
		<cfif qry1740Chg.recordcount gt 0>
			<cfquery name="updexistRecChg" DATASOURCE = "#APPLICATION.datasource#">
				update RecurringCharge
				set cRowDeletedUser_id =  '#session.userid#'
				,dtRowDeleted  = #todaysdate#
				,dtEffectiveEnd = #todaysdate#
				where iRecurringCharge_ID = <cfqueryparam value="#qry1740Chg.iRecurringCharge_ID#" cfsqltype="cf_sql_integer">
			</cfquery>
 		</cfif>	
		<cfquery NAME = "qry1741Chg" DATASOURCE = "#APPLICATION.datasource#">
			SELECT   rc.iRecurringCharge_ID
			FROM RecurringCharge rc
			join charges ch on ch.iCharge_ID = rc.iCharge_ID
			join dbo.ChargeType CT on ct.iChargeType_ID = ch.iChargeType_ID
			where ch.ichargetype_id = 1741
			and rc.dtRowDeleted is null
			and itenant_id = #form.iTenant_ID#
		</cfquery>	
		<cfif qry1741Chg.recordcount gt 0>
			<cfquery name="updexistRecChg" DATASOURCE = "#APPLICATION.datasource#">
				update RecurringCharge
				set cRowDeletedUser_id =  '#session.userid#'
				,dtRowDeleted  = #todaysdate#
				,dtEffectiveEnd = #todaysdate#
				where iRecurringCharge_ID = <cfqueryparam value="#qry1741Chg.iRecurringCharge_ID#" cfsqltype="cf_sql_integer">
			</cfquery>
 		</cfif>
	</cfif>
	</cfif>  --->
</cftransaction>
  
 <cfoutput>
	<cflocation url="MoveInCredits.cfm?ID=#form.iTenant_ID#&MID=#variables.iInvoiceMaster_ID#&NrfDiscApprove=#form.NrfDiscApprove#" ADDTOKEN="No">
</cfoutput>   