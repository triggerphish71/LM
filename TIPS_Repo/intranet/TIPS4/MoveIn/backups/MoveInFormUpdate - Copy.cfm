<!----------------------------------------------------------------------------------------------
| DESCRIPTION: update Move in Information.                                                     |
|----------------------------------------------------------------------------------------------|
| MoveInFormUpdate.cfm                                                                         |
|----------------------------------------------------------------------------------------------|
| STORED PROCEDURES                                                                            |
|----------------------------------------------------------------------------------------------|
|  none                                                                                        |
|----------------------------------------------------------------------------------------------|
| INCLUDES                                                                                     |
|----------------------------------------------------------------------------------------------|
| Called by:        MoveInForm.cfm                                                             |
| Calls/Submits:    MoveInSummary.cfm                                                          |
|----------------------------------------------------------------------------------------------|
| HISTORY                                                                                      |
|----------------------------------------------------------------------------------------------|
| Author     | Date       | Description                                                        |
|------------|------------|--------------------------------------------------------------------|
| pbuendia   | 10/01/2002 | Original Authorship                                                |
|            | 03/14/2002 | Changed Find occupancy query be dependent only                     |
|            |            | upon if there is a person in the room. (ie. regardless             |
|            |            | of the solomonkey or linked status)                                |
| steved     | 04/22/2002 | Added check for companion suite when determining occupancy         |
| paulb      | 09/03/2002 | Changed invoice header update to not include sol bal if second     |
|            |            | tenant                                                             |
| mlaw       | 09/12/2005 | Project 732228: Update New Tenant's chargeset with the cChargeSet  |
|            |            | from charges table                                                 |
| mlaw       | 12/07/2005 | New Move-In Tenant.cchargeset will be assigned by house.cchargeset |
| ranklam    | 12/07/2005 | CHANGED STATIC DSN TO VARIABLE!!!!                                 |
| nryali     | 01/06/2006 | ZipCode varibles are updated with single quotes.                   |
| ranklam    | 01/17/2006 | Changed all rent queries to get the charges for the correct        |
|            |            | product line.                                                      |
| ranklam    | 01/26/2006 | Updated the page to abort if no daily rent is found.               |
|MLAW        | 08/22/2006 | Make sure the charges are assigned to correct Product Line ID      |
|SSathya     | 06/20/08   | Made modification according to project #20125                      |
|Ssathya     | 10/30/2008 | Added a query that would mark the record generated by the activating|
|                         | assessments without billing in the invoicemaster table as per 29842|
|Ssathya     | 11/10/2008 | Project 30178 added the bIsGuarantorAgreement to the query         |
|                           LinkTenantContact query.                                           |
|Rschuette   | 11/21/2008 | Project 26955: updated the "TenantState" query for the right       |
|            |            | apt address.                                                       |
 sfarmer     | 4/10/2012  | Project 75019 - EFT Update/NRF Deferral.                           |
|sfarmer     | 04/24/2012 | move in charges changed to check dtEffectiveEnd date. tckt 89924   | 
|sfarmer     | 06/09/2012 | 75019 - NRF/Deferred Installation                                  |
|sfarmer     | 06/09/2012 | 75019 - Adjustments for 2nd opp, respite, Idaho                    | 
|sfarmer     | 12/13/2012 | 99579 - removed required approval process for discounted NRF       | 
|Sfarmer     | 09/18/2013 | 102919 - Revise NRF approval process                               |
|S Farmer    | 05/20/2014 | 116824 - Move-In update  - Allow ED to adjust BSF rate             |
|S Farmer    | 05/20/2014 | 116824 - Phase 2 Allow different move-in and rent-effective dates  |
|            |            | allow respite to adjust BSF rates                                  |
|S Farmer    | 08/20/2014 | 116824 - back-off different move-in rent-effective dates           |
|            |            | allow adjustment of rates by all regions                           |
|S Farmer    | 09/08/2014 | 116824  Allow all houses edit BSF and Community Fee Rates          |
|S Farmer    | 2015-01-12 | 116824    Final Move-in Enhancements                               |
|S Farmer    | 2015-07-31 | Updates for Pinicon Place with monthly charges                     |
|SFarmer,    | 2015-09-28 |  Medicaid, Memory Care Updates                                     |
|MShah       |            |                                                                    |
 -----------------------------------------------------------------------------------------  --->
<!--- <cfoutput> test moveinform-update-start
 	<cfdump var="#form#"> 
	<cfdump var="#session#"> 
</cfoutput><br />	
	 ---> 
	

<p style="font-family:verdana;font-size:xx-small;">
<cfset todaysdate = CreateODBCDateTime(now())>
<cfparam name="formatenddate" default="">
<cfparam name="formatbgndate" default="">
<cfparam name="IsSecondOccupant" default="">
<cfparam name="IsCompanion" default="">
<cfparam name="monthdays1" default="">
<cfparam name="monthdays2" default=""> 
<cfparam name="nbrdays1" default="">
<cfparam name="nbrdays2" default="">
<cfparam name="acctperiod1" default="">
<cfparam name="acctperiod2" default="">
<cfparam name="acctper1" default="">
<cfparam name="acctper2" default="">
<!--- Medicaid Variables --->
<cfparam name="cMedicaidAuthorizationNbr" default="">
<cfparam name="dtFDOS" default="">
<cfparam name="dtTDOS" default="">
<cfparam name="cNJHSP" default="">
<cfparam name="mMedicaidCopay" default="">
<cfparam name="iPICD" default="">
<cfparam name="iSICD" default="">
<cfparam name="iTICD" default="">
<cfparam name="cMCO" default=""> 
 

 <cfif IsDefined("FIELDNAMES") is "Yes">
<cfloop list="#FIELDNAMES#" index="loopVar" delimiters=",">
	<cfset string = "form." & loopVar & " = Replace(form." & loopVar & ",""'"",""''"",""ALL"")">
	<cfset temp = evaluate(string)>
</cfloop>
</cfif>
<!--- Define Care Day Start  --->
	<cfif IsDefined('form.MoveInMonth') and (form.MoveInMonth is not '')>
		<cfset variables.MoveInMonth = form.MoveInMonth>
	<cfelse>
		<cfset variables.MoveInMonth = form.RentMonth>	
	</cfif>
	
	<cfset variables.RentMonth = form.RentMonth>
 
	<cfif IsDefined('form.MoveInDay') and (form.MoveInDay is not '')>
		<cfset variables.MoveInDay = form.MoveInDay>
	<cfelse>
		<cfset variables.MoveInDay = form.RentDay>	
	</cfif>
 	
	<cfset variables.RentDay = form.RentDay>
 
 	<cfif IsDefined('form.MoveInYear') and  (form.MoveInYear is not '')>
		<cfset variables.MoveInYear = form.MoveInYear>
	<cfelse>
		<cfset variables.MoveInYear = form.RentYear>	
	</cfif>
 
	<cfset variables.RentYear = form.RentYear>
  <br />MoveInFormUpdate.cfm<br />	
<cfquery name="previnfo" datasource="#application.datasource#">
  select T.cchargeset, TS.iAptAddress_ID
  from Tenant T
  inner join TenantState TS on T.iTenant_ID = TS.iTenant_ID
  where T.iTenant_ID = <cfif IsDefined("url.ID") and url.ID neq ""> #url.ID#<cfelseif IsDefined("url.iTenant_ID") and url.iTenant_ID neq ""> #url.iTenant_ID# <cfelse> #form.iTenant_ID#</cfif>
</cfquery>


<cfquery name="getHouseChargeset" datasource="#application.datasource#">
  select cs.CName, h.cSLevelTypeSet, h.cbillingtype from house h
  join chargeset cs
  on cs.iChargeSet_ID = h.iChargeSet_ID
  where ihouse_id = #session.qSelectedHouse.iHouse_ID#
  and h.dtrowdeleted is null
</cfquery>

<cfif session.qSelectedHouse.iHouse_ID gt 0>
	<cftry>
		<cfquery name="UpdateChargeset" datasource="#application.datasource#">
		  update Tenant
		  set cChargeSet = '#getHouseChargeset.CName#' ,dtrowstart=getdate() ,crowstartuser_id='#session.userid#'
		  where iTenant_ID = #form.iTenant_ID#
		</cfquery>
		<cfcatch>
		  There is some problem while updating the Tenant table
		</cfcatch>
	</cftry>
</cfif>

<cfif form.iResidencyType_ID is 5>
	<cftry>
		<cfquery name="UpdateBillingType" datasource="#application.datasource#">
		  update Tenant
		  set cBillingType = 'D'
		  where iTenant_ID = #form.iTenant_ID#
		</cfquery>
		<cfcatch>
		  There is some problem while updating the Tenant table for Billing Type
		</cfcatch>
	</cftry>
<!---mamta added productline to determine billing type--->
<cfelseif form.IPRODUCTLINE_ID is 2>
 is this goin here??
       <cfquery name="UpdateBillingType" datasource="#application.datasource#" result="UpdateBillingType">
		  update Tenant
		  set cBillingType = 'M'
		  where iTenant_ID = #form.iTenant_ID#
		</cfquery>
		<!--- <cfdump var="#UpdateBillingType#"> --->
<!---mamta/end--->	
<cfelse>
		<cfquery name="UpdateBillingType" datasource="#application.datasource#" result="UpdateBillingType" >
		  update Tenant
		  set cBillingType = '#getHouseChargeset.cbillingtype#'
		  where iTenant_ID = #form.iTenant_ID#
		</cfquery>
<!--- <cfdump var="#UpdateBillingType#"> --->
</cfif>


<!--- Retrieve Tenant Information not dependent upon other tables ---> 
<cfquery name="Tenant" datasource="#application.datasource#">
	select t.csolomonkey,* 
	from Tenant T
	join TenantState ts on t.iTenant_ID = ts.iTenant_ID
	join TenantStateCodes tc on ts.iTenantStateCode_ID = tc.iTenantStateCode_ID
	join ResidencyType rt on rt.iResidencyType_ID = ts.iResidencyType_ID
	where t.iTenant_ID = <cfif IsDefined("url.ID") and url.ID neq ""> #url.ID#<cfelseif IsDefined("url.iTenant_ID") and url.iTenant_ID neq ""> #url.iTenant_ID# <cfelse> #form.iTenant_ID#</cfif>
</cfquery>
<!---<cfdump  var="#tenant#">--->
<cfquery name="qLinkedCheck" datasource="#application.datasource#">
	select count(distinct t.itenant_id) as linkcount from Tenant T
	join TenantState ts on t.iTenant_ID = ts.iTenant_ID and t.dtrowdeleted is null
	and ts.dtrowdeleted is null and ts.itenantstatecode_id <= 3
	where t.csolomonkey=#tenant.csolomonkey#
</cfquery>

<cfif qLinkedCheck.linkcount gt 1> <cfset linkedaccount=1>
<cfelse> <cfset linkedaccount=0> </cfif>

<cfif Tenant.iTenantStateCode_ID eq 2>
	<center><strong style='font-size: large; color: red;'>This tenant is already moved in.<br/>You will be redirected in 10 seconds.</strong></center>
	<script> function redirect() { location.href='../MainMenu.cfm'; } setTimeout('redirect()',10000); </script>
	<cfabort>
</cfif>

<cfscript>
	switch(Tenant.cBillingType){
 
		case 'D': billing = 'daily'; break;
		case 'M': billing = 'monthly'; break;		
		default: billing='daily';
	}

	//Concatenate Phone Number from areacode prefix and number
	Phone1 = form.areacode1 & form.prefix1 & form.number1; 	
	Phone2 = form.areacode2 & form.prefix2 & form.number2;

	//Concatenate the dates

	dtMoveIn = CreateODBCDATETIME(variables.MoveInMonth & '/' & variables.MoveInDay & '/' & variables.MoveInYear);
	MoveInMonth = CreateODBCDATETIME(variables.MoveInMonth & '/' & 01 & '/' & variables.MoveInYear);
	MoveInPeriod = Year(variables.dtMoveIn) & DateFormat(variables.dtMoveIn,"mm");
	MIDaysInMonth = DaysInMonth(MoveInMonth);
//   	CurrPeriod = Year(session.TipsMonth) & DateFormat(session.TipsMonth,"mm");  
 	CurrPeriod = Year(now()) & DateFormat(now(),"mm");
// 	CurrentMonth = createODBCDateTime(Month(session.TIPSMonth) & "/" & 01 & "/" & Year(session.TIPSMonth));
 	CurrentMonth = createODBCDateTime(Month(now()) & "/" & 01 & "/" & Year(now()));
 	CurrPeriodDays = DaysInMonth(CurrPeriod);	
// 	MonthsDifference = DateDiff('m',CurrentMonth,RentMonth);
	
	dtRent = CreateODBCDATETIME(variables.RentMonth & '/' & variables.RentDay & '/' & variables.RentYear);
	RentMonth = CreateODBCDATETIME(variables.RentMonth & '/' & 01 & '/' & variables.RentYear);
	RentPeriod = Year(variables.dtRent) & DateFormat(variables.dtRent,"mm");
	RentDaysInMonth = DaysInMonth(RentMonth);

	TIPSPeriod = Year(session.TipsMonth) & DateFormat(session.TipsMonth,"mm");
	TIPSMonth = CreateODBCDateTime(Month(session.TIPSMonth) & "/" & 01 & "/" & Year(session.TIPSMonth));
	TIPSPeriodDays = DaysInMonth(session.TIPSMonth);

	RentDaysToCharge = (RentDaysInMonth - form.RentDay) +1;
	if (MoveInPeriod LT currPeriod){ CurrentDaysToCharge=CurrPeriodDays; } else {CurrentDaysToCharge=0;}
	MonthsDifference = DateDiff('m',TIPSMonth,RentMonth);
	nextmonth = DateAdd('m', 1, RentMonth);
	MonthList=ArrayNew(1); 
	chargeDays=ArrayNew(1);
	AcctMonthList=ArrayNew(1);	
	MonthList[1]=dtRent;
	ChargeDays[1]=RentDaysToCharge;
	AcctMonthList[1]=RentPeriod;


	limit=abs(MonthsDifference) ;
	for (i=1; i LTE limit; i=i+1) {  
		MonthList[i+1]=DateAdd('m', i, RentMonth);  
		ChargeDays[i+1]=DaysInMonth(MonthList[i+1]); 
	 	if (Month(nextmonth) lt 10)
	 		{AcctMonthList[i+1] = Year(MonthList[i+1]) & '0' &  month(MonthList[i+1]);}
	 		else
	 		{AcctMonthList[i+1] = Year(MonthList[i+1]) & month(MonthList[i+1]);}
 
		}
</cfscript>

<cfoutput>
<cfset monthlistLen =  arraylen(MonthList)>
<cfset ChargeDaysLen =  arraylen(ChargeDays)>
 Tenant.cBillingType: #Tenant.cBillingType#
MonthList:: CurrentMonth:#CurrentMonth#<br />
RentMonth:#RentMonth#<br />
moveinMonth:#moveinMonth#<br />
#dtmovein#, #monthlistLen#, #ChargeDaysLen#<br />

limit:: #limit#<br />

<cfloop index="q" from="1" to="#monthlistLen#">
monthlistLen:: #MonthList[q]# <br /> 
</cfloop>

<cfloop index="t" from="1" to="#ChargeDaysLen#">
ChargeDaysLen:: #ChargeDays[t]#<br />
</cfloop>
 
<!--- <cfif Isdefined('MonthList[3]')>#MonthList[3]#; #ChargeDays[3]#<br /><br /></cfif> --->
</cfoutput>

<cfscript>		
whereat = 'notyet';
	CareSub = 0;
	CareMonthList=ArrayNew(1);
	CareDaysToCharge=ArrayNew(1); 
	CareMoveInPeriod=ArrayNew(1); 
	CareChargeDays=	ArrayNew(1); 
	CareRentDaysInMonth = ArrayNew(1);	
	CareMonthsDifference = DateDiff('m',TIPSMonth,dtmovein);	
//	Carelimit=abs(CareMonthsDifference) +1;
	Carelimit=abs(CareMonthsDifference) ;
//	limit=abs(MonthsDifference) ;
	CareMonthList[1]=dtmovein;	
	for (i=1; i LTE Carelimit; i=i+1) {  
		CareMonthList[i+1]=DateAdd('m', i, variables.MoveInMonth);  

		}	
		
</cfscript>
	<cfset 	Carelimit=arraylen(CareMonthList)>
<!--- 	<cfdump var="#CareMonthList#" label="CareMonthList">	
	<cfoutput>#Carelimit#</cfoutput><br /> --->
<cfscript>
	//	CareRentDaysInMonth[1] = DaysInMonth(CareMonthList[1]); 
for (i=1; i LTE Carelimit; i=i+1) {
		CareSub = CareSub + 1;
	//	MonthList[i+1]=DateAdd('m', i, MoveInMonth);  
		CareRentDaysInMonth[i]=DaysInMonth(CareMonthList[i]); 
		}
</cfscript>
<!--- <br />CareRentDaysInMonth:	<cfdump var="#CareRentDaysInMonth#" label="CareRentDaysInMonth">
<br />Carelimit :: <cfdump var="#Carelimit#" label="Carelimit">

<br />MonthList :: <cfdump var="#MonthList#" label="MonthList">
<br  />  --->
<cfscript>
for (i=1; i LTE Carelimit; i=i+1) {
//WriteDump(var=MonthList[i],label='MonthListA'); 
//WriteDump(var=MoveInMonth, label='MoveInMonthA');
 if  (CareMonthList[i] LTE MoveInMonth and i == 1)
 	{	
		whereat = 'i = 1';
		WriteDump(var=whereat,label='whereat1');
		WriteDump(var=i, label='i1');
		WriteDump(var=MonthList[i],label='MonthList1');
		WriteDump(var=MoveInMonth, label='MoveInMonth1');
		 CareRentDaysInMonth = DaysInMonth(CareMonthList[i]);
	 	CareDaysToCharge = CareRentDaysInMonth - variables.MoveInDay  +1;

	//	CareMonthList[i]=dtMoveIn;
		CareChargeDays[i]=CareDaysToCharge;
		if (Month(CareMonthList[i]) lt 10)
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & '0' &  month(CareMonthList[i]);}
			else
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & month(CareMonthList[i]);}

		}
else  if  (CareMonthList[i] LE MoveInMonth and i gt 1)
	{		
		WriteDump(var=MonthList[i],label='MonthList2'); WriteDump(var=MoveInMonth, label='MoveInMonth2');
		 WriteDump(var=i, label='i2');
			whereat = 'i gt 1';
					WriteDump(var=whereat,label='whereat2');
	 	CareRentDaysInMonth = DaysInMonth(CareMonthList[i]);
	 	CareDaysToCharge = CareRentDaysInMonth ;
		
	//	CareMonthList[i]=dtMoveIn;
		CareChargeDays[i]=CareDaysToCharge;
		if (month(CareMonthList[i]) lt 10)
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & '0' &  month(CareMonthList[i]);}
			else
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & month(CareMonthList[i]);}
	} 
else  if ((CareMonthList[i] GT MoveInMonth) and (CareMonthList[i] lte TIPsMonth) and (i gt 1))
	{		
		WriteDump(var=MonthList[i],label='MonthList4'); 
		WriteDump(var=MoveInMonth, label='MoveInMonth4');
		WriteDump(var=i, label='i4');
		whereat = 'GT MoveInMonth - i gt 1';
		WriteDump(var=whereat,label='whereat4');
	 	CareRentDaysInMonth = DaysInMonth(CareMonthList[i]);
	 	CareDaysToCharge = CareRentDaysInMonth ;
		
	//	CareMonthList[i]=dtMoveIn;
		CareChargeDays[i]=CareDaysToCharge;
		if (month(CareMonthList[i]) lt 10)
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & '0' &  month(CareMonthList[i]);}
			else
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & month(CareMonthList[i]);}
	} 	
else {		whereat = 'else';	
		WriteDump(var=whereat,label='whereat3');
				 WriteDump(var=i, label='i3');
		WriteDump(var=CareMonthList[i],label='CareMonthList3'); WriteDump(var=MoveInMonth, label='MoveInMonth3');
	  	CareRentDaysInMonth[i] = DaysInMonth(CareMonthList[i]);
	 	CareDaysToCharge = CareRentDaysInMonth[i] - variables.MoveInDay  +1;
	//	CareMonthList[i]=dtMoveIn;
		CareChargeDays[i]=CareDaysToCharge;
		if (month(CareMonthList[i]) lt 10)
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & '0' &  month(CareMonthList[i]);}
			else
			{CareMoveInPeriod[i] = Year(CareMonthList[i]) & month(CareMonthList[i]);}
		}
		}
 </cfscript>

<cfoutput>
<br />
whereat :: #whereat#<br />
dtMoveIn :: 	#dtMoveIn# <br  />
MoveInMonth :: 	#MoveInMonth# <br  />
MoveInPeriod :: 	#MoveInPeriod#<br  />
MIDaysInMonth :: 	#MIDaysInMonth#<br  />

CurrPeriod  ::   	#CurrPeriod# <br  /> 
CurrentMonth ::  	#CurrentMonth# <br  />
CurrPeriodDays ::  	#CurrPeriodDays#<br  />
 
	
dtRent :: 	#dtRent#<br  />
RentMonth :: 	#RentMonth# <br  />
RentPeriod :: 	#RentPeriod#<br  />
RentDaysInMonth :: 	#RentDaysInMonth# <br  />

TIPSPeriod :: 	#TIPSPeriod# <br  />
TIPSMonth :: 	#TIPSMonth# <br  />
TIPSPeriodDays	 :: #TIPSPeriodDays# <br  />

RentDaysToCharge :: 	#RentDaysToCharge# <br  />
CurrentDaysToCharge	 ::  #CurrentDaysToCharge# <br />
MonthsDifference :: 	#MonthsDifference# <br  />


<!--- CareDaysToCharge :: 			#CareDaysToCharge# <br  /> --->
RentPeriod	 :: 		 #RentPeriod#   LT
CurrPeriod	 :: 		   #CurrPeriod#  
CurrentDaysToCharge		 :: 	  #CurrentDaysToCharge#  
<!--- CareMonthsDifference	 :: 		#CareMonthsDifference# <br  /> --->
			
 
<cfif arraylen(CareMonthList) gt 1>CareMonthList :: #CareMonthList[1]# <br  /><cfelse>CareMonthList :: empty <br  /</cfif>
 
		
<!--- Carelimit	 :: 		#Carelimit#<br  />
CareSub		::	#CareSub# ;
			<cfdump var="#MonthList#"  label="MonthList">;
			<cfdump var="#ChargeDays#" label="ChargeDays">;

			<cfdump var="#CareMonthList#" label="CareMonthList">;
			<cfdump var="#CareChargeDays#" label="CareChargeDays">;
			<cfdump var="#CareMoveInPeriod#" label="CareMoveInPeriod">;
			<cfdump var="#AcctMonthList#" label="AcctMonthList">; --->

</cfoutput>
<!--- <cfabort> --->


<!--- Retrieve DatabaseServer TimeStamp --->
<cfquery name="qTimeStamp" datasource="#application.datasource#">
select getdate() as timestamp,
	 Right(CONVERT(VARCHAR(8), GETDATE(), 112),4) AS Stamp2
	 ,RIGHT(CONVERT(VARCHAR(10), GETDATE(), 101),4) as Stamp3	
</cfquery>

<cfset TimeStamp = qTimeStamp.timestamp>

<cfset Rstamp = qTimeStamp.Stamp2>
<cfset ThisYear = qTimeStamp.Stamp3>
<cfset NextYear = (qTimeStamp.Stamp3 + 1)>
 
<!--- Retreive information for chosen Apartment --->
<cfquery name="AptInfo" datasource="#application.datasource#">
<!--- 	select * from AptAddress where iAptAddress_ID = #form.iAptAddress_ID# and dtRowDeleted is null --->
	select distinct TS.iAptAddress_ID  ,  APT.cdescription
	from TenantState TS
	join Tenant T on T.iTenant_ID = TS.iTenant_ID and T.dtRowDeleted is null
	join AptAddress AD on AD.iAptAddress_ID = TS.iAptAddress_ID and AD.dtRowDeleted is null
	join AptType APT on AD.iAptType_ID = APT.iAptType_ID
	where TS.dtRowDeleted is null 
	and	TS.iTenantStateCode_ID = 2
	and	AD.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
	and ts.iAptAddress_ID = #form.iAptAddress_ID#
</cfquery> 

<cfif AptInfo.iAptAddress_ID is not ''> 
	<cfset IsSecondOccupant = 'Yes'> 
<cfelse>
	<cfset IsSecondOccupant = "No">
</cfif>

<cfif find('Companion',AptInfo.cdescription) gt 1>
	<cfset IsCompanion = "Yes"> 
<cfelse>
	<cfset IsCompanion = "No">
</cfif>

 <cfquery name="bondhouse" datasource="#application.datasource#">
	select ibondhouse, cStateCode from house  where ihouse_id =  #session.qSelectedHouse.iHouse_ID#
 </cfquery>
<!---Mamta Added for BI ALtoMC switch project--->
 <cfquery name="MemoryCareAptCheck" datasource="#application.datasource#">
  Select * from aptaddress where iaptaddress_ID = #trim(form.iAptAddress_ID)#
</cfquery>
<cfdump var="#MemoryCareAptCheck#"  Label="MemoryCareAptCheck">
<!---end--->
<cftransaction>
	<cfquery name="TenantState" datasource="#application.datasource#">
		update tenantstate
		set 
			iproductline_id=#trim(form.iproductline_id)#,
			iResidencyType_ID = #trim(Form.iResidencyType_ID)#, 
			dtMoveIn = '#dateformat(trim(variables.dtMoveIn),"YYYY-MM-DD")#',
			dtRentEffective = '#dateformat(trim(variables.dtRent),"YYYY-MM-DD")#', 			
			bNextMonthsRent =  #isBlank(form.bNextMonthsRent,'null')#,
			iSPoints = #trim(form.iSPoints)#,
            iAptAddress_ID = #trim(form.iAptAddress_ID)#,
			iPrimaryDiagnosis=#isBlank(form.PrimaryDiagnosis,'null')#,
			iSecondaryDiagnosis=#isBlank(form.SecondaryDiagnosis,'null')#,
			cMilitaryVA = 
				<cfif form.cMilitaryVA neq "">
				 	'#form.cMilitaryVA#' 
				<cfelse>
				  	null 
				 </cfif>,
			
			cMilitaryStartDate = 
				<cfif form.cMilitaryStartDate neq "">
					'#form.cMilitaryStartDate#' 
				<cfelse>
					null 
				 </cfif>,
			  
			cMilitaryEndDate = 
				<cfif form.cMilitaryEndDate neq ""> 
					'#form.cMilitaryEndDate#' 
				<cfelse> 
					null 
				</cfif>,
				
			<cfif isdefined("VABenefits")>
				VABenefits = #isBlank(form.VABenefits,'null')#,
			</cfif>
			<cfif isdefined("VaRepresentativeContacted")>
				VaRepresentativeContacted = #isBlank(form.VaRepresentativeContacted,'null')#,
			</cfif>
			
			VaBranchOfMilitary = 
				<cfif form.VaBranchOfMilitary neq "">
					'#form.VaBranchOfMilitary#' 
				 <cfelse> 
					null 
				 </cfif>,
		  
			<cfif isdefined("form.iResidencyType_ID") and form.iResidencyType_ID eq 3>
				dtmoveoutprojecteddate = '#form.dtmoveoutprojecteddate#',
			</cfif>

			<cfif (ListContains(session.groupid,'240') gt 0) 
			or (ListContains(session.groupid,'192') gt 0)>
				cTenantPromotion=	
					<cfif isDefined("form.PromotionUsed")and form.PromotionUsed neq "">
						#form.PromotionUsed#,
					<cfelse>
						null,
					</cfif>
				
				<cfif isdefined("form.TenantbMICheckReceived") and form.TenantbMICheckReceived eq 1>
						bMICheckReceived = '#form.TenantbMICheckReceived#'
						,dtMICheckReceived = getdate(),
				 <cfelse>
						bMICheckReceived = 0,dtMICheckReceived = null,
				</cfif>
				
				bDeferredPayment = 	<cfif isdefined("form.TenantbDeferredPayment")
				 and form.TenantbDeferredPayment neq "">
										'#form.TenantbDeferredPayment#',
									<cfelse>
										null,
									</cfif>
			<cfelse>
				bMICheckReceived = null,
				dtMICheckReceived = null,
				bDeferredPayment = null,
			</cfif>

			dtRowStart = getdate(), 
			iRowStartUser_ID = #session.UserID# 
			<cfif IsDefined('form.VADeferral')>	   
				<cfif form.VAApprove is not null  and form.VADeferral eq 1>
					,bIsVADeferred =    1 
					,cVADefApproveUser_ID = '#form.VAApprove#' 
				</cfif>
			</cfif>
			<cfif IsDefined('form.nrfApprove')  and (form.nrfApprove is not '')  
				and (form.NRFDeferral eq 1) >
				,bIsNRFDeferred =    1 
				,cNRFDefApproveUser_ID =    '#form.nrfApprove#' 
			</cfif>
			
			<cfif IsDefined('form.nrfApprove')  and (form.nrfApprove is not '')  
				and (form.newnrfee eq 0)   >
				,cNRFDefApproveUser_ID =    '#form.nrfApprove#' 
			</cfif>	
				
			<cfif IsDefined('form.nrfee')  and (form.nrfee is not '')	>
 				<cfif AptInfo.iAptAddress_ID is not '' 
					and ((IsCompanion is "No") or (IsCompanion is ""))>		
					,mBaseNRF = 0				
				<cfelseif Tenant.iResidencyType_ID is   3>
					,mBaseNRF = 0
				<cfelse>		
					,mBaseNRF = #nrfee#
				</cfif>
			</cfif>
			
			<cfif IsDefined('form.newNRFee')  and (form.newNRFee is not '') >			
 				<cfif AptInfo.iAptAddress_ID is not ''>		
					,mAdjNRF = 0			 
				<cfelseif Tenant.iResidencyType_ID is  3>
					,mAdjNRF = 0
				<cfelse>		
					,mAdjNRF = #newNRFee#
				</cfif>
			</cfif>
			
<!--- 	99579		<cfif IsDefined('form.nrfADJApprove')  and (form.nrfADJApprove is not '') and (Tenant.iResidencyType_ID is not 3)	>	
				,cNRFAdjApprovedBy = #nrfADJApprove#  
			</cfif>	 --->			
		<cfif isdefined('amtdef') and (Tenant.iResidencyType_ID is not 3)  and (amtdef is not '')>
			,mAmtDeferred = #amtdef# 
		</cfif>
		<cfif IsDefined('MonthstoPay') and (Tenant.iResidencyType_ID is not 3) and (MonthstoPay is not '')>
			,iMonthsDeferred = #MonthstoPay#
		</cfif>
		<cfif IsDefined('AmtPAid') and (Tenant.iResidencyType_ID is not 3) and (AmtPAid is not '')>
			,mAmtNRFPaid = #AmtPAid#
		</cfif>

		<cfif (IsDefined("FeeType") and (FeeType is not ''))>
			,cSecDepCommFee = '#FeeType#'
		</cfif>
		<cfif (IsDefined("cSex") and (cSex is not ''))>
			,cSex = '#cSex#'
		</cfif>		
		<cfif (IsDefined("cMedicaidAuthorizationNbr") and (cMedicaidAuthorizationNbr is not ''))>
			,cMedicaidAuthorizationNbr = '#cMedicaidAuthorizationNbr#'
		</cfif>		
		<cfif (IsDefined("dtFDOS") and (dtFDOS is not ''))>
			,dtAuthFDOS = #CreateODBCDateTime(dtFDOS)#
		</cfif>		
		<cfif (IsDefined("dtTDOS") and (dtTDOS is not ''))>
			,dtAuthTDOS = #CreateODBCDateTime(dtTDOS)#
		</cfif>
		<cfif (IsDefined("cNJHSP") and (cNJHSP is not ''))>
			,cNJHSP = '#cNJHSP#'
		</cfif>		
		<cfif (IsDefined("mMedicaidCopay") and (mMedicaidCopay is not ''))>
			,mMedicaidCopay = #mMedicaidCopay#
		</cfif>						
		<cfif (IsDefined("iPICD") and (iPICD is not ''))>
			,iPICD = '#iPICD#'
		</cfif>		
		<cfif (IsDefined("iSICD") and (iSICD is not ''))>
			,iSICD = '#iSICD#'
		</cfif>		
		<cfif (IsDefined("iTICD") and (iTICD is not ''))>
			,iTICD = '#iTICD#'
		</cfif>		
		<cfif (IsDefined("cMCO") and (cMCO is not ''))>
			,iMCOProvider = '#cMCO#'
		</cfif>	
		<!---Update the AL to MC switch if the aptaddress is bismemorycareelgible--for the ALto MC switch BI project--->
		<cfif #MemoryCareAptCheck.bismemorycareeligible# eq 1>
	      ,dtMCSwitch= #trim(variables.dtRent)#
	    <cfelse>  
	     ,dtMCSwitch= Null
	    </cfif>			
		where iTenant_ID = #form.iTenant_ID#
		
	</cfquery>
	
</cftransaction>

<!--- Retrieve all information from tenant table for this tenant --->
<cfquery name="TenantInfo" datasource="#application.datasource#">
	select distinct t.*, tc.*, ad.*, ap.cDescription as RoomType, rt.*, ts.*
	from tenant t
	join tenantstate ts on t.iTenant_ID = ts.iTenant_ID
	join tenantstatecodes tc on ts.iTenantStateCode_ID = tc.iTenantStateCode_ID
	join aptaddress ad on ts.iAptAddress_ID = ad.iAptAddress_ID
	join apttype ap on ap.iAptType_ID = ad.iAptType_ID
	join ResidencyType rt on ts.iResidencyType_ID = rt.iResidencyType_ID
	where t.iTenant_ID = <cfif IsDefined("url.ID") and url.ID neq "">#url.ID# <cfelse> #form.iTenant_ID#</cfif>
</cfquery>

<cftransaction>

<!---  Bond Update on tenant --->
<cfif bondhouse.ibondhouse eq 1> 
	<cfquery name="UpdateTenantBondInfo" datasource="#application.datasource#">
		Update Tenant
		Set 
		<cfif isdefined("form.cBondQualifying") and form.cBondQualifying neq "">
			bIsBond = '#form.cBondQualifying#',
		</cfif>
		<cfif isdefined("form.dtBondCertificationMailed") and ((form.dtBondCertificationMailed neq "") or (form.dtBondCertificationMailed neq "00/00/0000"))>
			dtBondCert = '#form.dtBondCertificationMailed#'
		<cfelse>
			dtBondCert = getdate()
		</cfif>
		,cRowEndUser_ID = '#SESSION.USERNAME#'
		Where iTenant_ID = #form.iTenant_ID#
	</cfquery>
	<cfquery name="TenantBondCheck" datasource="#application.datasource#">
		select bIsBond from tenant where iTenant_ID = #form.iTenant_ID#
	</cfquery>
	<cfquery name="RoomBondCheck" datasource="#application.datasource#">
		select bBondIncluded from AptAddress where iAptAddress_ID = #form.iAptAddress_ID#
	</cfquery>
	<cfif TenantBondCheck.bIsBond eq 1 and RoomBondCheck.bBondIncluded eq 1>
		<cfquery name="TurnRoomBond" datasource="#application.datasource#">
			Update AptAddress
			Set bIsBond = 1,cRowEndUser_ID = '#SESSION.USERNAME#'
			where iAptAddress_id = #form.iAptAddress_ID#
		</cfquery>
	</cfif>
</cfif>

<cfquery name="UpdateTenantPayer" datasource="#application.datasource#">
	update Tenant
		set cMiddleInitial = 
		<cfif form.cMiddleInitial neq ''> 
			'#form.cMiddleInitial#' 
		<cfelse> 
			null 
		</cfif>,
			cSSN = <cfif form.cSSN neq ''> '#form.cSSN#' <cfelse> null </cfif>,
			dBirthDate = '#form.dbirthdate#',
			csleveltypeset='#trim(form.csleveltypeset)#',
			<cfif IsDefined("form.TenantbIsPayer") and form.TenantbIsPayer neq "">
				bIsPayer = #form.TenantbIsPayer#,
			<cfelse> 
				bIsPayer = null, 
			</cfif>
		    <cfif IsDefined("session.cBillingType") and session.cBillingType neq '' and form.iproductline_ID eq 2>
			     cbillingtype = 'M',
			 <cfelse> cbillingtype = '#session.cbillingtype#',</cfif>
			<cfif (ListContains(session.groupid,'240') gt 0) 
				or (ListContains(session.groupid,'192') gt 0)> 	
				<cfif IsDefined("form.cResidenceAgreement")and form.cResidenceAgreement neq "">
					cResidenceAgreement = #form.cResidenceAgreement#, 
				<cfelse>
					cResidenceAgreement = null ,
				</cfif>
			</cfif>
			<cfif IsDefined("form.hasExecutor") and form.hasExecutor neq "">
				chasExecutor = #form.hasExecutor#,
			<cfelse>
				chasExecutor = null,
			</cfif>
			<cfif (ListContains(session.groupid,'240') gt 0) 
				or (ListContains(session.groupid,'192') gt 0)>
				<cfif IsDefined("form.cResidentFee") and form.cResidentFee neq "">
					cResidentFee=#trim(form.cResidentFee)#, 
				<cfelse>
					cResidentFee=null,
				</cfif>
			</cfif>

			cPreviousAddressLine1 = 
			<cfif form.cPreviousAddressLine1 neq ''>
			 	'#form.cPreviousAddressLine1#' 
			 <cfelse> 
			 	null 
			 </cfif>,
			cPreviousAddressLine2 = 
			<cfif form.cPreviousAddressLine2 neq ''> 
				'#form.cPreviousAddressLine2#' 
			<cfelse> 
				null 
			</cfif>,
			cPreviousCity = 
			<cfif form.cPreviousCity neq ''> 
				'#form.cPreviousCity#' 
			<cfelse> 
				null 
			</cfif>,
			cPreviousState = 
			<cfif form.cPreviousState neq ''> 
				'#form.cPreviousState#' 
			<cfelse> 
				null 
			</cfif>,
			cPreviousZipCode = 
			<cfif form.cPreviousZipCode neq ''> 
				'#form.cPreviousZipCode#' 
			<cfelse>
			 	null 
			 </cfif>
			where iTenant_ID = #form.iTenant_ID#
</cfquery>
<!---mamta testing billing type ResidentCare <cfquery name="cBillingType" datasource="#application.datasource#">
			select cBillingType from tenant
			WHERE iTenant_ID = #form.iTenant_ID#
		</cfquery>
<cfoutput> testing cBillingType.cBillingType #cBillingType.cBillingType#</cfoutput>--->
<!--- Retreive contact information --->
<cfquery name="contactinfo" datasource="#application.datasource#">
	select c.*, ltc.*, R.cDescription as Relation
	from tenant T
	join LinkTenantContact ltc on t.iTenant_ID = ltc.iTenant_ID
	join contact c on c.iContact_ID = ltc.iContact_ID
	join RelationShipType R on ltc.iRelationshipType_ID = R.iRelationshipType_ID
	where t.iTenant_ID = <cfif IsDefined("url.ID") and url.ID neq ""> #url.ID# <cfelse> #form.iTenant_ID# </cfif>
</cfquery>

	<!--- Get Invoice Master Info For Record Being Generated By Activate without billing --->

<cfquery name="GetInvoiceMasterInfo" datasource="#application.datasource#">
	Select 	iInvoiceMaster_ID 
	from Invoicemaster where csolomonkey ='#Tenant.csolomonkey#'
</cfquery>

<!--- 10/23/2008 Project 29842 mark it as deleted in the invoicemaster table if there is a record prior to move in of the resident --->
<cfif GetInvoiceMasterInfo.RecordCount neq 0>
	<cfquery name="deleteInvoicemasterRecord" datasource="#application.datasource#">
		update Invoicemaster set 
		dtrowdeleted=getdate() 
		,irowdeleteduser_id = #session.UserId#
		where csolomonkey ='#Tenant.csolomonkey#'
	</cfquery>
</cfif> 

<!--- Check for MI for this specific tenant with no other residents on it  --->
<cfquery name="MoveInInvoiceCheck" datasource="#application.datasource#">
	Select im.iInvoiceMaster_ID 
	From InvoiceMaster im
	Join InvoiceDetail inv on (inv.iInvoiceMaster_ID = im.iInvoiceMaster_ID 
		and inv.dtRowDeleted is null)
	Where im.dtRowDeleted is null 
	and im.bMoveInInvoice is not null 
	and im.bFinalized is null 
	and inv.iTenant_ID = #Tenant.iTenant_ID#
	and 1 = (select count(distinct itenant_id) from invoicedetail sd
			where dtrowdeleted is null and sd.iinvoicemaster_id = inv.iinvoicemaster_id)
</cfquery>

<cfif MoveInInvoiceCheck.RecordCount eq 0>
	<!---	Check InvoiceMaster for Existing MoveIn Invoice for this cSolomonKey
	that is not finalized with not details--->
	<cfquery name="MoveInInvoiceCheck" datasource="#application.datasource#">
		select * from InvoiceMaster im
		where im.dtRowDeleted is null and im.bMoveInInvoice is not null and im.bFinalized is null
		and im.cSolomonKey = '#Tenant.cSolomonKey#'
		and 0=(select count(*) from InvoiceDetail where dtRowDeleted is null 
		and iInvoiceMaster_ID = im.iInvoiceMaster_ID)
	</cfquery>
</cfif>

<cfif MoveInInvoiceCheck.iInvoiceMaster_ID neq "" and MoveInInvoiceCheck.iInvoiceMaster_ID neq 0>
	<!--- ==============================================================================
	Delete ALL System Generated Invoice Details. (signified by user 0) These charges WILL BE Re-Generated BELOW.
	=============================================================================== --->
	<cfquery name="DeleteSystemDetails" datasource="#application.datasource#">
		update invoicedetail
		set	dtrowdeleted=getdate() ,irowdeleteduser_id = #session.UserId#
		from invoicedetail inv
		join invoicemaster im on im.iinvoicemaster_id = inv.iinvoicemaster_id
		and im.dtrowdeleted is null and inv.dtrowdeleted is null
		and im.bmoveininvoice is not null and im.bmoveoutinvoice is null
		where ((inv.irowstartuser_id = 0)  or (inv.irowstartuser_id = null ))and inv.itenant_id = #form.itenant_id#
	</cfquery>
</cfif>

<!---If there no available invoice.
We get the next number from house number control and update the invoice master table--->
<cfif MoveInInvoiceCheck.RecordCount LTE 0>
	<!--- Retrieve Next invoice number from the control table --->
	<cfquery name="GetNextInvoice" datasource="#application.datasource#">
		select iNextInvoice from HouseNumberControl 
		where iHouse_ID = #session.qSelectedHouse.iHouse_ID#
	</cfquery>

	<cfscript> //Set variables for house number and invoicenumber
		HouseNumber = session.HouseNumber; 
		iInvoiceNumber = '#variables.HouseNumber#' & GetNextInvoice.iNextInvoice;
	</cfscript>

	<!--- Create New Invoice --->
	<!--- 25575 - 6/11/2010 - rts - Respite Invoice Creation --->
	<cfif TenantInfo.iResidencyType_ID neq 3>
		<cfquery name="NewInvoice" datasource="#application.datasource#">
		insert into InvoiceMaster
		(iInvoiceNumber ,cSolomonKey ,bMoveInInvoice ,bFinalized 
		,cAppliesToAcctPeriod ,cComments ,dtAcctStamp ,iRowStartUser_ID ,dtRowStart)
		values
		('#variables.iInvoiceNumber#' ,'#Tenant.cSolomonKey#' ,1 ,null 
		,'#CurrPeriod#' ,null ,#CreateODBCDateTime(session.AcctStamp)# 
		,#session.UserID# ,getdate()	)
		</cfquery>
		<cfoutput>A insert into InvoiceMaster #variables.iInvoiceNumber#</cfoutput><br />
	<cfelse>
	<!---QUERIES  --->
		<cfquery name="TenantDates" datasource="#application.datasource#">
			select dateadd(dd,1,'#TenantInfo.dtMoveOutProjectedDate#') as NewPMODate
			,convert(varchar(10),(dateadd(dd,0,'#TenantInfo.dtRentEffective#')),101) as NextStartDate
		</cfquery>
		<cfset NextStartDate = TenantDates.NextStartDate>
		<cfquery name="AdjustEndPMODatemin" datasource="#application.datasource#">
			select dateadd(ss,-1,'#TenantDates.NewPMODate#') as PMODate
		</cfquery>
		<cfset PMODate = AdjustEndPMODatemin.PMODate>
		<cfquery name="GetQuantityForNewINV" datasource="#application.datasource#">
			select datediff(dd,'#NextStartDate#', '#PMODate#') + 1 as Days
		</cfquery>
		<cfquery name="GetQuantityForNewINVCare" datasource="#application.datasource#">
		select datediff(dd,'#TenantInfo.dtMoveIn#', '#PMODate#') + 1 as CareDays
		</cfquery>	
				
		<cfquery name="NewInvoice" datasource="#application.datasource#">
			insert into InvoiceMaster
			(iInvoiceNumber ,cSolomonKey ,bMoveInInvoice ,bFinalized ,cAppliesToAcctPeriod 
			,dtInvoiceStart,dtInvoiceEnd
			,cComments ,dtAcctStamp ,iRowStartUser_ID ,dtRowStart)
			values
			('#variables.iInvoiceNumber#' ,'#Tenant.cSolomonKey#' ,1 ,null ,'#CurrPeriod#' 
			,'#TenantInfo.dtRentEffective#','#AdjustEndPMODatemin.PMODate#'
			,null ,#CreateODBCDateTime(session.AcctStamp)# ,#session.UserID# ,getdate()	)
		</cfquery>
				<cfoutput>B insert into InvoiceMaster #variables.iInvoiceNumber#</cfoutput><br />
	</cfif>

	<!--- Calcluate next invoice number --->
	<cfset iNewNextInvoice = getNextInvoice.iNextInvoice + 1>

	<!--- Write next invoice to control table --->
	<cfquery name="HouseNumberControl" datasource="#application.datasource#">
		update HouseNumberControl
		set iNextInvoice = #variables.iNewNextInvoice# 
		,iRowStartUser_ID = #session.USERID# ,dtRowStart = getdate()
		where iHouse_ID = #session.qSelectedHouse.iHouse_ID#
	</cfquery>
	
	<cfquery name="GetMIAutoApplyCharges" datasource="#APPLICATION.datasource#">
		select c.*,isnull(ct.bIsDaily,'0') as bIsDaily 
		from Charges c 
		join ChargeType ct on (ct.iChargeType_ID = c.iChargeType_ID)
		where c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		and c.cChargeSet = (select cs.cName from Chargeset cs join House h 
			on (h.iChargeSet_ID = cs.iChargeSet_ID 
			and h.iHouse_ID = #session.qSelectedHouse.iHouse_ID#))
		and c.dtRowDeleted is null
		and getdate() between c.dteffectivestart and c.dteffectiveend		
		<cfif (IsDefined("FeeType") and (FeeType is not ''))>
			<cfif FeeType is 'SC'>
				and c.ichargetype_id = 53
			<cfelseif FeeType is 'CF'>
				and c.ichargetype_id = 69
			</cfif>
		</cfif>
		<cfif TenantInfo.iresidencytype_id is 2>
			and c.iChargeType_ID not in (53,69,91,89,7,96,14,1748)
		<cfelse>
			and c.iChargeType_ID not in (91,89,7,96)
		</cfif>
		and c.bIsMoveInCharge = 1
  
	</cfquery>
<cfoutput>
<br />
TenantInfo.iResidencyType_ID:: #TenantInfo.iResidencyType_ID# TenantInfo.iResidencyType_ID:: #TenantInfo.iResidencyType_ID#
<br />
</cfoutput> 
 
	<!--- Retrieve the new created iInvoicemaster_ID --->
	<cfquery name="NewMasterID" datasource="#application.datasource#">
		select iInvoiceMaster_ID from InvoiceMaster	where dtRowDeleted is null
		and cSolomonKey = '#Tenant.cSolomonKey#' 
		<cfif TenantInfo.iResidencyType_ID neq 3>
			and bMoveInInvoice is not null 
		</cfif>
		and bFinalized is null
		and iInvoiceNumber = '#variables.iInvoiceNumber#'
	</cfquery>

	<!--- Set varailbe for the new iInvoiceMaster_ID --->
	<cfset iInvoiceMaster_ID = NewMasterID.iInvoiceMaster_ID>

<cfelse>
		<cfquery name="TenantDates" datasource="#application.datasource#">
			select dateadd(dd,1,'#TenantInfo.dtMoveOutProjectedDate#') as NewPMODate
			,convert(varchar(10),(dateadd(dd,0,'#TenantInfo.dtRentEffective#')),101) as NextStartDate
		</cfquery>
		<cfquery name="AdjustEndPMODatemin" datasource="dbquery">
			select dateadd(ss,-1,'#TenantDates.NewPMODate#') as PMODate
		</cfquery>
		<cfset PMODate = AdjustEndPMODatemin.PMODate>
		<cfquery name="GetQuantityForNewINV" datasource="#application.datasource#">
			select datediff(dd,'#TenantInfo.dtRentEffective#', '#PMODate#') + 1 as Days
		</cfquery>
		<cfquery name="GetQuantityForNewINVCare" datasource="#application.datasource#">
		select datediff(dd,'#TenantInfo.dtMoveIn#', '#PMODate#') + 1 as CareDays
		</cfquery>	
				
	<cfscript>
		//Set variable for the new iInvoiceMaster_ID And the InvoiceNumber
		iInvoiceMaster_ID = MoveInInvoiceCheck.iInvoiceMaster_ID;
		iInvoiceNumber = '#MoveInInvoiceCheck.iInvoiceNumber#';
	</cfscript>
</cfif>

<cfquery name='qHistSet' datasource="#application.datasource#">
	select distinct tendtRowStart, cSLevelTypeSet, tendtRowEnd, tendtRowDeleted
	from rw.vw_tenant_history_with_state
	where iTenant_ID = #TenantInfo.iTenant_ID#
	and '#TenantInfo.dtMoveIn#' between tenDtRowStart and tendtRowEnd
	order by tenDtRowStart desc
</cfquery>

<!--- Calculate ServiceLevel --->
<cfquery name="SLevel" datasource="#application.datasource#">
	select 	cDescription, cSLevelTypeSet, iSLevelType_ID, iSPointsMin, iSPointsMax
	from 	SLevelType where dtRowDeleted is null
	and (iSPointsMin <= #form.iSPoints# and iSPointsMax >= #form.iSPoints#)
	<cfif qHistSet.RecordCount gt 0 and qHistSet.cSLevelTypeSet neq '' and 1 eq 0>
		and cSLevelTypeSet = #qHistSet.cSLevelTypeSet#
	<cfelseif trim(TenantInfo.cSLevelTypeSet) neq "" and TenantInfo.cSLevelTypeSet neq 0>
		and cSLevelTypeSet = #TenantInfo.cSLevelTypeSet#
	<cfelse>
		and cSLevelTypeSet = #session.qselectedhouse.cSLevelTypeSet#
	</cfif>
</cfquery>
<!--- <br /><cfdump var="#SLevel#" label="SLevel"><br /> --->
<!--- Do not Charge Standard Rent for Medicaid. For Mediciad it must be keyed in manually --->
<cfset Occupancy = 1>
<cfif TenantInfo.iResidencyType_ID neq 99> <!--- changed from 2 excluded Medicaid --->
	<cfquery name="FindOccupancy" datasource="#application.datasource#">
	select t.iTenant_ID, iResidencyType_ID, ST.cDescription as Level, ts.dtMoveIn, ts.dtMoveOut
	from AptAddress AD
	join TenantState ts on (ts.iAptAddress_ID = ad.iAptAddress_ID and ts.dtRowDeleted is null)
	join Tenant T	on (t.iTenant_ID = ts.iTenant_ID and t.dtRowDeleted is null)
	join SLevelType ST on (ST.cSLevelTypeSet = t.cSLevelTypeSet 
	and ts.iSPoints between ST.iSPointsMin and ST.iSPointsMax)
	where ad.dtRowDeleted is null and ts.iTenantStateCode_ID = 2
		and ad.iAptAddress_ID = #form.iAptAddress_ID#	
		and ts.iTenant_ID <> #Tenant.iTenant_ID#
	</cfquery>

	<cfif FindOccupancy.RecordCount gt 0>
		<cfif FindOccupancy.Level GTE SLevel.cDescription or (FindOccupancy.iResidencyType_ID eq 1 
			and TenantInfo.iResidencyType_ID eq 2)
			or (FindOccupancy.dtMoveIn LTE createODBCDateTime(variables.dtMovein))>
			<cfset Occupancy = 2>
		<cfelse> 
			<cfset Occupancy = 1> 
		</cfif>
	<cfelse> 
		<cfset Occupancy = 1> 
	</cfif>
	
<br /><cfoutput>
FindOccupancy.RecordCount:: #FindOccupancy.RecordCount# :::
#FindOccupancy.Level# GTE #SLevel.cDescription#
 or  #FindOccupancy.iResidencyType_ID# eq 1 
and #TenantInfo.iResidencyType_ID# eq 2)
or (#FindOccupancy.dtMoveIn# LTE #createODBCDateTime(variables.dtMovein)#)
<br />Occupancy:: #Occupancy#
</cfoutput><br />

	<cfquery name="CheckCompanionFlag" datasource="#application.datasource#">
		select bIsCompanionSuite from AptAddress AD
		join AptType AT on (ad.iAptType_ID = at.iAptType_ID and at.dtRowDeleted is null)
		where ad.dtRowDeleted is null and ad.iAptAddress_ID = #form.iAptAddress_ID#
	</cfquery>
	<cfif checkCompanionFlag.bIsCompanionSuite eq 1> <cfset Occupancy = 1> </cfif>

	<br /><cfoutput>ArrayLen(MonthList:: #ArrayLen(MonthList)#</cfoutput><br />

<cfif TenantInfo.iResidencyType_ID neq 3 and  TenantInfo.iResidencyType_ID neq 2>
<cfloop from=1 TO='#ArrayLen(MonthList)#' step='1' index=I>
 <br /><cfoutput>MonthList:: #MonthList[i]#</cfoutput><br />
	<!--- create Rent InvoiceDetail --->
	<cfquery name="StandardRent" datasource="#application.datasource#">
		select 
			 c.cDescription 
			,c.mAmount 
			,c.iQuantity 
			,ct.iChargeType_ID
		from charges c
		inner join chargeType ct on (ct.iChargeType_ID = c.iChargeType_ID and ct.dtRowDeleted is null)
		where c.dtRowDeleted is null
		<cfif TenantInfo.cChargeSet neq ""> 
			and c.cChargeSet = '#TenantInfo.cChargeSet#' 
		<cfelse> 
			and c.cChargeSet is null 
		</cfif>
		and ct.bIsRent is not null

		and ct.bIsDiscount is null 
		and ct.bIsRentAdjustment is null 
		<cfif tenantinfo.iresidencytype_id is 1>
			and ct.bIsMedicaid is null
			<cfif Occupancy eq 1> 
				and c.iOccupancyPosition = 1
				and ct.bAptType_ID is not null
			<cfelse>
				and c.iOccupancyPosition = 2
				and ct.bAptType_ID is null		
			</cfif>
			and c.iAptType_ID = #TenantInfo.iAptType_ID#
		</cfif>	 
		 
		  and ct.bIsDaily is not null 
		and ct.bSLevelType_ID is null
		and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID#
		and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID# 
	 
		and dtEffectiveStart <= #MonthList[i]# 
		and c.iproductline_id = #TenantInfo.iProductLine_ID#
		and dtEffectiveEnd >= #MonthList[i]#
		order by c.dtRowStart Desc
	</cfquery>

	<cfif StandardRent.RecordCount eq '0'>
			<cfoutput>StandardRent.RecordCount :: #StandardRent.RecordCount#<br /></cfoutput> 
		<!--- MLAW 08/22/2006 Add iProductline_ID filter --->
		<cfquery name="StandardRent" datasource="#application.datasource#">
		select 
			 c.iChargeType_ID
			,c.iQuantity
			,c.cDescription
			,c.mAmount
		from 
			charges c 
			inner join 	residencytype rt on	c.iResidencyType_ID = rt.iResidencyType_ID
			left outer join	SLevelType ST on c.iSLevelType_ID = ST.iSLevelType_ID
			inner join chargeType ct	 on	ct.iChargeType_ID = c.iChargeType_ID
		where 
			c.dtRowDeleted is null 
		and ct.dtRowDeleted is null
		and IsNull(c.iOccupancyPosition,1) = #Occupancy#
		<cfif TenantInfo.cChargeSet neq ""> 
			and c.cChargeSet = '#TenantInfo.cChargeSet#' 
		<cfelse> 
			and c.cChargeSet is null 
		</cfif>
		<cfif TenantInfo.iResidencyType_ID neq 3>
			<cfif Occupancy neq 2> 
			and c.iAptType_ID = #TenantInfo.iAptType_ID# 
			<cfelse> 
			and c.iAptType_ID is null 
			</cfif>
			<!--- and c.iSLevelType_ID = #SLevel.iSLevelType_ID # --->
			and ct.bIsDaily is null
		</cfif>
		and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID#
		and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		and ((iCharge_id = (select 
							top 1 iCharge_id 
						from rw.vw_charges_history 
						where ihouse_id = #session.qSelectedHouse.iHouse_ID# 
						and #MonthList[i]# between dtrowstart 
						and isNull(dtrowend,getdate())
						and iChargeType_ID = c.iChargeType_ID 
						and iAptType_ID = c.iAptType_ID 
						and cSLevelDescription = c.cSLevelDescription 
						<!--- and iSLevelType_ID = #SLevel.iSLevelType_ID# ---> 
						and iproductline_id = #TenantInfo.iProductLine_ID#
						and dtRowDeleted is null)) 
				or( dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]#) )
		and c.iproductline_id = #TenantInfo.iProductLine_ID#
		order by c.dtRowStart Desc
		</cfquery>
		<br />	<cfoutput>StandardRent2:: #StandardRent.mamount#</cfoutput><br />
	</cfif>
	<cfdump var="#StandardRent#" label="StandardRent">
<br />	<cfoutput>here:  #form.iTenant_ID#</cfoutput><br />
 <cfdump var="#TenantInfo#" label="TenantInfo"> 
 <cfdump var="#StandardRent#" label="StandardRent"> 
<!---<form method="post"  action="moveincredits.cfm">
	<input type="hidden" name="standardrent" value="#StandardRent.mAmount#" />
</form>--->
	<cfquery name="DailyRent" datasource="#application.datasource#">
		select c.cDescription ,c.mAmount ,c.iQuantity ,ct.iChargeType_ID
		from charges c
		inner join 	chargeType ct on (ct.iChargeType_ID = c.iChargeType_ID 
				and ct.dtRowDeleted is null)
		where c.dtRowDeleted is null
		<cfif TenantInfo.cChargeSet neq ""> 
			and c.cChargeSet = '#TenantInfo.cChargeSet#' 
		<cfelse> 
			and c.cChargeSet is null 
		</cfif>
		and ct.bIsRent is not null
		and ct.bIsDiscount is null 
		and ct.bIsRentAdjustment is null 

		<cfif TenantInfo.iResidencyType_ID eq 3>
			and (c.iAptType_ID is null or c.iAptType_ID = #TenantInfo.iAptType_id#)
			
			<cfif Occupancy eq 1>
				and ct.bIsDaily is not null and ct.bSLevelType_ID is null
			<cfelse>
				and c.iAptType_ID is null
			</cfif>
		<cfelseif TenantInfo.iResidencyType_ID eq 1>
			<cfif Occupancy eq 1>
				and c.iOccupancyPosition = 1 
				and c.iAptType_ID = #TenantInfo.iAptType_ID#
			<cfelse>
				and c.iOccupancyPosition = 2
			</cfif>		
			
			and ct.bIsMedicaid is null

				and dtEffectiveStart <= #MonthList[i]# and dtEffectiveEnd >= #MonthList[i]#
				<cfif TenantInfo.cChargeSet neq '' and TenantInfo.iResidencyType_ID neq 3>
					and c.cChargeSet = '#TenantInfo.cChargeSet#'
				<cfelse>
					and c.cChargeSet is null
				</cfif>
 		<cfelseif TenantInfo.iResidencyType_ID eq 5>
			and ct.bIsDaily is  not null  
		</cfif>
				and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID#
				and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
				and c.iProductLine_ID = #TenantInfo.iProductLine_ID#
		order by c.dtRowStart Desc
	</cfquery>

	<!--- Stop Processing if no Rent records found --->
	<cfif DailyRent.Recordcount eq 0 and StandardRent.recordcount eq 0>
		<cfquery name="GetDescriptions" datasource="#application.datasource#">
			SELECT P.cDescription AS ProductLine
				,R.cDescription AS ResidencyType
				,A.cDescription AS AptType
			FROM
				 ProductLine P
				,ResidencyType R
				,AptType A
			WHERE	P.iProductLine_ID = #TenantInfo.iProductLine_ID#
			AND	R.iResidencyType_ID = #TenantInfo.iResidencyType_ID#
			AND A.iAptType_ID = #TenantInfo.iAptType_id#
		</cfquery>
		
		<strong>
		<cfoutput>
			<font face="arial" size="4" color="red">
			There was no r&b charge found for this tenant.
			</font>
			<br><br>
			Pleast contact AR and tell them that a charge needs to be added for:
			<ul>
				<li><font face="arial" size="1">
				<strong>Apartment Type</strong>: #GetDescriptions.AptType#</font></li>
				<li><font face="arial" size="1">
				<strong>Residency Type</strong>: #GetDescriptions.ResidencyType#</font></li>
				<li><font face="arial" size="1">
				<strong>Product Line</strong>: #GetDescriptions.ProductLine#</font></li>
				<li><font face="arial" size="1">
				<strong>Charge Set</strong>: 
				<cfif TenantInfo.cChargeSet eq "">
					NULL (HR may need to call TIPS Support)
				<cfelse>
					#TenantInfo.cChargeSet#
				</cfif>
				</font></li>
			</ul>
			<a href="javaScript:window.history.go(-1)">
			<font face="arial" size="1">Click Here</font></a>
			<font face="arial" size="1">to return to the previous page.</font>
		</strong>
		</cfoutput>
		<cfabort>
	</cfif>	
	
	<cfoutput><cfdump var="#DailyRent#" label="DailyRent"></cfoutput>
 	
	<cfquery name='qResidentCare' datasource="#application.datasource#">
		select c.cDescription ,c.mAmount ,c.iQuantity ,ct.iChargeType_ID
		from charges c
		join chargeType ct on (ct.iChargeType_ID = c.iChargeType_ID and ct.dtRowDeleted is null)
		and ct.bIsRent is not null and ct.bIsMedicaid is null and ct.bIsDiscount is null
		and ct.bIsRentAdjustment is null
		where c.dtRowDeleted is null and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		<cfif TenantInfo.cChargeSet neq ''>
			and c.cChargeSet = '#TenantInfo.cChargeSet#'
		<cfelse>
			and c.cChargeSet is null
		</cfif>
		and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# and c.iAptType_ID is null
		 and iSLevelType_ID = #SLevel.iSLevelType_ID# and ct.bIsDaily is null
		and iOccupancyPosition is null and dtEffectiveStart <= #MonthList[i]# 
		and dtEffectiveEnd >= #MonthList[i]#
	</cfquery>
<!--- <cfdump var="#qResidentCare#" label="qResidentCare"> --->
	<cfquery name='qDailyCare' datasource="#application.datasource#">
		select c.cDescription ,c.mAmount ,c.iQuantity ,ct.iChargeType_ID
		from charges c
		join chargeType ct on (ct.iChargeType_ID = c.iChargeType_ID and ct.dtRowDeleted is null)
		and ct.bIsRent is not null and ct.bIsMedicaid is null and ct.bIsDiscount is null
		and ct.bIsRentAdjustment is null
		where c.dtRowDeleted is null and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
		<cfif TenantInfo.cChargeSet neq ''>
			and c.cChargeSet = '#TenantInfo.cChargeSet#'
		<cfelse>
			and c.cChargeSet is null
		</cfif>
		and c.iResidencyType_ID = #TenantInfo.iResidencyType_ID# and c.iAptType_ID is null 
		and iSLevelType_ID = #SLevel.iSLevelType_ID# and ct.bIsDaily is not null
		and iOccupancyPosition is null and dtEffectiveStart <= #MonthList[i]# 
		and dtEffectiveEnd >= #MonthList[i]#
	</cfquery>
<cfdump var="#qDailyCare#" label="qDailyCare">
<!--- <cfoutput><br />billing:: #billing#<br /></cfoutput> ---> 
	<cfscript>
		DaysInHouse = (DaysInMonth(TenantInfo.dtMoveIn) - Day(TenantInfo.dtMoveIn)) + 1;
		if ((DaysInHouse GTE 30 or (DaysInHouse eq DaysInMonth(MonthList[i])) OR
			(Month(TenantInfo.dtMoveIn) eq 2 
			and variables.DaysInHouse eq DaysInMonth(TenantInfo.dtMoveIn)))
			and TenantInfo.iResidencyType_ID neq 3)
		{ FullMonth=1; DaysInHouse = 30; }
		else { FullMonth=0; }

		switch (billing){
			case 'daily':
				ConvertedDays=ChargeDays[i];
				ConvertedDescription=  left(ucase(left(TenantInfo.cFirstName,1)) & '.' 
				& TenantInfo.cLastName 
					& ': ' & DailyRent.cDescription,50);
				ConvertedChargeType=DailyRent.iChargeType_ID;
				ConvertedAmount=DailyRent.mAmount;
				if (I LTE Carelimit)
			 	{ConvertedCareDays=CareChargeDays[i];	}
						else	{ConvertedCareDays=0;}
				ConvertedCareAmount=qDailyCare.mAmount;
				ConvertedCareChargeType=qDailyCare.iChargeType_ID;
				ConvertedCareDescription= left(ucase(left(TenantInfo.cFirstName,1)) & '.' 
				& TenantInfo.cLastName 
					& ': ' & qDailyCare.cDescription,50);
			break;
			case 'monthly':
				ConvertedDays=1;
				if (TenantInfo.iResidencyType_ID neq 3 and (DaysInMonth(MonthList[i]) - 
					Day(TenantInfo.dtMoveIn) +1 GTE 30 
						or chargeDays[i] GTE 30 or chargeDays[i] eq DaysInMonth(MonthList[i])) )
					 {ProrateDays=0; } 
				else
					{ ProrateDays=1; }
				if(ProrateDays eq 0){
					ConvertedDays=1;
					ConvertedDescription=StandardRent.cDescription;
					ConvertedAmount=StandardRent.mAmount;
					ConvertedChargeType=StandardRent.iChargeType_ID;
					
					ConvertedCareAmount=qResidentCare.mAmount;
					ConvertedCareChargeType=qResidentCare.iChargeType_ID;
					ConvertedCareDescription=qResidentCare.cDescription;
				}
				else{
					ConvertedDays=1;
					ConvertedDescription=StandardRent.cDescription;
					 
					 ConvertedChargeType=StandardRent.iChargeType_ID; 
					ConvertedAmount=(StandardRent.mAmount * (ChargeDays[i]) / DaysInMonth(MonthList[i]));
					ConvertedCareDays=1;
					ConvertedCareAmount=qDailyCare.mAmount;
					ConvertedCareChargeType=qDailyCare.iChargeType_ID;
					ConvertedCareDescription=qDailyCare.cDescription;
				}
			break;
			default: convertedDays='AAA';
		}
	</cfscript>
	<cfif #ConvertedChargeType# eq 1748 or #ConvertedChargeType# eq 1682>
		<cfset ConvertedAmount= #StandardRent.mAmount#/#DaysInMonth(MonthList[i])#* #ChargeDays[i]#>
	</cfif>
	<cfoutput>test #ConvertedAmount# #ConvertedChargeType# #StandardRent.mAmount# * #(ChargeDays[i])# / #DaysInMonth(MonthList[i])#</cfoutput>
	
	<cfif DailyRent.mAmount neq "">
		<cfset DailyRate = DailyRent.mAmount>

	<cfelseif Isdefined('StandardRent.mAmount') and StandardRent.mAmount gt 0>
		<cfset DailyRate = StandardRent.mAmount>
<!--- 	<cfelseif TenantInfo.iResidencyType_ID neq 3> --->
	<cfelse>
		<B style="font-size:18;">The Daily Rate is missing for this type of Applicant.</B><br/>
		<cfoutput>
			<A style="color:red;font-size:18;" HREF="MoveInForm.cfm?ID=#TenantInfo.iTenant_ID#"> 
			click Here to Return to the Move In form. </A>
			<CFABORT>
		</cfoutput>

	</cfif>

	<cfscript>
		Value = StandardRent.mAmount;
		if (TenantInfo.iResidencyType_ID neq 3) 
		{ProrateAmount = (variables.DailyRate * variables.DaysInHouse);}
		else {ProrateAmount = StandardRent.mAmount;}
	</cfscript>
	

	<!--- Prorated Rent --->
	<!--- Added by Katie: do a comparison between the converted amount and the amount currently in the InvoiceDetail table in case the user updated the private or respite R&B rate for that resident in the Move In credits screen.  If they are different, keep the InvoiceDetail amount --->
	Old convertedAmount (House Rate) is <cfoutput>#ConvertedAmount#
	<br/>ChargeType: #ConvertedChargeType#
	<br />ConvertedDays: #ConvertedDays#
	</cfoutput><br/>
	
	<cfif convertedChargeType is "89" or convertedChargeType is "7">
		This is a RandB charge<br/>
		<cfquery name="getRBInvoiceDetail" datasource="#application.datasource#" maxrows="1">
		select mAmount 
		from InvoiceDetail
		where dtRowDeleted is not null and iTenant_ID = #TenantInfo.iTenant_ID#
			and iChargeType_ID = #ConvertedChargeType#
			and dtrowdeleted is null
		order by iInvoiceDetail_ID DESC
		</cfquery>

		<cfif getRBInvoiceDetail.recordcount is not 0>
			<cfif convertedAmount is not getRBInvoiceDetail.mAmount>
				<!--- added by katie 9/14/05: Only do this if the Tenant chargeSet or Apt Number hasn't changed --->
				<cfif (PrevInfo.cChargeSet is #Tenant.cChargeset#) 
				AND (PrevInfo.iAptAddress_ID is #form.iAptAddress_ID#)>
					<cfset convertedAmount = getRBInvoiceDetail.mAmount>
					New converted Amount since the RandB rate was independantly updated for this resident 
					(and neither the chargeset or room number changed): 
					<cfoutput>
					<br />ConvertedAmountA 1128:: #ConvertedAmount#.
					<BR>new Chargeset: #Tenant.cChargeSet# Old chargeset:
					 #PrevInfo.cChargeset# newAptAddress_ID: #form.iAptAddress_ID#
					 Old AptAddress_ID: #PrevInfo.iAptAddress_ID# 
					 <BR>
					</cfoutput>
					<br />d<br />
				<cfelse>
					And older different rate existed, but since the chargeset or room number has changed, the R&B rate will be the new rate: 
					<cfoutput>
						<br />
							ConvertedAmountB 1137:: #convertedAmount#.
							new Chargeset: #Tenant.cChargeSet# 
							Old chargeset: #PrevInfo.cChargeset#
							newAptAddress_ID: #form.iAptAddress_ID# 
							Old AptAddress_ID: #PrevInfo.iAptAddress_ID# 
						<BR  />
					</cfoutput>
				</cfif>
			</cfif>
		</cfif>
	</cfif>
	
	<cfoutput><br />ConvertedAmountC 1368 :: #ConvertedAmount#<br /></cfoutput>
	
	<cfif  ( #MonthList[i]#   LT  #session.TIPSMonth# )>
		<br>ProrateRent::  <cfoutput>#MonthList[i]#   LT  #session.TIPSMonth#</cfoutput><br />
		<cfset ConvertedAmount = round(#ConvertedAmount#*100)/100>
		<cfquery name="ProrateRent" datasource="#application.datasource#" result="ProrateRent">
			insert into InvoiceDetail
			(iInvoiceMaster_ID 
				,iTenant_ID 
				,iChargeType_ID 
				,cAppliesToAcctPeriod 
				,bIsRentAdj 
				,dtTransaction 
				,iQuantity 
				,cDescription 
				,mAmount
				,cComments 
				,dtAcctStamp 
				,iRowStartUser_ID 
				,dtRowStart
				,iDaysBilled )
			values
				(#iInvoiceMaster_ID# 
				,#TenantInfo.iTenant_ID# 
				,#ConvertedChargeType# 
				,'#DateFormat(MonthList[i],'yyyymm')#' 
				,null 
				,#CreateODBCDateTime(now())#
				,#ConvertedDays# 
				,'#trim(ConvertedDescription)#' 
				,#ConvertedAmount# 
				,'RENT U1' 
				,#CreateODBCDateTime(session.AcctStamp)# 
				,0 
				,#CreateODBCDateTime(now())# 
				,#ChargeDays[i]#)
		</cfquery>
		<cfdump var="#ProrateRent#">
				<cfoutput> Mamta test going in here?? care charges C insert into InvoiceDetail #variables.iInvoiceNumber# #ConvertedChargeType# #ConvertedAmount# RENT U1</cfoutput><br />
	</cfif>
	<cfoutput> tenant.iproductline_id #tenant.iproductline_id# SLevel.iSPointsMin #SLevel.iSPointsMin# 
		qResidentCare.RecordCount#qResidentCare.RecordCount# Tenant.cBillingType#Tenant.cBillingType# qDailyCare.RecordCount#qDailyCare.RecordCount# </cfoutput>
	<cfif  (tenant.iproductline_id neq 2 and SLevel.iSPointsMin neq '0' and SLevel.iSPointsMax neq '0')
		and (IsDefined('qResidentCare.RecordCount') and IsDefined('qDailyCare.RecordCount')
		and (
				(tenant.iproductline_id neq 2 and Tenant.cBillingType is 'M' and qResidentCare.RecordCount gt 0)
				or (tenant.iproductline_id neq 2 and Tenant.cBillingType is 'D' and qDailyCare.RecordCount gt 0)
				)
		)>
		<!--- ResidentCare  --->
		<!--- <cfif   ((ConvertedCareDays gt 0) and (ArrayLen(CareMonthList) gt 0) and (ArrayLen(CareMonthList) le limit))> --->
		<!--- <cfif (CareMoveInPeriod[i] lt TIPSPeriod)><br />YES <br /> --->
	<cfoutput>
	<br />
	===**> #ArrayLen(CareMonthList)# lte #i# <br />
	<cfif #i# lt arraylen(CareMoveInPeriod) >CareMoveInPeriod :: #CareMoveInPeriod[i]#</cfif>
	lte #TIPSPeriod# :: #ConvertedCareDays# :: #ArrayLen(CareMonthList)# le #limit#
	<br />
	</cfoutput>
	<cfset LenCareMonthList = #ArrayLen(CareMonthList)#>
	<cfset LenCareMoveInPeriod = #ArrayLen(CareMoveInPeriod)#>
	
<cfif #i# lte arraylen(CareMoveInPeriod) >
<br />	<cfoutput>CareMoveInPeriod i:: #i#   :::LenCareMonthList:  #LenCareMonthList# ::LenCareMoveInPeriod:  #LenCareMoveInPeriod#  
CareMoveInPeriod: #CareMoveInPeriod[i]#   LT  #TIPSperiod#
</cfoutput><br />
</cfif>

		<cfif (#i# lte #LenCareMonthList#   ) >
			<cfif  ( #i# LTE #LenCareMoveInPeriod#  ) >
				<cfif  ( #CareMoveInPeriod[i]#   LT  #TIPSperiod# )>	<!--- LTE --->
<cfoutput>
<br />
===> IN X:: #ArrayLen(CareMonthList)# lte #i# #CareMoveInPeriod[i]# lte #TIPSPeriod# ::
 #ConvertedCareDays# :: #ArrayLen(CareMonthList)# le #limit#
<br />
</cfoutput>
		<cfset ConvertedCareAmount = round(#ConvertedCareAmount#*100)/100>
		<cfquery name="ResidentCare" datasource="#application.datasource#">
			insert into InvoiceDetail
			(iInvoiceMaster_ID ,iTenant_ID ,iChargeType_ID ,cAppliesToAcctPeriod 
			,bIsRentAdj ,dtTransaction ,iQuantity ,cDescription, mAmount 
			,cComments ,dtAcctStamp ,iRowStartUser_ID ,dtRowStart,iDaysBilled )
				values
			(#iInvoiceMaster_ID# 
				,#TenantInfo.iTenant_ID# 
				,#ConvertedCareChargeType# 
				,'#DateFormat(CareMonthList[i],'yyyymm')#' 
				,null  
				,getdate()
				,#ConvertedCareDays# 
				,'#ConvertedCareDescription#' 
				,#ConvertedCareAmount#
				,'CARE U1' 
				,#CreateODBCDateTime(session.AcctStamp)# 
				,0 
				,<cfif GetMIAutoApplyCharges.iChargeType_ID is 91>
					#CreateODBCDateTime(TenantInfo.dtMoveIn)#
				<cfelse>
					#CreateODBCDateTime(TenantInfo.dtRentEffective)#
				</cfif>	<!--- getdate()  --->
				,#ChargeDays[i]#)
		</cfquery>
		<!---<cfoutput>C insert into InvoiceDetail #variables.iInvoiceNumber# #ConvertedChargeType# care U1</cfoutput><br />--->
		</cfif>
		</cfif>
		</cfif>
	</cfif>
	<!--- 35227 RTS - AUTO APPLY RECURRING CHARGES  --->
<br /><cfoutput>
GetMIAutoApplyCharges: #TenantInfo.iResidencyType_ID# :: #Occupancy# :: #GetMIAutoApplyCharges.RecordCount#
</cfoutput><br />

		<cfif ((TenantInfo.iResidencyType_ID eq 1) 
			or ( TenantInfo.iResidencyType_ID eq 2 )
			or ( TenantInfo.iResidencyType_ID eq 5 )			
			) 
				AND Occupancy EQ 1>
		 <br />		<cfset thisacctmonth = #DateFormat(MonthList[i],'yyyymm')#>
		<cfif GetMIAutoApplyCharges.RecordCount gt 0>
			<cfloop query="GetMIAutoApplyCharges">
				 <br />	
				<!---  <cfdump var="#GetMIAutoApplyCharges#" label="GetMIAutoApplyCharges1"><br /> --->
					<cfif ((GetMIAutoApplyCharges.iChargeType_ID neq 69) and
						( GetMIAutoApplyCharges.iChargeType_ID neq 53))> 
						<!--- RECURRING PART --->
							<cfquery name="CheckforRecurringCharge" 
							datasource="#application.datasource#">
								select * from RecurringCharge rc
								where rc.iTenant_ID = #TenantInfo.iTenant_ID#
								and rc.iCharge_ID = #GetMIAutoApplyCharges.iCharge_ID#
								and rc.dtRowDeleted is null
							</cfquery>
 
							<cfif CheckforRecurringCharge.RecordCount lt 1> 
							<cfset GetMIAutoApplyChargesAmt = round(#GetMIAutoApplyCharges.mAmount#*100)/100>
								<cfquery name="AddAutoApplyRecurringCharge" datasource="#application.datasource#">
								insert into RecurringCharge
									(iTenant_ID,iCharge_ID,dtEffectiveStart
									,dtEffectiveEnd
									,iQuantity,cDescription
									,mAmount
									 ,cComments 
									,dtAcctStamp
									,iRowStartUser_ID
									,dtRowStart,bIsDaily)
								values
									(#TenantInfo.iTenant_ID#
									,#GetMIAutoApplyCharges.iCharge_ID#
									,<cfif GetMIAutoApplyCharges.iChargeType_ID is 89>
										#CreateODBCDateTime(TenantInfo.dtRentEffective)#
									<cfelse>
										#CreateODBCDateTime(TenantInfo.dtMoveIn)#
									</cfif>	<!--- getdate() --->
									,'12/31/2020'
									,'1','#GetMIAutoApplyCharges.cDescription#'
									,#GetMIAutoApplyChargesAmt#
									 ,'Created During MoveIn - AutoApply -recurringloopU'
									,#CreateODBCDateTime(session.AcctStamp)#
									,#session.userid#
									,getdate() 
									,#GetMIAutoApplyCharges.bIsDaily#
									)
								</cfquery>
								<!--- Then get info on what was just inserted for invoice  --->
								<cfquery name="GetNewRecurringforInvoice" 
								datasource="#application.datasource#">
									Select rc.* from RecurringCharge rc
									where rc.iTenant_ID = #TenantInfo.iTenant_ID#
									and rc.iCharge_ID = #GetMIAutoApplyCharges.iCharge_ID#
									and rc.dtRowDeleted is null 
								</cfquery>
								<cfdump var="#GetNewRecurringforInvoice#" label="GetNewRecurringforInvoice">
							</cfif>
					<!--- INVOICE PART --->
							<cfquery name="CheckforInvDtlRecord" 
							datasource="#application.datasource#">
								select id.* from invoicedetail id 
								where id.iTenant_ID = #TenantInfo.iTenant_ID#
								and id.iChargeType_ID = #GetMIAutoApplyCharges.iChargeType_ID#
								and id.cAppliesToAcctPeriod = '#DateFormat(MonthList[i],'yyyymm')#'
								and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID#
								<cfif CheckforRecurringCharge.RecordCount gt 0>
									and id.iRecurringCharge_ID =
									 '#CheckforRecurringCharge.iRecurringCharge_ID#' 
								<cfelse>	
									and id.iRecurringCharge_ID =
									 '#GetNewRecurringforInvoice.iRecurringCharge_ID#'
								</cfif>
								and id.dtRowDeleted is null
							</cfquery>
							<cfif CheckforInvDtlRecord.RecordCount lt 1>
							 	<cfif #DateFormat(MonthList[i],'yyyymm')# lt #tipsperiod#>
									<cfif GetMIAutoApplyCharges.iChargeType_ID is 89>	
									<cfset GetMIAutoApplyChargesAmt  = round(#GetMIAutoApplyCharges.mAmount#*100)/100	>						
									<cfquery name="InsertAutoApplyCharge" 
										datasource="#application.datasource#">
											insert into InvoiceDetail
											(iInvoiceMaster_ID ,iTenant_ID ,iChargeType_ID 
											,cAppliesToAcctPeriod ,dtTransaction 
											,iQuantity 
											,cDescription
											, mAmount 
											 ,cComments 
											,dtAcctStamp 
											,iRowStartUser_ID ,dtRowStart,iRecurringCharge_ID,iDaysBilled )
											values
											(#variables.iInvoiceMaster_ID# 
											,#TenantInfo.iTenant_ID#
											 ,#GetMIAutoApplyCharges.iChargeType_ID#
											,'#DateFormat(MonthList[i],'yyyymm')#'
											,getdate()
											<cfif GetMIAutoApplyCharges.iChargeType_ID is 91>
												<cfif GetMIAutoApplyCharges.bIsDaily eq 1>
													,#ConvertedCareDays# 
												<cfelse>
													,1 
												</cfif>
											<cfelse>
												<cfif GetMIAutoApplyCharges.bIsDaily eq 1>
												,#ConvertedDays# 
												<cfelse>
												,1 
												</cfif>
											</cfif>
											,'#GetMIAutoApplyCharges.cDescription#'
											,#GetMIAutoApplyChargesAmt#
											,'Recurring Created at MoveIn2' 
											,#CreateODBCDateTime(session.AcctStamp)#
											,0
											
											,<cfif GetMIAutoApplyCharges.iChargeType_ID is 91>
												#CreateODBCDateTime(TenantInfo.dtMoveIn)#
											<cfelse>
												#CreateODBCDateTime(TenantInfo.dtRentEffective)#
											</cfif>	
											<!--- getdate() --->
											,<cfif CheckforRecurringCharge.RecordCount gt 0>
												#CheckforRecurringCharge.iRecurringCharge_ID# 
											<cfelse>	
												#GetNewRecurringforInvoice.iRecurringCharge_ID#
											</cfif>
											,#ChargeDays[i]#)
								</cfquery>
						<!---<cfoutput> E insert into InvoiceDetail #variables.iInvoiceMaster_ID# # GetMIAutoApplyCharges.iChargeType_ID# Recurring Created at MoveIn2<cfoutput><br />--->
								<cfquery name="BSFbase" datasource="#application.datasource#">
									select id.* from invoicedetail id 
									where id.iTenant_ID = #TenantInfo.iTenant_ID#
									and id.iChargeType_ID in (7,31,89)
									and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID#
									and id.dtRowDeleted is null
								</cfquery>
								<cfif FindNoCase('Companion Studio', GetMIAutoApplyCharges.cDescription,1) gt 0>
									<cfset IsCompanion = 'Yes'>
								<cfelse>
									<cfset IsCompanion = 'No'>
								</cfif>											
							<cfelse><!--- not BSF --->
								<cfif #DateFormat(MonthList[i],'yyyymm')# 
								gte #DateFormat(dtmovein,'yyyymm')#>
								<cfset GetMIAutoApplyChargesAmt = round(#GetMIAutoApplyCharges.mAmount#*100)/100>
									<cfquery name="InsertAutoApplyCharge" 
									datasource="#application.datasource#">
										insert into InvoiceDetail
										(iInvoiceMaster_ID 
										,iTenant_ID 
										,iChargeType_ID 
										,cAppliesToAcctPeriod 
										,dtTransaction 
										,iQuantity 
										,cDescription
										, mAmount 
										,cComments 
										,dtAcctStamp 
										,iRowStartUser_ID 
										,dtRowStart
										,iRecurringCharge_ID
										,iDaysBilled )
										values
										(#variables.iInvoiceMaster_ID# 
										,#TenantInfo.iTenant_ID# 
										,#GetMIAutoApplyCharges.iChargeType_ID#
										,'#DateFormat(MonthList[i],'yyyymm')#'
										,getdate()
										<cfif GetMIAutoApplyCharges.iChargeType_ID is 91>
											<cfif GetMIAutoApplyCharges.bIsDaily eq 1>
											,#ConvertedCareDays#
											<cfelse>
											,1
											</cfif>
										<cfelse>
											<cfif GetMIAutoApplyCharges.bIsDaily eq 1>
											,#ConvertedDays#
											<cfelse>
											,1
											</cfif>
										</cfif>
										,'#GetMIAutoApplyCharges.cDescription#'
										,#GetMIAutoApplyChargesAmt#
										,'Recurring-Created-at-MoveIn3' 
										,#CreateODBCDateTime(session.AcctStamp)#
										, 0  <!---mamta replaced userid with 0 as system insert so moveout can prorate the recurringcharge like cable --->
										,getdate() 
										,
										<cfif 
										((IsDefined("GetNewRecurringforInvoice.iRecurringCharge_ID")
										is "yes") 
										and (GetNewRecurringforInvoice.iRecurringCharge_ID 
										is not ""))>
											#GetNewRecurringforInvoice.iRecurringCharge_ID#
										<cfelse>
											#CheckforRecurringCharge.iRecurringCharge_ID#
										</cfif>
										,#ChargeDays[i]#)
									</cfquery>	
								</cfif>						<!---<cfoutput> F insert into InvoiceDetail #variables.iInvoiceMaster_ID# # GetMIAutoApplyCharges.iChargeType_ID# Recurring-Created-at-MoveIn3<cfoutput><br />	--->								
							</cfif>
						</cfif>
					</cfif>
<!---               <cfquery name="BSFbase" datasource="#application.datasource#">
				  select id.* from invoicedetail id 
				  where id.iTenant_ID = #TenantInfo.iTenant_ID#
				  and id.iChargeType_ID in (7,31,89)
				  and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID#
				  and id.dtRowDeleted is null
              </cfquery> --->
<!---               <cfquery name="ComunityFeebase" datasource="#application.datasource#">
				  select id.* from invoicedetail id 
				  where id.iTenant_ID = #TenantInfo.iTenant_ID#
				  and id.iChargeType_ID in (7,31,89)
				  and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID#
				  and id.dtRowDeleted is null
              </cfquery>
              <cfquery name="UpdateBSFTenant" datasource="#application.datasource#">
				  Update TenantState
				  set mBSFOrig = #BSFbase.mamount#
				  where itenant_id = #form.itenant_id#
              </cfquery> --->							
<!--- 					<cfquery name="qryCompanion" DBTYPE='QUERY'>
						select cdescription from ComunityFeebase where ichargetype_id in (7,31,89)
					</cfquery>
					<cfif FindNoCase('Companion Studio', qryCompanion.cdescription,1) gt 0>
						<cfset IsCompanion = 'Yes'>
					<cfelse>
						<cfset IsCompanion = 'No'>
					</cfif>	 --->		  
		<cfelseif (((Occupancy gt 1) and   (IsCompanion is not 'Yes')) 
			and (GetMIAutoApplyCharges.iChargeType_ID is 69))>
		<!--- Then ChargeType_ID is 69 (new resident fee). 1 time charge --->
			do something else
		<cfelse>
			<cfset thisacctmonth = #DateFormat(MonthList[i],'yyyymm')#>
			<cfquery name="CheckforInvDtlRecord" datasource="#application.datasource#">
				select id.* from invoicedetail id 
				where id.iTenant_ID = #TenantInfo.iTenant_ID#
				and id.iChargeType_ID = #GetMIAutoApplyCharges.iChargeType_ID#
				and id.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID#
				and id.dtRowDeleted is null
			</cfquery>
			<cfif CheckforInvDtlRecord.RecordCount lt 1>
				<cfif #Tenant.cBillingType# is 'M' >
					<cfset thisConvertedAmount = 	 round(#StandardRent.mAmount#*100)/100>
				<cfelseif #Tenantinfo.cSecDepCommFee# is 'SC' >
					<cfset thisConvertedAmount = 	 round(#GetMIAutoApplyCharges.mAmount#*100)/100>
				<cfelseif #Tenantinfo.iresidencytype_id# is 5>
					<cfset thisConvertedAmount = 	 round((#ConvertedAmount# * 30.4)*100)/100>
				<cfelse>						
					<cfset thisConvertedAmount =  (#ConvertedAmount# * 30.4)>
				</cfif>			
			 	<cfquery name="InsertAutoApplyCharge" 
					datasource="#application.datasource#" result="InsertAutoApplyCharge">
					insert into InvoiceDetail  
						(iInvoiceMaster_ID 
						,iTenant_ID 
						,iChargeType_ID 
						,cAppliesToAcctPeriod 
						,dtTransaction 
						,iQuantity 
						,cDescription
						, mAmount 
						 ,cComments 
						,dtAcctStamp 
						,iRowStartUser_ID 
						,dtRowStart
						,iDaysBilled)
					values
						(#variables.iInvoiceMaster_ID# 
						,#TenantInfo.iTenant_ID# 
						,<cfif #Tenantinfo.cSecDepCommFee# is 'SC'>
						 	53
						<cfelse>
						 	#GetMIAutoApplyCharges.iChargeType_ID#
						</cfif>
						,'#DateFormat(MonthList[i],'yyyymm')#'
						,getdate()
						,1 
						,<cfif #Tenant.cBillingType# is 'M' >
							'CommunityFee'
							,#thisConvertedAmount#
							,'AutoApply Created at MoveIn - MCCF'						
						 <cfelseif #Tenantinfo.cSecDepCommFee# is 'SC' >
							'Security Deposit'
							,#thisConvertedAmount#
							,'AutoApply Created at MoveIn - SC'
						 <cfelseif #Tenantinfo.iresidencytype_id# is 5>
							'#GetMIAutoApplyCharges.cDescription#'
							,#thisConvertedAmount#
							,'AutoApply Created at MoveIn - NRF-MC'					
						<cfelse>						
							'#GetMIAutoApplyCharges.cDescription#'
							,#thisConvertedAmount#
							,'AutoApply Created at MoveIn - NRF'
						</cfif>
				 
						,#CreateODBCDateTime(session.AcctStamp)#
						,0
						,getdate() 
						,#Daysinmonth(TenantInfo.dtRentEffective)#) <!---ChargeDays[i]--->
					</cfquery> <cfoutput>CF</cfoutput><br />
					<cfdump var="#InsertAutoApplyCharge#">
				</cfif>  
			</cfif> <!--- ++ --->
		</cfloop> <!--- +++ --->
	</cfif> <!--- ++++ --->
</cfif> <!--- +++++ --->

</cfloop> <!--- ++++++ --->
<cfelseif TenantInfo.iResidencyType_ID eq 3> <!--- Resident is respite--->
	<cfinclude template="MoveInRespiteProcess.cfm">
</cfif>
</cfif>
 
<cfquery name="qHouseDeposits" datasource="#application.datasource#">
	select ct.* from chargeType ct
	join charges c on (c.iChargeType_ID = ct.iChargeType_ID)
	where ct.dtRowDeleted is null and bIsDeposit is not null and bIsRefundable is not null
	and c.iHouse_ID = #session.qSelectedHouse.iHouse_ID#
</cfquery>

<!--- Loop over existing deposit charges --->

<cfoutput>
	<cfloop index="Field" list="#form.fieldnames#" delimiters=",">
		<cfif FindNoCase('Deposit', Field, 1) gt 0>
			<cfquery name="qGetDepositCharge" datasource="#application.datasource#">
				select * from charges where dtRowDeleted is null 
				and iCharge_ID = #Evaluate('form.'& field)#
			</cfquery>
			#field# - #Evaluate('form.'& field)# : #qGetDepositCharge.cDescription# <br/>
			<cfset qGetDepositChargemAmount = round(#qGetDepositCharge.mAmount#*100)/100 >
			<cfquery name="Deposit#Evaluate('form.'& field)#" datasource="#application.datasource#">
				insert into InvoiceDetail
				(iInvoiceMaster_ID ,iTenant_ID ,iChargeType_ID ,cAppliesToAcctPeriod ,bIsRentAdj,
					dtTransaction ,iQuantity ,cDescription ,mAmount ,cComments 
					,dtAcctStamp ,iRowStartUser_ID ,dtRowStart,iDaysBilled )
				values
				(#iInvoiceMaster_ID#
					,#TenantInfo.iTenant_ID# 
					,#qGetDepositCharge.iChargeType_ID#
					,'#MoveInPeriod#' 
					,null
					,getdate()
					,1 
					,'#qGetDepositCharge.cDescription#' 
					,#qGetDepositChargemAmount# 
					,'qGetDepositCharge U'
					,#CreateODBCDateTime(session.AcctStamp)#
					,0 
					,getdate()
					,#Daysinmonth(TenantInfo.dtRentEffective)#)
			</cfquery><cfoutput>qGetDepositCharge U</cfoutput><br />
		</cfif>
	</cfloop>
</cfoutput>

<cfif TenantInfo.iResidencyType_ID LT 3>
	<!--- check to see if there are any charges for this invoice --->
	<cfquery name="qRecordCheck" datasource="#application.datasource#">
		select count(*) count from InvoiceDetail where dtRowDeleted is null
		and iInvoiceMaster_ID = #variables.iInvoiceMaster_ID# and iTenant_ID = #TenantInfo.iTenant_ID#
	</cfquery>

	<cfif qRecordCheck.RecordCount eq 0 or (qRecordCheck.count eq 0 or qRecordCheck.count eq "")>
		<!--- If there are no details automatically add a zero charge to the 3011 medicaid co-pay account --->
		<cfquery name="qMedZeroCharge" datasource="#application.datasource#">
<!--- 			select c.* from chargeType ct
			join charges c on c.iChargeType_ID = ct.iChargeType_ID
			where ct.dtRowDeleted is null and c.dtRowDeleted is null and ct.bIsMedicaid is not null
			and ct.bIsDaily is null and cGLAccount = 3011 --->
      select c.*
      from ChargeType ct
      join Charges c on c.iChargeType_ID = ct.iChargeType_ID
      where ct.dtRowDeleted is null and c.dtRowDeleted is null 
	  	and ct.bIsMedicaid is not null 
		<!--- and ct.bIsDaily is null  --->
		and cGLAccount in (3011, 3012)
		and c.cChargeSet = '#getHouseChargeset.CName#'
		and c.ihouse_id = #tenant.ihouse_id#			
		</cfquery>
 <!--- Added for Update Medicaid Residents February 2015 ---> 
  	<cfif TenantInfo.iResidencyType_ID EQ 2>
  		<cfquery name="qryHouseMedicaid" datasource="#application.datasource#">
			select * from HouseMedicaid where ihouse_id = #tenant.ihouse_id#
		</cfquery>
		<cfif ((bondhouse.cstatecode is 'NJ') or (bondhouse.cstatecode is 'WI'))>
			<cfinclude template="MoveInMedicaidNJ.cfm" >
			<cfif ArrayLen(MonthList) gt 1 and  ( MonthList[2]   LT  #TIPSMonth# )>
				<cfscript>
					nbrdays1 = monthdays[1];
					nbrdays2 = monthdays[2];
				</cfscript>
			<cfelse>
				<cfscript>
					nbrdays1 = monthdays[1];
				</cfscript>			
			</cfif>
		</cfif>
  	</cfif>
		<!--- Insert Zero amount Mediciad charge --->
<!--- 	<cfloop from=1 TO='#ArrayLen(MonthList)#' step='1' index=I>		
		<cfloop query="qMedZeroCharge" >
		<cfset thisacctmonth = #DateFormat(MonthList[i],'yyyymm')#>
		<cfquery name="ZeroAddition" datasource="#application.datasource#">
			insert into InvoiceDetail
			(iInvoiceMaster_ID 
				,iTenant_ID 
				,iChargeType_ID 
				,cAppliesToAcctPeriod 
				,bIsRentAdj 
				,dtTransaction 
				,iQuantity
				,cDescription 
				,mAmount 
				,cComments 
				,dtAcctStamp 
				,iRowStartUser_ID 
				,dtRowStart )
				values
			(#iInvoiceMaster_ID# 
				,#TenantInfo.iTenant_ID# 
				,#qMedZeroCharge.iChargeType_ID# 
				,'#thisacctmonth#' 
				,null
				,getdate() 
				 <cfif #qMedZeroCharge.iChargeType_ID# is 8 >
					,#ChargeDays[i]# 
					,'#trim(qMedZeroCharge.cDescription)#'
					,#qMedZeroCharge.mAmount#
				<cfelseif #qMedZeroCharge.iChargeType_ID# is 31 >
					, 1 
					,'#trim(qMedZeroCharge.cDescription)#'
					,#qryHouseMedicaid.mMedicaidBSFDaily#
				<cfelseif #qMedZeroCharge.iChargeType_ID# is 1661 >
					, 1 
					,'#trim(qMedZeroCharge.cDescription)#'
					,#qryHouseMedicaid.mMedicaidCopay#
				<cfelse>
					, 1 
					,'#trim(qMedZeroCharge.cDescription)#'				 
					,  0.00 
				</cfif> 
				,'' 
				,#CreateODBCDateTime(session.AcctStamp)# 
				,0 
				,getdate() )
		</cfquery>
		</cfloop>
		</cfloop> --->
	</cfif>
</cfif>
<!--- ==============================================================================
Check InvoiceMaster for Existing MoveIn Invoice for this cSolomonKey that is open
or the last closed invoice
=============================================================================== --->
<cfquery name="InvoiceCheck" datasource="#application.datasource#">
	select Max(dtMoveIn) as MaxMoveIn,
			im.iInvoiceMaster_ID
			, im.mInvoiceTotal
			, im.mLastInvoiceTotal
			, im.dtInvoiceEnd
			, im.dtInvoiceStart
			, im.bFinalized
			, inv.iTenant_ID
	from InvoiceMaster im
	join InvoiceDetail inv on im.iInvoiceMaster_ID = inv.iInvoiceMaster_ID
	join TenantState ts on ts.iTenant_ID = inv.iTenant_ID
	where cSolomonKey = '#TenantInfo.cSolomonKey#' and ts.iTenantStateCode_ID = 2
		and (bFinalized is not null or (inv.iTenant_ID <> #TenantInfo.iTenant_ID# 
		and bMoveInInvoice is not null))
		and im.dtRowDeleted is null and inv.dtRowDeleted is null
	group by im.iInvoiceMaster_ID, im.mInvoiceTotal, im.mLastInvoiceTotal
	, im.dtInvoiceEnd, im.dtInvoiceStart,
		im.bFinalized, inv.iTenant_ID, im.cAppliesToAcctPeriod
	order by im.cAppliesToAcctPeriod desc
</cfquery>

<cfquery name="qInvoice" datasource="#application.datasource#">
	select cast(sum(mamount * iquantity) as money) as sumtotal
	, im.iInvoiceMaster_ID, im.mLastInvoiceTotal
	, im.mInvoiceTotal, im.dtInvoiceStart
	from InvoiceDetail inv
	join InvoiceMaster im on (im.iInvoiceMaster_ID = inv.iInvoiceMaster_ID 
	and im.dtRowDeleted is null)
	where inv.dtRowDeleted is null 
	and inv.iInvoiceMaster_ID = #variables.iInvoiceMaster_ID# and inv.dtrowdeleted is null
	group by im.iInvoiceMaster_ID, im.mLastInvoiceTotal, im.mInvoiceTotal, im.dtInvoiceStart
</cfquery>

<cfif InvoiceCheck.RecordCount eq 0>
	<!--- get the solomon balance --->
	<cfquery name="qSolbalance" datasource="#application.datasource#">
		<cfif session.qSelectedHouse.iHouse_ID eq 200>
			select -200.00 as bal
		<cfelse> 
			select isNull(SUM(amount),0) as BAL 
			from rw.vw_Get_Trx where CUSTID = '#Tenant.cSolomonKey#'
			and RLSED = 1 and USER7 <= '#qInvoice.dtInvoiceStart#'
		</cfif>
	</cfquery>

	<cfscript>
		if (qSolbalance.Bal neq 0 and qSolbalance.Bal neq '' 
		and (Occupancy eq 1 or linkedaccount eq 0) ) { PreviousBalance = qSolbalance.Bal; }
		else { PreviousBalance = 0.00; }
	</cfscript>
<cfelse>
	<cfscript>
		if (InvoiceCheck.mInvoiceTotal neq "" 
		and InvoiceCheck.mInvoiceTotal neq 0) { PreviousBalance = InvoiceCheck.mInvoiceTotal; }
		else { PreviousBalance = 0.00; }
	</cfscript>
</cfif>

<cfscript>
	if ((qInvoice.recordcount gt 0 and qInvoice.sumtotal neq "") 
	and Occupancy eq 1) { ThisNewInvoiceTotal = (qInvoice.sumtotal *1) + PreviousBalance;}
	else if ((qInvoice.recordcount gt 0 and qInvoice.sumtotal neq "") 
	and Occupancy eq 2) { ThisNewInvoiceTotal = (qInvoice.sumtotal *1); }
	else { ThisNewInvoiceTotal = PreviousBalance; }
</cfscript>

<!--- Update the Invoice Header with the current amounts --->

<cfif TenantInfo.iResidencyType_ID neq 3>
	<cfquery name="qUpdateMoveInHeader" datasource="#application.datasource#">
		update InvoiceMaster
		set dtInvoiceStart = 
		<cfif InvoiceCheck.dtInvoiceEnd neq "">
		 '#InvoiceCheck.dtInvoiceEnd#'  
		<cfelse> 
		getdate()  
		</cfif>
			,<cfif PreviousBalance neq "">
			 mLastInvoiceTotal = #PreviousBalance# 
			<cfelse>
			mLastInvoiceTotal = null 
			</cfif>
			,mInvoiceTotal = #ThisNewInvoiceTotal#
			, cAppliesToAcctPeriod = '#DateFormat(session.TipsMonth,"yyyymm")#'
			,iRowStartUser_ID = #session.USERID#
		where iInvoiceMaster_ID = #iInvoiceMaster_ID#
	</cfquery>
</cfif>
 	<cfquery name="qChkNRF" datasource="#application.datasource#">
		Select mAmount 
		from InvoiceDetail
 		where iInvoiceMaster_ID = #iInvoiceMaster_ID# and iChargeType_ID = 69
	</cfquery>
<cfif isdefined('newNRFee') 
	and newNRFee is not ''  
	and qChkNRF.mamount neq #newNRFee# 
	and  Tenant.iResidencyType_ID is not 3>
	<cfset newNRFeeAmt =  round(#newNRFee#*100)/100>
	<cfquery name="qUpdateMoveInHeader" datasource="#application.datasource#">
		update InvoiceDetail
		set mAmount =  #newNRFeeAmt#  
 		where iInvoiceMaster_ID = #iInvoiceMaster_ID# and iChargeType_ID = 69
	</cfquery>
</cfif>

<cfif form.cFirstName neq "" and form.cLastName neq "">
	<cfif contactInfo.iContact_ID neq "">
		<cfquery name="Contact" datasource="#application.datasource#">
			update contact
			set cFirstName = <cfif form.cFirstName neq "">'#trim(form.cFirstName)#',
			<cfelse> null, </cfif>
					cLastName = <cfif form.cLastName  neq "">'#trim(form.cLastName)#',
					<cfelse> null, </cfif>
					cPhoneNumber1 = <cfif variables.Phone1	neq "">'#trim(variables.Phone1)#',
					<cfelse> null, </cfif>
					iPhoneType1_ID = <cfif form.iPhoneType1_ID neq "">#trim(form.iPhoneType1_ID)#,
					<cfelse> null, </cfif>
					cPhoneNumber2 = <cfif variables.Phone2	neq "">'#trim(variables.Phone2)#',
					<cfelse> null, </cfif>
					iPhoneType2_ID = <cfif form.iPhoneType2_ID neq "">#trim(form.iPhoneType2_ID)#,
					<cfelse> null, </cfif>
					cAddressLine1 = <cfif form.cAddressLine1 neq "">'#trim(form.cAddressLine1)#'
					,<cfelse> null, </cfif>
					cAddressLine2 = <cfif form.cAddressLine2 neq "">'#trim(form.cAddressLine2)#',
					<cfelse> null, </cfif>
					cCity = <cfif form.cCity neq ""> 	'#trim(form.cCity)#', 
					<cfelse> null, </cfif>
					cStateCode = <cfif form.cStateCode neq ""> '#trim(form.cStateCode)#',	
					<cfelse> null, </cfif>
					cZipCode = <cfif form.cZipCode	neq "">'#trim(form.cZipCode)#',
					<cfelse>null,</cfif>
					iRowStartUser_ID =	#session.UserID#, 
					dtRowStart = getdate(),
					cEmail = <cfif form.cEmail neq "">'#trim(form.cEmail)#'
					<cfelse> null </cfif>
			where iContact_ID = #ContactInfo.iContact_ID#
		</cfquery>

		<cfquery name="LinkTenantContact" datasource="#application.datasource#">
			update LinkTenantContact
			set <cfif form.iRelationshipType_ID neq "">
			 iRelationshipType_ID = #form.iRelationshipType_ID#, </cfif>
					<cfif IsDefined("form.ContactbIsPayor") 
					and form.ContactbIsPayor neq ""> bIsPayer=#form.ContactbIsPayor#,
					 <cfelse> bIsPayer=null, </cfif>
					<cfif IsDefined("form.bIsPowerOfAttorney") and form.bIsPowerOfAttorney neq "">
					 bIsPowerOfAttorney=#form.bIsPowerOfAttorney#, 
					 <cfelse> bIsPowerOfAttorney=null,	</cfif>
					<cfif IsDefined("form.bIsExecutorContact") and form.bIsExecutorContact neq "">
					 bIsExecutorContact=#form.bIsExecutorContact#, 
					 <cfelse> bIsExecutorContact=null,	</cfif>
				    <cfif IsDefined("form.bIsMedicalProvider") and form.bIsMedicalProvider neq "">
					 bIsMedicalProvider=#form.bIsMedicalProvider#, 
					 <cfelse> bIsMedicalProvider=null,	</cfif>
				    <cfif IsDefined("form.cPrimaryCarePhysicianContact") 
					and form.cPrimaryCarePhysicianContact neq "">
					cPrimaryCarePhysicianContact =#form.cPrimaryCarePhysicianContact#, 
					<cfelse>cPrimaryCarePhysicianContact = null, </cfif>
					<cfif form.cComments neq ""> 
					cComments='#form.cComments#', 
					<cfelse> 
					cComments =	null, 
					</cfif>
					iRowStartUser_ID = #session.UserID#,
					 dtRowStart = getdate()

<!--- 				<cfif isDefined("form.oGuarentorAgreement") and form.oGuarentorAgreement eq ''>,bIsGuarantorAgreement = null
				<cfelseif isDefined("form.oGuarentorAgreement")>,bIsGuarantorAgreement = #form.oGuarentorAgreement#
				<cfelse>,bIsGuarantorAgreement = null
				</cfif> --->
				<cfif isDefined("form.oGuarentorAgreement") and form.oGuarentorAgreement eq ''>
					,bIsGuarantorAgreement = null
				<cfelseif isDefined("form.oGuarentorAgreement")>
					,bIsGuarantorAgreement = #form.oGuarentorAgreement#
					,bIsPrimaryPayer  = 1
				<cfelse>
					,bIsGuarantorAgreement = null
					,bIsPrimaryPayer  = null				
				</cfif>
								
			where iLinkTenantContact_ID =	#ContactInfo.iLinkTenantContact_ID#
		</cfquery>
	<cfelse>

		<cfquery name="Contact" datasource="#application.datasource#">
			insert into contact
				(cFirstName ,cLastName ,cPhoneNumber1 ,iPhoneType1_ID ,cPhoneNumber2 
				,iPhoneType2_ID ,cAddressLine1
				,cAddressLine2 ,cCity ,cStateCode ,cZipCode ,iRowStartUser_ID 
				,dtRowStart, cEmail )
			values(
				<cfif form.cFirstname neq ''> '#form.cFirstName#' <cfelse> Null </cfif>,
				<cfif form.cLastname neq ''> '#form.cLastName#'  <cfelse> Null </cfif>,
				<cfif variables.Phone1 neq ''> '#variables.Phone1#'  <cfelse> Null </cfif>
				, #isBlank(form.iPhoneType1_ID,'null')#,
				<cfif variables.Phone2 neq ''> '#variables.Phone2#'  <cfelse> Null </cfif>
				, #isBlank(form.iPhoneType2_ID,'null')#,
				<cfif form.cAddressLine1 neq ''> '#form.cAddressLine1#' <cfelse> Null </cfif>
				,
				<cfif form.cAddressLine2 neq ''> '#form.cAddressLine2#' <cfelse> Null </cfif>
				,
				<cfif form.cCity neq ''> '#form.cCity#' <cfelse> Null </cfif>,
				<cfif form.cStateCode neq ''> '#form.cStateCode#' <cfelse> Null </cfif>,
				<cfif form.cZipCode neq ''> '#form.cZipCode#' <cfelse> Null </cfif>,
				#session.UserID#, getDate(),
				<cfif form.cEmail neq ''> '#form.cEmail#' <cfelse> Null </cfif>
			)
		</cfquery>

		<cfquery name="ContactID" datasource="#application.datasource#">
		select Max(iContact_ID) as iContact_ID 
		from contact 
		where cFirstname = '#form.cFirstName#' and cLastName = '#form.cLastName#'
		</cfquery>

		<cfquery name="LinkTenantContact" datasource="#application.datasource#">
			insert into LinkTenantContact (iTenant_ID 
			,iContact_ID 
			,iRelationshipType_ID 
			,bIsPayer 
			,bIsPowerOfAttorney 
			,bIsExecutorContact
			,bIsMedicalProvider 
			,cPrimaryCarePhysicianContact
			,bIsGuarantorAgreement
			,cComments 
			,iRowStartUser_ID 
			,dtRowStart
 )
			values
			(	<cfif form.iTenant_ID neq "">
				 	#form.iTenant_ID#, 
				 <cfelse> 
				 	null, 
				 </cfif>
				<cfif contactID.iContact_ID neq "">
				 		#ContactID.iContact_ID#,
				  <cfelse>
				   		null, 
				  </cfif>
				<cfif form.iRelationshipType_ID neq "">
				 	#form.iRelationshipType_ID#, 
				 <cfelse> 
				 	null, 
				 </cfif>
				<cfif IsDefined("form.ContactbIsPayor") and form.ContactbIsPayor neq "">
				 	#form.ContactbIsPayor#, 
				 <cfelse> 
				 	null, 
				 </cfif>
				<cfif IsDefined("form.bIsPowerOfAttorney") and form.bIsPowerOfAttorney neq ""> 
					#form.bIsPowerOfAttorney#, 
				<cfelse>
					null, 
				</cfif>
				<cfif IsDefined("form.bIsExecutorContact") and form.bIsExecutorContact neq "">
				 	#form.bIsExecutorContact#, 
				 <cfelse> 
				 	null, 
				 </cfif>
				<cfif IsDefined("form.bIsMedicalProvider") and form.bIsMedicalProvider neq "">
				 	#form.bIsMedicalProvider#, 
				 <cfelse> 
					 null, 
				 </cfif>
				<cfif IsDefined("form.cPrimaryCarePhysicianContact") 
				and form.cPrimaryCarePhysicianContact neq "">
					 #form.cPrimaryCarePhysicianContact#, 
				<cfelse> 
					 null, 
				</cfif>
				<cfif IsDefined("form.bIsGuarantorAgreement") 
				and form.bIsGuarantorAgreement neq "">
					#form.bIsGuarantorAgreement#,
				<cfelse>
					null,
				</cfif>
				<cfif form.cComments neq "">
					'#form.cComments#',
				<cfelse>
					null,
				</cfif>
				#session.UserID#, 
				getdate() 
			)
		</cfquery>
			<cfif not isDefined("form.oGuarentorAgreement") or (form.oGuarentorAgreement  neq 1)>
				<cfquery name="TenantStateCode" datasource="#application.datasource#">
					update TenantState
					Set bIsPrimaryPayer = 1
					
					WHERE iTenant_ID = #form.iTenant_ID#
				</cfquery>
			</cfif>
	</cfif>
<cfelseif not isDefined("form.oGuarentorAgreement") or (form.oGuarentorAgreement  neq 1)>
		<cfquery name="TenantStateCode" datasource="#application.datasource#">
			update TenantState
			Set bIsPrimaryPayer = 1
			
			WHERE iTenant_ID = #form.iTenant_ID#
		</cfquery>
</cfif>

</cftransaction>
 <cfoutput>IsCompanion = #IsCompanion#</cfoutput>
<cfoutput>
   <CFIF SESSION.USERID is 9999 or  SESSION.USERID is 9998> 
		<BR>
		<A HREF="MoveInCredits.cfm?ID=#form.iTenant_ID#&MID=#variables.iInvoiceMaster_ID#
		&NrfDiscApprove=#form.NrfDiscApprove#&monthdays1=#nbrdays1#&monthdays2=#nbrdays2#&acctperiod1=#AcctMonthList[1]#<cfif arraylen(AcctMonthList) gt 1>&acctperiod2=#AcctMonthList[2]#</cfif>">Continue.</A>
		  <CFELSE>   
	<cfif arraylen(AcctMonthList) gt 1>
		<cflocation url="MoveInCredits.cfm?ID=#form.iTenant_ID#&MID=#variables.iInvoiceMaster_ID#		&NrfDiscApprove=#form.NrfDiscApprove#&monthdays1=#nbrdays1#&monthdays2=#nbrdays2#&acctperiod1=#AcctMonthList[1]#&acctperiod2=#AcctMonthList[2]#"
		ADDTOKEN="No">
	<cfelse>
		<cflocation url="MoveInCredits.cfm?ID=#form.iTenant_ID#&MID=#variables.iInvoiceMaster_ID#
		&NrfDiscApprove=#form.NrfDiscApprove#&monthdays1=#nbrdays1#&monthdays2=#nbrdays2#&acctperiod1=#AcctMonthList[1]#"
		ADDTOKEN="No">
	</cfif>
  </CFIF>  
</cfoutput>   