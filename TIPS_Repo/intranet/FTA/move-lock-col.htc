<PUBLIC:COMPONENT  lightWeight = true>

<PUBLIC:attach	 event="oncontentready" onevent="initColX()" />
<PUBLIC:attach   event="ondetach" onevent="cleanupColX()" />
<PUBLIC:property name="interactive" value=true />
<PUBLIC:property name="allowColOrder" value=true />

<script language="VBScript">
option explicit
dim ie6
dim offset_x, offset_y
dim tHead
dim tHeadRow
dim tBody
dim colCount
dim arrHitTest
dim bDragMode
dim iDragCounter
dim objDragItem
dim objDragToItem1
dim objDragToItem2
dim dragHeadIndex
dim dragHeadHitIndex
dim lastHeadIndex
dim posOffSet
dim currentRow
dim selectedHeadIndex
set currentRow = nothing
set objDragItem = nothing
set objDragToItem1 = nothing
set objDragToItem2 = nothing
selectedHeadIndex = -1
dragHeadHitIndex = -1
bDragMode = false
ie6 = (instr(window.navigator.appVersion, "MSIE 6.") <> 0)

sub initColX()
	set tHead = element.tHead
	if tHead is nothing then exit sub
	set tHeadRow = tHead.children(0)
	if tHeadRow.tagName <> "TR" then exit sub
	set tBody = element.tBodies(0)
	if tBody is nothing then exit sub
	arrHitTest = initColumns
	initAdditionalElements
	with element
		.attachEvent "onmousemove",GetRef("ColXOnMouseMove")
	end with
	window.document.attachEvent "onmouseup", GetRef("ColXOnMouseUp")
end sub

sub cleanupColX
	dim i
	for i = lbound(arrHitTest) to ubound(arrHitTest)
		arrHitTest(i).detachEvent "onmousedown", GetRef("ColXHeadOnMouseDown")
		set arrHitTest(i) = nothing
	next
	with element
		.detachEvent "onmousemove",GetRef("ColXOnMouseMove")
	end with
	window.document.detachEvent "onmouseup", GetRef("ColXOnMouseUp")
	set currentRow = nothing
	if not objDragItem is nothing then objDragItem.removeNode true
	set objDragItem = nothing
	if not objDragToItem1 is nothing then objDragToItem1.removeNode true
	set objDragToItem1 = nothing
	if not objDragToItem2 is nothing then objDragToItem2.removeNode true
	set objDragToItem2 = nothing
	set cSelectedRows = nothing
end sub

sub initOffsets
    dim el
    offset_x = 0
    offset_y = 0
    set el = element
	do while (not el is nothing)
		offset_y = offset_y + el.offsetTop - el.scrollTop
		offset_x = offset_x + el.offsetLeft - el.scrollLeft
		set el = el.offsetParent
	loop
    set el = nothing
end sub

sub initAdditionalElements
	set objDragItem = document.createElement("DIV")
	with objDragItem.style
		.font = "menu"
		.backgroundColor = "navy"
		.cursor = "hand"
		.position = "absolute"
		.filter = "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=35)"
		.zIndex = 1001
		.visibility = "hidden"
	end with
	window.document.body.insertAdjacentElement "afterBegin", objDragItem
	set objDragToItem1 = document.createElement("DIV")
	
	window.document.body.insertAdjacentElement "afterBegin", objDragToItem1
	set objDragToItem2 = document.createElement("DIV")
	window.document.body.insertAdjacentElement "afterBegin", objDragToItem2
end sub

sub ColXHeadOnMouseDown
	if not element.allowColOrder then exit sub
	dim el
	dim selIndex
	set el = window.event.srcElement
	do while (el.tagName <> "TH")
		set el = el.parentElement
	loop
	bDragMode = true
	iDragCounter = 0
	initOffsets
	dragHeadIndex = getArrayIndex(el)
	element.setcapture
	element.style.cursor = "hand"
	with objDragItem
		.innerHTML = "<center>" & el.innerHTML & "</center>"
		.style.color = el.currentStyle.color
		.style.height = el.offsetHeight - 2
		.style.width  = el.offsetWidth - 12
	end with
	set el = nothing
end sub


sub ColXOnMouseMove
	if not element.allowColOrder then exit sub
	dim cliX, cliY
	if iDragCounter < 10 then 
		iDragCounter = iDragCounter + 1
		exit sub
	end if
	if (bDragMode and not objDragItem is nothing) then
		with window.event
			cliX = .clientX
			cliY = .clientY
			.cancelBubble = false
			.returnValue = false
		end with
		with objDragItem
			if (.style.visibility = "hidden") then .style.visibility = "visible"
			.style.posLeft = cliX - (.offsetWidth / 2)
			.style.posTop  = cliY - (.offsetHeight - 3)
		end with
		dragHeadHitIndex = hitTest(cliX, cliY)
	end if
end sub

sub ColXOnMouseUp
	if not element.allowColOrder then exit sub
	if not bDragMode then exit sub
	bDragMode = false
	objDragItem.style.visibility = "hidden"
	objDragToItem1.style.visibility = "hidden"
	objDragToItem2.style.visibility = "hidden"
	element.releasecapture
	element.style.cursor = "default"
	if dragHeadHitIndex <> -1 then moveCols dragHeadIndex, dragHeadHitIndex
	lastHeadIndex = -1
	dragHeadHitIndex = -1
end sub


function initColumns
	dim i
	dim tArray()
	dim imgElement
	colCount = tHeadRow.children.length
	redim tArray(colCount - 1)
	for i = 0 to colCount - 1
		with tHeadRow.children(i)
			if .children.length = 0 then 
				set imgElement = document.createElement("IMG")
			end if
			.attachEvent "onmousedown", GetRef("ColXHeadOnMouseDown")
		end with
		set tArray(i) = tHeadRow.children(i)
	next
	initColumns = tArray
end function


sub hiliteHeader(headIndex)
	dim o1Style, o2Style
	if (headIndex = lastHeadIndex) then exit sub
	set o1Style = objDragToItem1.style
	set o2Style = objDragToItem2.style
	if (headIndex = -1) then
		if o1Style.visibility <> "hidden" then o1Style.visibility = "hidden"
		if o2Style.visibility <> "hidden" then o2Style.visibility = "hidden"
		if ie6 then
			if element.style.cursor <> "no-drop" then element.style.cursor = "no-drop"
		end if
		lastHeadIndex = -1
		set o1Style = nothing
		set o2Style = nothing
		exit sub
	end if
	if element.style.cursor <> "hand" then element.style.cursor = "hand"
	if headIndex > ubound(arrHitTest) - 1 then
		o1Style.posTop = offset_y - o1Style.posHeight
		o1Style.posLeft = arrHitTest(headIndex - 1).offsetLeft + arrHitTest(headIndex - 1).offsetWidth - posOffSet + offset_x
	else
		o1Style.posTop = offset_y - o1Style.posHeight
		o1Style.posLeft = arrHitTest(headIndex).offsetLeft - posOffSet + offset_x
	end if
	o2Style.posTop = arrHitTest(0).offsetHeight + offset_y
	o2Style.posLeft = o1Style.posLeft
	if o1Style.visibility <> "visible" then o1Style.visibility = "visible"
	if o2Style.visibility <> "visible" then o2Style.visibility = "visible"
	lastHeadIndex = headIndex
	set o1Style = nothing
	set o2Style = nothing
end sub


sub moveCols(fCol, tCol)
	dim i
	dim elTextSave
	if fCol = tCol then exit sub
	if selectedHeadIndex <> -1 then elTextSave = arrHitTest(selectedHeadIndex).innerText
	moveHeaderCols cint(fCol), cint(tCol)
	for i = 0 to tBody.rows.length - 1
		moveBodyCols i, cint(fCol), cint(tCol)
	next
	for i = lbound(arrHitTest) to ubound(arrHitTest)
		set arrHitTest(i) = nothing
		set arrHitTest(i) = tHeadRow.children(i)
		if not elTextSave = "" then
			if elTextSave = arrHitTest(i).innerText then
				selectedHeadIndex = i
				elTextSave = ""
			end if
		end if
	next
end sub

sub moveHeaderCols(fCol, tCol)
	dim i, nCol, dCol
	dim saveHTML, saveWidth
	if fCol > tCol then
		dCol = -1
		nCol = fCol - tCol
	else
		dCol = 1
		nCol = tCol - fCol
	end if
	saveHTML = tHeadRow.children(fCol).innerHTML
	saveWidth = tHeadRow.children(fCol).width
	for i = 0 to nCol - 1
		tHeadRow.children(fCol).innerHTML = tHeadRow.children(fCol + dCol).innerHTML
		tHeadRow.children(fCol).width = tHeadRow.children(fCol + dCol).width
		fCol = fCol + dCol
	next
	tHeadRow.children(tCol).innerHTML = saveHTML
	tHeadRow.children(tCol).width = saveWidth
end sub

sub moveBodyCols(iRow, fCol, tCol)
	dim i, nCol, dCol
	dim saveHTML
	if fCol > tCol then
		dCol = -1
		nCol = fCol - tCol
	else
		dCol = 1
		nCol = tCol - fCol
	end if
	saveHTML = tBody.children(iRow).children(fCol).innerHTML
	for i = 0 to nCol - 1
		tBody.children(iRow).children(fCol).innerHTML = tBody.children(iRow).children(fCol + dCol).innerHTML
		fCol = fCol + dCol
	next
	tBody.children(iRow).children(tCol).innerHTML = saveHTML
end sub

function hitTest(x, y)
	dim i, iHit
	if y - offset_y > (arrHitTest(0).offsetTop + ((arrHitTest(0).offsetHeight - 3) * 2)) or y - offset_y < arrHitTest(0).offsetTop - 3 then
		hiliteHeader -1
		hitTest = -1
		exit function
	end if
	for i = 0 to colCount - 1
		if x - offset_x > arrHitTest(i).offsetLeft and x - offset_x < arrHitTest(i).offsetLeft + arrHitTest(i).offsetWidth then
			if x - offset_x <= arrHitTest(i).offsetLeft + (arrHitTest(i).offsetWidth \ 2) then
				hiliteHeader i
				if dragHeadIndex > i then
					iHit = i
				elseif dragHeadIndex = i then
					iHit = i
				elseif dragHeadIndex < i then
					iHit = i - 1
				end if
			elseif x - offset_x => arrHitTest(i).offsetLeft + (arrHitTest(i).offsetWidth \ 2) then
				hiliteHeader i + 1
				if dragHeadIndex > i then
					iHit = i + 1
				elseif dragHeadIndex = i then
					iHit = i
				elseif dragHeadIndex < i then
					iHit = i
				end if
			end if
			if iHit < lbound(arrHitTest) then iHit = lbound(arrHitTest)
			if iHit > ubound(arrHitTest) then iHit = ubound(arrHitTest)
			hitTest = iHit
			exit function
		end if
	next
	hitTest = -1
end function

function getArrayIndex(el)
	dim i
	for i = lbound(arrHitTest) to ubound(arrHitTest)
		if (el is arrHitTest(i)) then
			getArrayIndex = i
			exit function
		end if
	next
	getArrayIndex = -1
end function

</script>
</PUBLIC:COMPONENT>